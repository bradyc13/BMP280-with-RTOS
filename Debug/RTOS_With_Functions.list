
RTOS_With_Functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd30  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800fe70  0800fe70  00010e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010420  08010420  00011420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010428  08010428  00011428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801042c  0801042c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  20000008  08010430  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009548  200001e4  0801060c  000121e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000972c  0801060c  0001272c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036043  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000067e1  00000000  00000000  00048257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003370  00000000  00000000  0004ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000027d1  00000000  00000000  00051da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002c61d  00000000  00000000  00054579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000376a7  00000000  00000000  00080b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001146ea  00000000  00000000  000b823d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc927  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ee14  00000000  00000000  001cc96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001db780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800fe58 	.word	0x0800fe58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800fe58 	.word	0x0800fe58

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <compensate_temperature>:
	t_fine = var1+var2;
	T = (t_fine*5 +128)>>8;
	return T;
}

float compensate_temperature(int32_t adc_T) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    int32_t var1, var2,t_fine;
    var1 = ((((adc_T >> 3) - ((int32_t)calib_data.dig_T1 << 1))) * ((int32_t)calib_data.dig_T2)) >> 11;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	10da      	asrs	r2, r3, #3
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <compensate_temperature+0x88>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f70 <compensate_temperature+0x88>)
 8000efe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	12db      	asrs	r3, r3, #11
 8000f08:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)calib_data.dig_T1)) * ((adc_T >> 4) - ((int32_t)calib_data.dig_T1))) >> 12) * ((int32_t)calib_data.dig_T3)) >> 14;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	111b      	asrs	r3, r3, #4
 8000f0e:	4a18      	ldr	r2, [pc, #96]	@ (8000f70 <compensate_temperature+0x88>)
 8000f10:	8812      	ldrh	r2, [r2, #0]
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	1112      	asrs	r2, r2, #4
 8000f18:	4915      	ldr	r1, [pc, #84]	@ (8000f70 <compensate_temperature+0x88>)
 8000f1a:	8809      	ldrh	r1, [r1, #0]
 8000f1c:	1a52      	subs	r2, r2, r1
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	131b      	asrs	r3, r3, #12
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <compensate_temperature+0x88>)
 8000f26:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	139b      	asrs	r3, r3, #14
 8000f30:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    float T = (t_fine * 5 + 128) >> 8;
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	3380      	adds	r3, #128	@ 0x80
 8000f44:	121b      	asrs	r3, r3, #8
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4e:	edc7 7a02 	vstr	s15, [r7, #8]
    return T / 100.0;
 8000f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f56:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f74 <compensate_temperature+0x8c>
 8000f5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f5e:	eef0 7a66 	vmov.f32	s15, s13
}
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000a7c 	.word	0x20000a7c
 8000f74:	42c80000 	.word	0x42c80000

08000f78 <compensate_pressure_v2>:
    var2 = (((int64_t)calib_data.dig_P8) * p) >> 19;
    p = ((p + var1 + var2) >> 8) + (((int64_t)calib_data.dig_P7) << 4);
    return p / 25600.0;
}
double compensate_pressure_v2(int32_t adc_P)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    double var1, var2, p;
    var1 = ((double)t_fine/2.0) - 64000.0;
 8000f80:	4bc5      	ldr	r3, [pc, #788]	@ (8001298 <compensate_pressure_v2+0x320>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff faa5 	bl	80004d4 <__aeabi_i2d>
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f92:	f7ff fc33 	bl	80007fc <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	4bbe      	ldr	r3, [pc, #760]	@ (800129c <compensate_pressure_v2+0x324>)
 8000fa4:	f7ff f948 	bl	8000238 <__aeabi_dsub>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data.dig_P6 / 32768.0);
 8000fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fb8:	f7ff faf6 	bl	80005a8 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	4bb6      	ldr	r3, [pc, #728]	@ (80012a0 <compensate_pressure_v2+0x328>)
 8000fc6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa82 	bl	80004d4 <__aeabi_i2d>
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4bb3      	ldr	r3, [pc, #716]	@ (80012a4 <compensate_pressure_v2+0x32c>)
 8000fd6:	f7ff fc11 	bl	80007fc <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff fae1 	bl	80005a8 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data.dig_P5) * 2.0;
 8000fee:	4bac      	ldr	r3, [pc, #688]	@ (80012a0 <compensate_pressure_v2+0x328>)
 8000ff0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa6d 	bl	80004d4 <__aeabi_i2d>
 8000ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ffe:	f7ff fad3 	bl	80005a8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	f7ff f915 	bl	800023c <__adddf3>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800101a:	f7ff f90f 	bl	800023c <__adddf3>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data.dig_P4) * 65536.0);
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b9f      	ldr	r3, [pc, #636]	@ (80012a8 <compensate_pressure_v2+0x330>)
 800102c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001030:	f7ff fbe4 	bl	80007fc <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4614      	mov	r4, r2
 800103a:	461d      	mov	r5, r3
 800103c:	4b98      	ldr	r3, [pc, #608]	@ (80012a0 <compensate_pressure_v2+0x328>)
 800103e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa46 	bl	80004d4 <__aeabi_i2d>
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b97      	ldr	r3, [pc, #604]	@ (80012ac <compensate_pressure_v2+0x334>)
 800104e:	f7ff faab 	bl	80005a8 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff f8ef 	bl	800023c <__adddf3>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)calib_data.dig_P3) * var1 * var1 / 524288.0 + ((double)calib_data.dig_P2) * var1) / 524288.0;
 8001066:	4b8e      	ldr	r3, [pc, #568]	@ (80012a0 <compensate_pressure_v2+0x328>)
 8001068:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa31 	bl	80004d4 <__aeabi_i2d>
 8001072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001076:	f7ff fa97 	bl	80005a8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001086:	f7ff fa8f 	bl	80005a8 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b86      	ldr	r3, [pc, #536]	@ (80012b0 <compensate_pressure_v2+0x338>)
 8001098:	f7ff fbb0 	bl	80007fc <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4614      	mov	r4, r2
 80010a2:	461d      	mov	r5, r3
 80010a4:	4b7e      	ldr	r3, [pc, #504]	@ (80012a0 <compensate_pressure_v2+0x328>)
 80010a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa12 	bl	80004d4 <__aeabi_i2d>
 80010b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010b4:	f7ff fa78 	bl	80005a8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff f8bc 	bl	800023c <__adddf3>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b77      	ldr	r3, [pc, #476]	@ (80012b0 <compensate_pressure_v2+0x338>)
 80010d2:	f7ff fb93 	bl	80007fc <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data.dig_P1);
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b70      	ldr	r3, [pc, #448]	@ (80012a4 <compensate_pressure_v2+0x32c>)
 80010e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e8:	f7ff fb88 	bl	80007fc <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b6e      	ldr	r3, [pc, #440]	@ (80012b4 <compensate_pressure_v2+0x33c>)
 80010fa:	f7ff f89f 	bl	800023c <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4614      	mov	r4, r2
 8001104:	461d      	mov	r5, r3
 8001106:	4b66      	ldr	r3, [pc, #408]	@ (80012a0 <compensate_pressure_v2+0x328>)
 8001108:	88db      	ldrh	r3, [r3, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9d2 	bl	80004b4 <__aeabi_ui2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fa46 	bl	80005a8 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (var1 == 0.0)
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001130:	f7ff fca2 	bl	8000a78 <__aeabi_dcmpeq>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <compensate_pressure_v2+0x1cc>
    {
        return 0; // avoid exception caused by division by zero
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	e09b      	b.n	800127c <compensate_pressure_v2+0x304>
    }
    p = 1048576.0 - (double)adc_P;
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f9c5 	bl	80004d4 <__aeabi_i2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4959      	ldr	r1, [pc, #356]	@ (80012b8 <compensate_pressure_v2+0x340>)
 8001154:	f7ff f870 	bl	8000238 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b55      	ldr	r3, [pc, #340]	@ (80012bc <compensate_pressure_v2+0x344>)
 8001166:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800116a:	f7ff fb47 	bl	80007fc <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001176:	f7ff f85f 	bl	8000238 <__aeabi_dsub>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a343      	add	r3, pc, #268	@ (adr r3, 8001290 <compensate_pressure_v2+0x318>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa0e 	bl	80005a8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001198:	f7ff fb30 	bl	80007fc <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = ((double)calib_data.dig_P9) * p * p / 2147483648.0;
 80011a4:	4b3e      	ldr	r3, [pc, #248]	@ (80012a0 <compensate_pressure_v2+0x328>)
 80011a6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f992 	bl	80004d4 <__aeabi_i2d>
 80011b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011b4:	f7ff f9f8 	bl	80005a8 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011c4:	f7ff f9f0 	bl	80005a8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <compensate_pressure_v2+0x348>)
 80011d6:	f7ff fb11 	bl	80007fc <__aeabi_ddiv>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = p * ((double)calib_data.dig_P8) / 32768.0;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <compensate_pressure_v2+0x328>)
 80011e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f973 	bl	80004d4 <__aeabi_i2d>
 80011ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011f2:	f7ff f9d9 	bl	80005a8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <compensate_pressure_v2+0x32c>)
 8001204:	f7ff fafa 	bl	80007fc <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    p = p + (var1 + var2 + ((double)calib_data.dig_P7)) / 16.0;
 8001210:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001214:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001218:	f7ff f810 	bl	800023c <__adddf3>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4614      	mov	r4, r2
 8001222:	461d      	mov	r5, r3
 8001224:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <compensate_pressure_v2+0x328>)
 8001226:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f952 	bl	80004d4 <__aeabi_i2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4620      	mov	r0, r4
 8001236:	4629      	mov	r1, r5
 8001238:	f7ff f800 	bl	800023c <__adddf3>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <compensate_pressure_v2+0x34c>)
 800124a:	f7ff fad7 	bl	80007fc <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001256:	f7fe fff1 	bl	800023c <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    p = p/100;
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <compensate_pressure_v2+0x350>)
 8001268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800126c:	f7ff fac6 	bl	80007fc <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return p;
 8001278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800127c:	ec43 2b17 	vmov	d7, r2, r3
 8001280:	eeb0 0a47 	vmov.f32	s0, s14
 8001284:	eef0 0a67 	vmov.f32	s1, s15
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40b86a00 	.word	0x40b86a00
 8001298:	20000aa0 	.word	0x20000aa0
 800129c:	40ef4000 	.word	0x40ef4000
 80012a0:	20000a7c 	.word	0x20000a7c
 80012a4:	40e00000 	.word	0x40e00000
 80012a8:	40100000 	.word	0x40100000
 80012ac:	40f00000 	.word	0x40f00000
 80012b0:	41200000 	.word	0x41200000
 80012b4:	3ff00000 	.word	0x3ff00000
 80012b8:	41300000 	.word	0x41300000
 80012bc:	40b00000 	.word	0x40b00000
 80012c0:	41e00000 	.word	0x41e00000
 80012c4:	40300000 	.word	0x40300000
 80012c8:	40590000 	.word	0x40590000

080012cc <read_calibration_data>:
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)calib_data.dig_H1)) >> 4));
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
    return (v_x1_u32r >> 12) / 1024.0;
}
void read_calibration_data() {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	@ 0x30
 80012d0:	af02      	add	r7, sp, #8
    uint8_t calib[26];
    uint8_t calib_addr = 0x88;
 80012d2:	2388      	movs	r3, #136	@ 0x88
 80012d4:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS_L, &calib_addr, 1, 500);
 80012d6:	f107 020b 	add.w	r2, r7, #11
 80012da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	21ec      	movs	r1, #236	@ 0xec
 80012e4:	485e      	ldr	r0, [pc, #376]	@ (8001460 <read_calibration_data+0x194>)
 80012e6:	f003 fd4b 	bl	8004d80 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, DEVICE_ADDRESS_L | 0x01, calib, 26, 500);
 80012ea:	f107 020c 	add.w	r2, r7, #12
 80012ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	231a      	movs	r3, #26
 80012f6:	21ed      	movs	r1, #237	@ 0xed
 80012f8:	4859      	ldr	r0, [pc, #356]	@ (8001460 <read_calibration_data+0x194>)
 80012fa:	f003 fe59 	bl	8004fb0 <HAL_I2C_Master_Receive>

    calib_data.dig_T1 = (uint16_t)(calib[1] << 8) | calib[0];
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b29b      	uxth	r3, r3
 8001304:	7b3a      	ldrb	r2, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b56      	ldr	r3, [pc, #344]	@ (8001464 <read_calibration_data+0x198>)
 800130c:	801a      	strh	r2, [r3, #0]
    calib_data.dig_T2 = (int16_t)(calib[3] << 8) | calib[2];
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <read_calibration_data+0x198>)
 800131e:	805a      	strh	r2, [r3, #2]
    calib_data.dig_T3 = (int16_t)(calib[5] << 8) | calib[4];
 8001320:	7c7b      	ldrb	r3, [r7, #17]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	7c3b      	ldrb	r3, [r7, #16]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b4d      	ldr	r3, [pc, #308]	@ (8001464 <read_calibration_data+0x198>)
 8001330:	809a      	strh	r2, [r3, #4]

    calib_data.dig_P1 = (uint16_t)(calib[7] << 8) | calib[6];
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	7cba      	ldrb	r2, [r7, #18]
 800133a:	4313      	orrs	r3, r2
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b49      	ldr	r3, [pc, #292]	@ (8001464 <read_calibration_data+0x198>)
 8001340:	80da      	strh	r2, [r3, #6]
    calib_data.dig_P2 = (int16_t)(calib[9] << 8) | calib[8];
 8001342:	7d7b      	ldrb	r3, [r7, #21]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	7d3b      	ldrb	r3, [r7, #20]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b44      	ldr	r3, [pc, #272]	@ (8001464 <read_calibration_data+0x198>)
 8001352:	811a      	strh	r2, [r3, #8]
    calib_data.dig_P3 = (int16_t)(calib[11] << 8) | calib[10];
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7dbb      	ldrb	r3, [r7, #22]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <read_calibration_data+0x198>)
 8001364:	815a      	strh	r2, [r3, #10]
    calib_data.dig_P4 = (int16_t)(calib[13] << 8) | calib[12];
 8001366:	7e7b      	ldrb	r3, [r7, #25]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	7e3b      	ldrb	r3, [r7, #24]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <read_calibration_data+0x198>)
 8001376:	819a      	strh	r2, [r3, #12]
    calib_data.dig_P5 = (int16_t)(calib[15] << 8) | calib[14];
 8001378:	7efb      	ldrb	r3, [r7, #27]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	7ebb      	ldrb	r3, [r7, #26]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b37      	ldr	r3, [pc, #220]	@ (8001464 <read_calibration_data+0x198>)
 8001388:	81da      	strh	r2, [r3, #14]
    calib_data.dig_P6 = (int16_t)(calib[17] << 8) | calib[16];
 800138a:	7f7b      	ldrb	r3, [r7, #29]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	7f3b      	ldrb	r3, [r7, #28]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <read_calibration_data+0x198>)
 800139a:	821a      	strh	r2, [r3, #16]
    calib_data.dig_P7 = (int16_t)(calib[19] << 8) | calib[18];
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	7fbb      	ldrb	r3, [r7, #30]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <read_calibration_data+0x198>)
 80013ac:	825a      	strh	r2, [r3, #18]
    calib_data.dig_P8 = (int16_t)(calib[21] << 8) | calib[20];
 80013ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <read_calibration_data+0x198>)
 80013c2:	829a      	strh	r2, [r3, #20]
    calib_data.dig_P9 = (int16_t)(calib[23] << 8) | calib[22];
 80013c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <read_calibration_data+0x198>)
 80013d8:	82da      	strh	r2, [r3, #22]

    calib_data.dig_H1 = calib[25];
 80013da:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <read_calibration_data+0x198>)
 80013e0:	761a      	strb	r2, [r3, #24]

    uint8_t hum_calib[7];
    uint8_t hum_addr = 0xE1;
 80013e2:	23e1      	movs	r3, #225	@ 0xe1
 80013e4:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS_L, &hum_addr, 1, 100);
 80013e6:	1cfa      	adds	r2, r7, #3
 80013e8:	2364      	movs	r3, #100	@ 0x64
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	21ec      	movs	r1, #236	@ 0xec
 80013f0:	481b      	ldr	r0, [pc, #108]	@ (8001460 <read_calibration_data+0x194>)
 80013f2:	f003 fcc5 	bl	8004d80 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, DEVICE_ADDRESS_L | 0x01, hum_calib, 7, 100);
 80013f6:	1d3a      	adds	r2, r7, #4
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2307      	movs	r3, #7
 80013fe:	21ed      	movs	r1, #237	@ 0xed
 8001400:	4817      	ldr	r0, [pc, #92]	@ (8001460 <read_calibration_data+0x194>)
 8001402:	f003 fdd5 	bl	8004fb0 <HAL_I2C_Master_Receive>

    calib_data.dig_H2 = (int16_t)(hum_calib[1] << 8) | hum_calib[0];
 8001406:	797b      	ldrb	r3, [r7, #5]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	793b      	ldrb	r3, [r7, #4]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <read_calibration_data+0x198>)
 8001416:	835a      	strh	r2, [r3, #26]
    calib_data.dig_H3 = hum_calib[2];
 8001418:	79ba      	ldrb	r2, [r7, #6]
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <read_calibration_data+0x198>)
 800141c:	771a      	strb	r2, [r3, #28]
    calib_data.dig_H4 = (int16_t)(hum_calib[3] << 4) | (hum_calib[4] & 0x0F);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	b21a      	sxth	r2, r3
 8001424:	7a3b      	ldrb	r3, [r7, #8]
 8001426:	b21b      	sxth	r3, r3
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <read_calibration_data+0x198>)
 8001434:	83da      	strh	r2, [r3, #30]
    calib_data.dig_H5 = (int16_t)(hum_calib[5] << 4) | (hum_calib[4] >> 4);
 8001436:	7a7b      	ldrb	r3, [r7, #9]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	b21a      	sxth	r2, r3
 800143c:	7a3b      	ldrb	r3, [r7, #8]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <read_calibration_data+0x198>)
 800144a:	841a      	strh	r2, [r3, #32]
    calib_data.dig_H6 = (int8_t)hum_calib[6];
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	b25a      	sxtb	r2, r3
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <read_calibration_data+0x198>)
 8001452:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	@ 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200002e8 	.word	0x200002e8
 8001464:	20000a7c 	.word	0x20000a7c

08001468 <read_ADC_T>:
int32_t read_ADC_T(){
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af02      	add	r7, sp, #8
	//int8_t ADC_T[3];
	uint8_t ADC_T[3];
	int32_t merged_ADC_T;
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS_L, &temp_reg, 1, 500);
 800146e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <read_ADC_T+0x48>)
 8001478:	21ec      	movs	r1, #236	@ 0xec
 800147a:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <read_ADC_T+0x4c>)
 800147c:	f003 fc80 	bl	8004d80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DEVICE_ADDRESS_L| 0x01, ADC_T, 3, 500);
 8001480:	463a      	mov	r2, r7
 8001482:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2303      	movs	r3, #3
 800148a:	21ed      	movs	r1, #237	@ 0xed
 800148c:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <read_ADC_T+0x4c>)
 800148e:	f003 fd8f 	bl	8004fb0 <HAL_I2C_Master_Receive>
	//merged_ADC_T =(((int32_t)ADC_T[0])<<12)| (((int32_t)ADC_T[1])<<4)|(((int32_t)ADC_T[2])>>4);
	merged_ADC_T =(((int32_t)ADC_T[0])<<12)| (((int32_t)ADC_T[1])<<4)|(((int32_t)ADC_T[2])>>4);
 8001492:	783b      	ldrb	r3, [r7, #0]
 8001494:	031a      	lsls	r2, r3, #12
 8001496:	787b      	ldrb	r3, [r7, #1]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4313      	orrs	r3, r2
 800149c:	78ba      	ldrb	r2, [r7, #2]
 800149e:	0912      	lsrs	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	4313      	orrs	r3, r2
 80014a4:	607b      	str	r3, [r7, #4]
	//merged_ADC_T =(((int32_t)ADC_T[0])<<12)| (((int32_t)ADC_T[1])<<4)|(int32_t)ADC_T[2];
	return merged_ADC_T;
 80014a6:	687b      	ldr	r3, [r7, #4]

}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000008 	.word	0x20000008
 80014b4:	200002e8 	.word	0x200002e8

080014b8 <read_ADC_P>:

int32_t read_ADC_P(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af02      	add	r7, sp, #8
	uint8_t ADC_P[3];
	int32_t merged_ADC_P;
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS_L, &press_reg, 1, 500);
 80014be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <read_ADC_P+0x48>)
 80014c8:	21ec      	movs	r1, #236	@ 0xec
 80014ca:	480e      	ldr	r0, [pc, #56]	@ (8001504 <read_ADC_P+0x4c>)
 80014cc:	f003 fc58 	bl	8004d80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DEVICE_ADDRESS_L| 0x01, ADC_P, 3, 500);
 80014d0:	463a      	mov	r2, r7
 80014d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2303      	movs	r3, #3
 80014da:	21ed      	movs	r1, #237	@ 0xed
 80014dc:	4809      	ldr	r0, [pc, #36]	@ (8001504 <read_ADC_P+0x4c>)
 80014de:	f003 fd67 	bl	8004fb0 <HAL_I2C_Master_Receive>
	//merged_ADC_T =(((int32_t)ADC_T[0])<<12)| (((int32_t)ADC_T[1])<<4)|(((int32_t)ADC_T[2])>>4);
	merged_ADC_P =(((int32_t)ADC_P[0])<<12)| (((int32_t)ADC_P[1])<<4)|(((int32_t)ADC_P[2])>>4);
 80014e2:	783b      	ldrb	r3, [r7, #0]
 80014e4:	031a      	lsls	r2, r3, #12
 80014e6:	787b      	ldrb	r3, [r7, #1]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4313      	orrs	r3, r2
 80014ec:	78ba      	ldrb	r2, [r7, #2]
 80014ee:	0912      	lsrs	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4313      	orrs	r3, r2
 80014f4:	607b      	str	r3, [r7, #4]
	//merged_ADC_T =(((int32_t)ADC_T[0])<<12)| (((int32_t)ADC_T[1])<<4)|(int32_t)ADC_T[2];
	return merged_ADC_P;
 80014f6:	687b      	ldr	r3, [r7, #4]


}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000009 	.word	0x20000009
 8001504:	200002e8 	.word	0x200002e8

08001508 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001510:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001528:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001530:	e000      	b.n	8001534 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001532:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001534:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f9      	beq.n	8001532 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800153e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001566:	f023 0218 	bic.w	r2, r3, #24
 800156a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d8:	68fb      	ldr	r3, [r7, #12]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_write>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int _write(int file, char *ptr, int len)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++){
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e009      	b.n	8001610 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff7f 	bl	8001508 <ITM_SendChar>
  for(i=0 ; i<len ; i++){
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbf1      	blt.n	80015fc <_write+0x16>
  }
  return len;
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f001 fe2b 	bl	8003284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f000 f8eb 	bl	8001808 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001632:	f000 f95f 	bl	80018f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001636:	f000 fbb9 	bl	8001dac <MX_RF_Init>
  MX_GPIO_Init();
 800163a:	f000 fde5 	bl	8002208 <MX_GPIO_Init>
  MX_DMA_Init();
 800163e:	f000 fdc9 	bl	80021d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001642:	f000 f98b 	bl	800195c <MX_ADC1_Init>
  MX_CRC_Init();
 8001646:	f000 f9ed 	bl	8001a24 <MX_CRC_Init>
  MX_I2C1_Init();
 800164a:	f000 fa0d 	bl	8001a68 <MX_I2C1_Init>
  MX_I2C3_SMBUS_Init();
 800164e:	f000 fa4b 	bl	8001ae8 <MX_I2C3_SMBUS_Init>
  //MX_IWDG_Init();
  MX_LPTIM1_Init();
 8001652:	f000 fa83 	bl	8001b5c <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 8001656:	f000 faad 	bl	8001bb4 <MX_LPTIM2_Init>
  MX_LPUART1_UART_Init();
 800165a:	f000 fadf 	bl	8001c1c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800165e:	f000 fb2b 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8001662:	f000 fb7d 	bl	8001d60 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001666:	f000 fba9 	bl	8001dbc <MX_RTC_Init>
  MX_SPI1_Init();
 800166a:	f000 fc39 	bl	8001ee0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800166e:	f000 fc75 	bl	8001f5c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001672:	f000 fcab 	bl	8001fcc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001676:	f000 fcff 	bl	8002078 <MX_TIM2_Init>
  MX_TIM17_Init();
 800167a:	f000 fd5d 	bl	8002138 <MX_TIM17_Init>
  MX_USB_PCD_Init();
 800167e:	f000 fd81 	bl	8002184 <MX_USB_PCD_Init>
  //MX_WWDG_Init();
  /* USER CODE BEGIN 2 */
  // Resetting BMP 280
    uint8_t datatowrite = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	71bb      	strb	r3, [r7, #6]
    uint8_t datacheck = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	717b      	strb	r3, [r7, #5]
    datatowrite = 0xB6;
 800168a:	23b6      	movs	r3, #182	@ 0xb6
 800168c:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS_L, resetRegister, I2C_MEMADD_SIZE_8BIT, &datatowrite, 1, 1000);
 800168e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2301      	movs	r3, #1
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	1dbb      	adds	r3, r7, #6
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	22e0      	movs	r2, #224	@ 0xe0
 80016a0:	21ec      	movs	r1, #236	@ 0xec
 80016a2:	484d      	ldr	r0, [pc, #308]	@ (80017d8 <main+0x1b4>)
 80016a4:	f003 fd7a 	bl	800519c <HAL_I2C_Mem_Write>
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <main+0xa0>
      {
    	 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b8:	4848      	ldr	r0, [pc, #288]	@ (80017dc <main+0x1b8>)
 80016ba:	f003 fa89 	bl	8004bd0 <HAL_GPIO_WritePin>
    	 printf("Reset Successfully!");
 80016be:	4848      	ldr	r0, [pc, #288]	@ (80017e0 <main+0x1bc>)
 80016c0:	f00c fbfc 	bl	800debc <iprintf>

      }
    // Turns on an external LED when the BMP is ready for communication
    ret = HAL_I2C_IsDeviceReady(&hi2c1,((Device_Address)<<1)+0 ,1,500 );
 80016c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016c8:	2201      	movs	r2, #1
 80016ca:	21ec      	movs	r1, #236	@ 0xec
 80016cc:	4842      	ldr	r0, [pc, #264]	@ (80017d8 <main+0x1b4>)
 80016ce:	f003 ff93 	bl	80055f8 <HAL_I2C_IsDeviceReady>
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d108      	bne.n	80016ee <main+0xca>
    {
  	 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e2:	483e      	ldr	r0, [pc, #248]	@ (80017dc <main+0x1b8>)
 80016e4:	f003 fa74 	bl	8004bd0 <HAL_GPIO_WritePin>
  	 printf("The device is ready for communication");
 80016e8:	483e      	ldr	r0, [pc, #248]	@ (80017e4 <main+0x1c0>)
 80016ea:	f00c fbe7 	bl	800debc <iprintf>
    // Bit 1 and 0 are used for configurating the power mode
    // Setting Register 0xF4 to 0x00000011
    // ( Skipped for both temp and pressure oversampling and normal for power mode)
    // Notice: power mode is usually set to sleep mode when powered on

    uint8_t control_configuration = 0xB3;
 80016ee:	23b3      	movs	r3, #179	@ 0xb3
 80016f0:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c1, ((Device_Address)<<1)+0,Control_Config_Number, I2C_MEMADD_SIZE_8BIT, &control_configuration, 1, 500);
 80016f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2301      	movs	r3, #1
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	22f4      	movs	r2, #244	@ 0xf4
 8001704:	21ec      	movs	r1, #236	@ 0xec
 8001706:	4834      	ldr	r0, [pc, #208]	@ (80017d8 <main+0x1b4>)
 8001708:	f003 fd48 	bl	800519c <HAL_I2C_Mem_Write>
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <main+0xfe>
      {
    	 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171c:	482f      	ldr	r0, [pc, #188]	@ (80017dc <main+0x1b8>)
 800171e:	f003 fa57 	bl	8004bd0 <HAL_GPIO_WritePin>

      }
    HAL_I2C_Mem_Read(&hi2c1, ((Device_Address)<<1)+1, Control_Config_Number, I2C_MEMADD_SIZE_8BIT, &datacheck, 1, 1000);
 8001722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	2301      	movs	r3, #1
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	1d7b      	adds	r3, r7, #5
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	22f4      	movs	r2, #244	@ 0xf4
 8001734:	21ed      	movs	r1, #237	@ 0xed
 8001736:	4828      	ldr	r0, [pc, #160]	@ (80017d8 <main+0x1b4>)
 8001738:	f003 fe44 	bl	80053c4 <HAL_I2C_Mem_Read>
    if (datacheck!=control_configuration )
 800173c:	797a      	ldrb	r2, [r7, #5]
 800173e:	793b      	ldrb	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	d002      	beq.n	800174a <main+0x126>
    {
  	  printf("control config not set properly");
 8001744:	4828      	ldr	r0, [pc, #160]	@ (80017e8 <main+0x1c4>)
 8001746:	f00c fbb9 	bl	800debc <iprintf>
    }

    uint8_t config_Setting = 0xA8;
 800174a:	23a8      	movs	r3, #168	@ 0xa8
 800174c:	70fb      	strb	r3, [r7, #3]
    ret = HAL_I2C_Mem_Write(&hi2c1,((Device_Address)<<1)+0,Configuration_Register_Number, I2C_MEMADD_SIZE_8BIT, &config_Setting, 1, 500);
 800174e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	1cfb      	adds	r3, r7, #3
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	22f5      	movs	r2, #245	@ 0xf5
 8001760:	21ec      	movs	r1, #236	@ 0xec
 8001762:	481d      	ldr	r0, [pc, #116]	@ (80017d8 <main+0x1b4>)
 8001764:	f003 fd1a 	bl	800519c <HAL_I2C_Mem_Write>
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <main+0x15a>
        {
      	 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001778:	4818      	ldr	r0, [pc, #96]	@ (80017dc <main+0x1b8>)
 800177a:	f003 fa29 	bl	8004bd0 <HAL_GPIO_WritePin>

        }
    HAL_I2C_Mem_Read(&hi2c1, ((Device_Address)<<1)+1, Configuration_Register_Number, I2C_MEMADD_SIZE_8BIT, &datacheck, 1, 1000);
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	1d7b      	adds	r3, r7, #5
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	22f5      	movs	r2, #245	@ 0xf5
 8001790:	21ed      	movs	r1, #237	@ 0xed
 8001792:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <main+0x1b4>)
 8001794:	f003 fe16 	bl	80053c4 <HAL_I2C_Mem_Read>
    if (datacheck!=config_Setting)
 8001798:	797a      	ldrb	r2, [r7, #5]
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	429a      	cmp	r2, r3
 800179e:	d002      	beq.n	80017a6 <main+0x182>
    {
  	  printf("Config register not set properly");
 80017a0:	4812      	ldr	r0, [pc, #72]	@ (80017ec <main+0x1c8>)
 80017a2:	f00c fb8b 	bl	800debc <iprintf>
    }

    read_calibration_data();
 80017a6:	f7ff fd91 	bl	80012cc <read_calibration_data>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017aa:	f009 f8bb 	bl	800a924 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of de_Pressure */
  de_PressureHandle = osThreadNew(pressure_init, NULL, &de_Pressure_attributes);
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <main+0x1cc>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <main+0x1d0>)
 80017b4:	f009 f900 	bl	800a9b8 <osThreadNew>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <main+0x1d4>)
 80017bc:	6013      	str	r3, [r2, #0]

  /* creation of temperature */
  temperatureHandle = osThreadNew(temperature_init, NULL, &temperature_attributes);
 80017be:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <main+0x1d8>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	480f      	ldr	r0, [pc, #60]	@ (8001800 <main+0x1dc>)
 80017c4:	f009 f8f8 	bl	800a9b8 <osThreadNew>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <main+0x1e0>)
 80017cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017ce:	f009 f8cd 	bl	800a96c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d2:	bf00      	nop
 80017d4:	e7fd      	b.n	80017d2 <main+0x1ae>
 80017d6:	bf00      	nop
 80017d8:	200002e8 	.word	0x200002e8
 80017dc:	48000c00 	.word	0x48000c00
 80017e0:	0800fe88 	.word	0x0800fe88
 80017e4:	0800fe9c 	.word	0x0800fe9c
 80017e8:	0800fec4 	.word	0x0800fec4
 80017ec:	0800fee4 	.word	0x0800fee4
 80017f0:	0800ffa0 	.word	0x0800ffa0
 80017f4:	08002401 	.word	0x08002401
 80017f8:	20000a74 	.word	0x20000a74
 80017fc:	0800ffc4 	.word	0x0800ffc4
 8001800:	08002445 	.word	0x08002445
 8001804:	20000a78 	.word	0x20000a78

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09a      	sub	sp, #104	@ 0x68
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2248      	movs	r2, #72	@ 0x48
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f00c fb62 	bl	800dee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800182e:	f004 fd4f 	bl	80062d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fe8f 	bl	8001556 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <SystemClock_Config+0xe8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001840:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <SystemClock_Config+0xe8>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <SystemClock_Config+0xe8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001854:	232f      	movs	r3, #47	@ 0x2f
 8001856:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800185e:	2301      	movs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001868:	2301      	movs	r3, #1
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001870:	2300      	movs	r3, #0
 8001872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001874:	2360      	movs	r3, #96	@ 0x60
 8001876:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001878:	2305      	movs	r3, #5
 800187a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	2302      	movs	r3, #2
 800187e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001880:	2301      	movs	r3, #1
 8001882:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001888:	2320      	movs	r3, #32
 800188a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800188c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001890:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001892:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001896:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800189c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	4618      	mov	r0, r3
 80018a4:	f005 f970 	bl	8006b88 <HAL_RCC_OscConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018ae:	f000 fdf7 	bl	80024a0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80018b2:	236f      	movs	r3, #111	@ 0x6f
 80018b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b6:	2303      	movs	r3, #3
 80018b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2103      	movs	r1, #3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 fccc 	bl	8007270 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80018de:	f000 fddf 	bl	80024a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018e2:	f006 fab9 	bl	8007e58 <HAL_RCCEx_EnableMSIPLLMode>
}
 80018e6:	bf00      	nop
 80018e8:	3768      	adds	r7, #104	@ 0x68
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	58000400 	.word	0x58000400

080018f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	@ 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2250      	movs	r2, #80	@ 0x50
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00c faed 	bl	800dee0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001906:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 800190a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800190c:	2318      	movs	r3, #24
 800190e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001916:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800191a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800191c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001920:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001922:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8001926:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001928:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800192c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800192e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001934:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001938:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800193a:	2300      	movs	r3, #0
 800193c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800193e:	2310      	movs	r3, #16
 8001940:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001942:	463b      	mov	r3, r7
 8001944:	4618      	mov	r0, r3
 8001946:	f006 f911 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8001950:	f000 fda6 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001954:	bf00      	nop
 8001956:	3750      	adds	r7, #80	@ 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001974:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <MX_ADC1_Init+0xc0>)
 8001976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 800197a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800197e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001980:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001986:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001994:	2204      	movs	r2, #4
 8001996:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001998:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 800199a:	2200      	movs	r2, #0
 800199c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d4:	4810      	ldr	r0, [pc, #64]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019d6:	f001 fe2d 	bl	8003634 <HAL_ADC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80019e0:	f000 fd5e 	bl	80024a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_ADC1_Init+0xc4>)
 80019e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e8:	2306      	movs	r3, #6
 80019ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019f0:	237f      	movs	r3, #127	@ 0x7f
 80019f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019f4:	2304      	movs	r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001a02:	f001 ff63 	bl	80038cc <HAL_ADC_ConfigChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001a0c:	f000 fd48 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000200 	.word	0x20000200
 8001a1c:	50040000 	.word	0x50040000
 8001a20:	08600004 	.word	0x08600004

08001a24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <MX_CRC_Init+0x3c>)
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <MX_CRC_Init+0x40>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_CRC_Init+0x3c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <MX_CRC_Init+0x3c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_CRC_Init+0x3c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <MX_CRC_Init+0x3c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_CRC_Init+0x3c>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_CRC_Init+0x3c>)
 8001a4e:	f002 fbe3 	bl	8004218 <HAL_CRC_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a58:	f000 fd22 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200002c4 	.word	0x200002c4
 8001a64:	40023000 	.word	0x40023000

08001a68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <MX_I2C1_Init+0x78>)
 8001a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <MX_I2C1_Init+0x7c>)
 8001a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa2:	480e      	ldr	r0, [pc, #56]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001aa4:	f003 f8d0 	bl	8004c48 <HAL_I2C_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aae:	f000 fcf7 	bl	80024a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4809      	ldr	r0, [pc, #36]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001ab6:	f004 f9d9 	bl	8005e6c <HAL_I2CEx_ConfigAnalogFilter>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ac0:	f000 fcee 	bl	80024a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001ac8:	f004 fa1b 	bl	8005f02 <HAL_I2CEx_ConfigDigitalFilter>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ad2:	f000 fce5 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002e8 	.word	0x200002e8
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	10707dbc 	.word	0x10707dbc

08001ae8 <MX_I2C3_SMBUS_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_SMBUS_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hsmbus3.Instance = I2C3;
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001aee:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <MX_I2C3_SMBUS_Init+0x6c>)
 8001af0:	601a      	str	r2, [r3, #0]
  hsmbus3.Init.Timing = 0x10B17DB5;
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001af4:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <MX_I2C3_SMBUS_Init+0x70>)
 8001af6:	605a      	str	r2, [r3, #4]
  hsmbus3.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hsmbus3.Init.OwnAddress1 = 2;
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	60da      	str	r2, [r3, #12]
  hsmbus3.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	611a      	str	r2, [r3, #16]
  hsmbus3.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
  hsmbus3.Init.OwnAddress2 = 0;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  hsmbus3.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
  hsmbus3.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
  hsmbus3.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus3.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus3.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus3.Init.SMBusTimeout = 0x0000830D;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b36:	f248 320d 	movw	r2, #33549	@ 0x830d
 8001b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus3) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <MX_I2C3_SMBUS_Init+0x68>)
 8001b3e:	f006 fecd 	bl	80088dc <HAL_SMBUS_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_I2C3_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001b48:	f000 fcaa 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000033c 	.word	0x2000033c
 8001b54:	40005c00 	.word	0x40005c00
 8001b58:	10b17db5 	.word	0x10b17db5

08001b5c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b62:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <MX_LPTIM1_Init+0x54>)
 8001b64:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b78:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <MX_LPTIM1_Init+0x50>)
 8001b9a:	f004 f9ff 	bl	8005f9c <HAL_LPTIM_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001ba4:	f000 fc7c 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000038c 	.word	0x2000038c
 8001bb0:	40007c00 	.word	0x40007c00

08001bb4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bba:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <MX_LPTIM2_Init+0x64>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_FALLING;
 8001bca:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bdc:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP2;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_LPTIM2_Init+0x60>)
 8001c00:	f004 f9cc 	bl	8005f9c <HAL_LPTIM_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8001c0a:	f000 fc49 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200003c4 	.word	0x200003c4
 8001c18:	40009400 	.word	0x40009400

08001c1c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c22:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <MX_LPUART1_UART_Init+0x94>)
 8001c24:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c28:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <MX_LPUART1_UART_Init+0x98>)
 8001c2a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c40:	220c      	movs	r2, #12
 8001c42:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c62:	4812      	ldr	r0, [pc, #72]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c64:	f007 fc30 	bl	80094c8 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001c6e:	f000 fc17 	bl	80024a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	480d      	ldr	r0, [pc, #52]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c76:	f008 fd0c 	bl	800a692 <HAL_UARTEx_SetTxFifoThreshold>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001c80:	f000 fc0e 	bl	80024a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c84:	2100      	movs	r1, #0
 8001c86:	4809      	ldr	r0, [pc, #36]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c88:	f008 fd41 	bl	800a70e <HAL_UARTEx_SetRxFifoThreshold>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001c92:	f000 fc05 	bl	80024a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_LPUART1_UART_Init+0x90>)
 8001c98:	f008 fcc2 	bl	800a620 <HAL_UARTEx_DisableFifoMode>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001ca2:	f000 fbfd 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200003fc 	.word	0x200003fc
 8001cb0:	40008000 	.word	0x40008000
 8001cb4:	00033324 	.word	0x00033324

08001cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cbe:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <MX_USART1_UART_Init+0xa4>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b23      	ldr	r3, [pc, #140]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001cfc:	2240      	movs	r2, #64	@ 0x40
 8001cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001d02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001d0e:	4812      	ldr	r0, [pc, #72]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001d10:	f007 fc2a 	bl	8009568 <HAL_HalfDuplex_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8001d1a:	f000 fbc1 	bl	80024a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	480d      	ldr	r0, [pc, #52]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001d22:	f008 fcb6 	bl	800a692 <HAL_UARTEx_SetTxFifoThreshold>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8001d2c:	f000 fbb8 	bl	80024a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d30:	2100      	movs	r1, #0
 8001d32:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001d34:	f008 fceb 	bl	800a70e <HAL_UARTEx_SetRxFifoThreshold>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001d3e:	f000 fbaf 	bl	80024a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <MX_USART1_UART_Init+0xa0>)
 8001d44:	f008 fc6c 	bl	800a620 <HAL_UARTEx_DisableFifoMode>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8001d4e:	f000 fba7 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000490 	.word	0x20000490
 8001d5c:	40013800 	.word	0x40013800

08001d60 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d66:	4a10      	ldr	r2, [pc, #64]	@ (8001da8 <MX_QUADSPI_Init+0x48>)
 8001d68:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d6c:	22ff      	movs	r2, #255	@ 0xff
 8001d6e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_QUADSPI_Init+0x44>)
 8001d90:	f004 fabc 	bl	800630c <HAL_QSPI_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001d9a:	f000 fb81 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000584 	.word	0x20000584
 8001da8:	a0001000 	.word	0xa0001000

08001dac <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b090      	sub	sp, #64	@ 0x40
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2228      	movs	r2, #40	@ 0x28
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00c f87f 	bl	800dee0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001de4:	4a3d      	ldr	r2, [pc, #244]	@ (8001edc <MX_RTC_Init+0x120>)
 8001de6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001df0:	227f      	movs	r2, #127	@ 0x7f
 8001df2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001df4:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001df6:	22ff      	movs	r2, #255	@ 0xff
 8001df8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dfa:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e00:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e06:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e12:	4831      	ldr	r0, [pc, #196]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001e14:	f006 f938 	bl	8008088 <HAL_RTC_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001e1e:	f000 fb3f 	bl	80024a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.SubSeconds = 0x0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	@ 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e44:	2201      	movs	r2, #1
 8001e46:	4619      	mov	r1, r3
 8001e48:	4823      	ldr	r0, [pc, #140]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001e4a:	f006 f9cd 	bl	80081e8 <HAL_RTC_SetTime>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8001e54:	f000 fb24 	bl	80024a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e74:	2201      	movs	r2, #1
 8001e76:	4619      	mov	r1, r3
 8001e78:	4817      	ldr	r0, [pc, #92]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001e7a:	f006 fa79 	bl	8008370 <HAL_RTC_SetDate>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8001e84:	f000 fb0c 	bl	80024a0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x20;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001eb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	@ (8001ed8 <MX_RTC_Init+0x11c>)
 8001ec0:	f006 fb04 	bl	80084cc <HAL_RTC_SetAlarm_IT>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001eca:	f000 fae9 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	3740      	adds	r7, #64	@ 0x40
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200005c8 	.word	0x200005c8
 8001edc:	40002800 	.word	0x40002800

08001ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <MX_SPI1_Init+0x78>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001eec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_10BIT;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001efa:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8001efe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f06:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f2e:	2207      	movs	r2, #7
 8001f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_SPI1_Init+0x74>)
 8001f40:	f006 fd84 	bl	8008a4c <HAL_SPI_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f4a:	f000 faa9 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200005ec 	.word	0x200005ec
 8001f58:	40013000 	.word	0x40013000

08001f5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f62:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <MX_SPI2_Init+0x6c>)
 8001f64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001f66:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f74:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001f78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fb0:	4804      	ldr	r0, [pc, #16]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001fb2:	f006 fd4b 	bl	8008a4c <HAL_SPI_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001fbc:	f000 fa70 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000650 	.word	0x20000650
 8001fc8:	40003800 	.word	0x40003800

08001fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fec:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <MX_TIM1_Init+0xa8>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8002000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002004:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800200c:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <MX_TIM1_Init+0xa4>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002018:	4815      	ldr	r0, [pc, #84]	@ (8002070 <MX_TIM1_Init+0xa4>)
 800201a:	f006 fdba 	bl	8008b92 <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002024:	f000 fa3c 	bl	80024a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002028:	2304      	movs	r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800202c:	2320      	movs	r3, #32
 800202e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	4619      	mov	r1, r3
 8002036:	480e      	ldr	r0, [pc, #56]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8002038:	f006 ff57 	bl	8008eea <HAL_TIM_SlaveConfigSynchro>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002042:	f000 fa2d 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002052:	463b      	mov	r3, r7
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	@ (8002070 <MX_TIM1_Init+0xa4>)
 8002058:	f007 f936 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002062:	f000 fa1d 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200006b4 	.word	0x200006b4
 8002074:	40012c00 	.word	0x40012c00

08002078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208e:	463b      	mov	r3, r7
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002098:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <MX_TIM2_Init+0xbc>)
 800209a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800209e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <MX_TIM2_Init+0xbc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <MX_TIM2_Init+0xbc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020ac:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <MX_TIM2_Init+0xbc>)
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <MX_TIM2_Init+0xbc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <MX_TIM2_Init+0xbc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c0:	481c      	ldr	r0, [pc, #112]	@ (8002134 <MX_TIM2_Init+0xbc>)
 80020c2:	f006 fd66 	bl	8008b92 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80020cc:	f000 f9e8 	bl	80024a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80020d0:	2306      	movs	r3, #6
 80020d2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80020d4:	2370      	movs	r3, #112	@ 0x70
 80020d6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	4812      	ldr	r0, [pc, #72]	@ (8002134 <MX_TIM2_Init+0xbc>)
 80020ec:	f006 fefd 	bl	8008eea <HAL_TIM_SlaveConfigSynchro>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80020f6:	f000 f9d3 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002102:	463b      	mov	r3, r7
 8002104:	4619      	mov	r1, r3
 8002106:	480b      	ldr	r0, [pc, #44]	@ (8002134 <MX_TIM2_Init+0xbc>)
 8002108:	f007 f8de 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002112:	f000 f9c5 	bl	80024a0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM_TIM2_ETR_COMP1) != HAL_OK)
 8002116:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800211a:	4806      	ldr	r0, [pc, #24]	@ (8002134 <MX_TIM2_Init+0xbc>)
 800211c:	f007 f934 	bl	8009388 <HAL_TIMEx_RemapConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002126:	f000 f9bb 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000700 	.word	0x20000700

08002138 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <MX_TIM17_Init+0x44>)
 800213e:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <MX_TIM17_Init+0x48>)
 8002140:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_TIM17_Init+0x44>)
 8002144:	2210      	movs	r2, #16
 8002146:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_TIM17_Init+0x44>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <MX_TIM17_Init+0x44>)
 8002150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002154:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_TIM17_Init+0x44>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800215c:	4b07      	ldr	r3, [pc, #28]	@ (800217c <MX_TIM17_Init+0x44>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_TIM17_Init+0x44>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	@ (800217c <MX_TIM17_Init+0x44>)
 800216a:	f006 fd12 	bl	8008b92 <HAL_TIM_Base_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002174:	f000 f994 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000074c 	.word	0x2000074c
 8002180:	40014800 	.word	0x40014800

08002184 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002188:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 800218a:	4a11      	ldr	r2, [pc, #68]	@ (80021d0 <MX_USB_PCD_Init+0x4c>)
 800218c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 8002190:	2208      	movs	r2, #8
 8002192:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002194:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 8002196:	2202      	movs	r2, #2
 8002198:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 800219c:	2202      	movs	r2, #2
 800219e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80021ac:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	@ (80021cc <MX_USB_PCD_Init+0x48>)
 80021ba:	f003 ff91 	bl	80060e0 <HAL_PCD_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80021c4:	f000 f96c 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000798 	.word	0x20000798
 80021d0:	40006800 	.word	0x40006800

080021d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021d8:	2004      	movs	r0, #4
 80021da:	f7ff f9d2 	bl	8001582 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff f9cf 	bl	8001582 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2105      	movs	r1, #5
 80021e8:	200b      	movs	r0, #11
 80021ea:	f001 ffed 	bl	80041c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021ee:	200b      	movs	r0, #11
 80021f0:	f002 f804 	bl	80041fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2105      	movs	r1, #5
 80021f8:	200c      	movs	r0, #12
 80021fa:	f001 ffe5 	bl	80041c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021fe:	200c      	movs	r0, #12
 8002200:	f001 fffc 	bl	80041fc <HAL_NVIC_EnableIRQ>

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff f9c9 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	2004      	movs	r0, #4
 8002224:	f7ff f9c6 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002228:	2002      	movs	r0, #2
 800222a:	f7ff f9c3 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800222e:	2008      	movs	r0, #8
 8002230:	f7ff f9c0 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002234:	2010      	movs	r0, #16
 8002236:	f7ff f9bd 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223a:	2080      	movs	r0, #128	@ 0x80
 800223c:	f7ff f9ba 	bl	80015b4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DISP_Pin|GPIO_SELECT2_Pin, GPIO_PIN_RESET);
 8002240:	2200      	movs	r2, #0
 8002242:	2103      	movs	r1, #3
 8002244:	4869      	ldr	r0, [pc, #420]	@ (80023ec <MX_GPIO_Init+0x1e4>)
 8002246:	f002 fcc3 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_C_DISP_Pin|RST_DISP_Pin, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002250:	4867      	ldr	r0, [pc, #412]	@ (80023f0 <MX_GPIO_Init+0x1e8>)
 8002252:	f002 fcbd 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800225c:	4865      	ldr	r0, [pc, #404]	@ (80023f4 <MX_GPIO_Init+0x1ec>)
 800225e:	f002 fcb7 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SELECT1_GPIO_Port, GPIO_SELECT1_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	4864      	ldr	r0, [pc, #400]	@ (80023f8 <MX_GPIO_Init+0x1f0>)
 8002268:	f002 fcb2 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800226c:	f640 4304 	movw	r3, #3076	@ 0xc04
 8002270:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4619      	mov	r1, r3
 800227e:	485c      	ldr	r0, [pc, #368]	@ (80023f0 <MX_GPIO_Init+0x1e8>)
 8002280:	f002 fb36 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G4_IO1_Pin TSC_G4_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G4_IO1_Pin|TSC_G4_IO2_Pin;
 8002284:	23c0      	movs	r3, #192	@ 0xc0
 8002286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002294:	2309      	movs	r3, #9
 8002296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4854      	ldr	r0, [pc, #336]	@ (80023f0 <MX_GPIO_Init+0x1e8>)
 800229e:	f002 fb27 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DRDY_Pin;
 80022a2:	2312      	movs	r3, #18
 80022a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4851      	ldr	r0, [pc, #324]	@ (80023f8 <MX_GPIO_Init+0x1f0>)
 80022b4:	f002 fb1c 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022b8:	2304      	movs	r3, #4
 80022ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	484c      	ldr	r0, [pc, #304]	@ (80023fc <MX_GPIO_Init+0x1f4>)
 80022ca:	f002 fb11 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_CK2_Pin SAI1_D2_Pin */
  GPIO_InitStruct.Pin = SAI1_CK2_Pin|SAI1_D2_Pin;
 80022ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 80022e0:	2303      	movs	r3, #3
 80022e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ec:	f002 fb00 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DISP_Pin GPIO_SELECT2_Pin */
  GPIO_InitStruct.Pin = CS_DISP_Pin|GPIO_SELECT2_Pin;
 80022f0:	2303      	movs	r3, #3
 80022f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4839      	ldr	r0, [pc, #228]	@ (80023ec <MX_GPIO_Init+0x1e4>)
 8002306:	f002 faf3 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_4;
 800230a:	f243 0310 	movw	r3, #12304	@ 0x3010
 800230e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4835      	ldr	r0, [pc, #212]	@ (80023f4 <MX_GPIO_Init+0x1ec>)
 800231e:	f002 fae7 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8002322:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002326:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002328:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800232c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	4619      	mov	r1, r3
 8002336:	482f      	ldr	r0, [pc, #188]	@ (80023f4 <MX_GPIO_Init+0x1ec>)
 8002338:	f002 fada 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_DISP_Pin RST_DISP_Pin */
  GPIO_InitStruct.Pin = D_C_DISP_Pin|RST_DISP_Pin;
 800233c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4827      	ldr	r0, [pc, #156]	@ (80023f0 <MX_GPIO_Init+0x1e8>)
 8002354:	f002 facc 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002358:	2308      	movs	r3, #8
 800235a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4823      	ldr	r0, [pc, #140]	@ (80023f8 <MX_GPIO_Init+0x1f0>)
 800236c:	f002 fac0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002374:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4619      	mov	r1, r3
 8002386:	481b      	ldr	r0, [pc, #108]	@ (80023f4 <MX_GPIO_Init+0x1ec>)
 8002388:	f002 fab2 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G6_IO1_Pin TSC_G6_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G6_IO1_Pin|TSC_G6_IO2_Pin;
 800238c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002390:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800239e:	2309      	movs	r3, #9
 80023a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4813      	ldr	r0, [pc, #76]	@ (80023f4 <MX_GPIO_Init+0x1ec>)
 80023a8:	f002 faa2 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SELECT1_Pin */
  GPIO_InitStruct.Pin = GPIO_SELECT1_Pin;
 80023ac:	2304      	movs	r3, #4
 80023ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_SELECT1_GPIO_Port, &GPIO_InitStruct);
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <MX_GPIO_Init+0x1f0>)
 80023c2:	f002 fa95 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023c6:	2301      	movs	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80023d6:	230e      	movs	r3, #14
 80023d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4806      	ldr	r0, [pc, #24]	@ (80023f8 <MX_GPIO_Init+0x1f0>)
 80023e0:	f002 fa86 	bl	80048f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	48001c00 	.word	0x48001c00
 80023f0:	48000800 	.word	0x48000800
 80023f4:	48000c00 	.word	0x48000c00
 80023f8:	48001000 	.word	0x48001000
 80023fc:	48000400 	.word	0x48000400

08002400 <pressure_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pressure_init */
void pressure_init(void *argument)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
   */
  /* Infinite loop */
  for(;;)
  {

  int32_t raw_ADC_Data_Pressure = read_ADC_P();
 8002408:	f7ff f856 	bl	80014b8 <read_ADC_P>
 800240c:	60f8      	str	r0, [r7, #12]
  float final_pressure_value = compensate_pressure_v2(raw_ADC_Data_Pressure);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7fe fdb2 	bl	8000f78 <compensate_pressure_v2>
 8002414:	ec53 2b10 	vmov	r2, r3, d0
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fb9c 	bl	8000b58 <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	60bb      	str	r3, [r7, #8]
  printf("The current pressure is %.2f Pa \n ", final_pressure_value );
 8002424:	68b8      	ldr	r0, [r7, #8]
 8002426:	f7fe f867 	bl	80004f8 <__aeabi_f2d>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4804      	ldr	r0, [pc, #16]	@ (8002440 <pressure_init+0x40>)
 8002430:	f00b fd44 	bl	800debc <iprintf>
  //int8_t theSize  = uxTaskGetStackHighWaterMark(NULL);
  //printf("High water mark (words) %.d\n",theSize);
	//printf("task pressure\n");
    osDelay(5000);
 8002434:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002438:	f008 fb50 	bl	800aadc <osDelay>
  {
 800243c:	bf00      	nop
 800243e:	e7e3      	b.n	8002408 <pressure_init+0x8>
 8002440:	0800ff08 	.word	0x0800ff08

08002444 <temperature_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temperature_init */
void temperature_init(void *argument)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
   * Notice 256*4 Byte was allocated to this task
   */
  for(;;)
  {

  int32_t raw_ADC_Data_Temp = read_ADC_T();
 800244c:	f7ff f80c 	bl	8001468 <read_ADC_T>
 8002450:	60f8      	str	r0, [r7, #12]
  float final_temperature_value = compensate_temperature(raw_ADC_Data_Temp);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7fe fd48 	bl	8000ee8 <compensate_temperature>
 8002458:	ed87 0a02 	vstr	s0, [r7, #8]
  printf("The current temperature is %.2f deg Celsius\n", final_temperature_value );
 800245c:	68b8      	ldr	r0, [r7, #8]
 800245e:	f7fe f84b 	bl	80004f8 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4804      	ldr	r0, [pc, #16]	@ (8002478 <temperature_init+0x34>)
 8002468:	f00b fd28 	bl	800debc <iprintf>
  //int8_t theSize  = uxTaskGetStackHighWaterMark(NULL);
  //printf("High water mark (words) %.d\n",theSize);
	//printf("task temp\n");
    osDelay(1000);
 800246c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002470:	f008 fb34 	bl	800aadc <osDelay>
  {
 8002474:	bf00      	nop
 8002476:	e7e9      	b.n	800244c <temperature_init+0x8>
 8002478:	0800ff2c 	.word	0x0800ff2c

0800247c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a04      	ldr	r2, [pc, #16]	@ (800249c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800248e:	f000 ff19 	bl	80032c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40014400 	.word	0x40014400

080024a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a4:	b672      	cpsid	i
}
 80024a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <Error_Handler+0x8>

080024ac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_AHB1_GRP1_EnableClock>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_AHB2_GRP1_EnableClock>:
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800250e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002524:	68fb      	ldr	r3, [r7, #12]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4313      	orrs	r3, r2
 8002548:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002570:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4313      	orrs	r3, r2
 800257a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002588:	68fb      	ldr	r3, [r7, #12]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4313      	orrs	r3, r2
 80025de:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80025fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002602:	f7ff ff96 	bl	8002532 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	210f      	movs	r1, #15
 800260a:	f06f 0001 	mvn.w	r0, #1
 800260e:	f001 fddb 	bl	80041c8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2105      	movs	r1, #5
 8002616:	202e      	movs	r0, #46	@ 0x2e
 8002618:	f001 fdd6 	bl	80041c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800261c:	202e      	movs	r0, #46	@ 0x2e
 800261e:	f001 fded 	bl	80041fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2a      	ldr	r2, [pc, #168]	@ (80026f0 <HAL_ADC_MspInit+0xc8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d14d      	bne.n	80026e6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800264a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800264e:	f7ff ff57 	bl	8002500 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff ff54 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	2004      	movs	r0, #4
 800265a:	f7ff ff51 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    PC1     ------> ADC1_IN2
    PC5     ------> ADC1_IN14
    PC4     ------> ADC1_IN13
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5;
 800265e:	2325      	movs	r3, #37	@ 0x25
 8002660:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002662:	2303      	movs	r3, #3
 8002664:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	4619      	mov	r1, r3
 8002670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002674:	f002 f93c 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8002678:	233a      	movs	r3, #58	@ 0x3a
 800267a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267c:	2303      	movs	r3, #3
 800267e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	4619      	mov	r1, r3
 800268a:	481a      	ldr	r0, [pc, #104]	@ (80026f4 <HAL_ADC_MspInit+0xcc>)
 800268c:	f002 f930 	bl	80048f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 8002692:	4a1a      	ldr	r2, [pc, #104]	@ (80026fc <HAL_ADC_MspInit+0xd4>)
 8002694:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002696:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 8002698:	2205      	movs	r2, #5
 800269a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026aa:	2280      	movs	r2, #128	@ 0x80
 80026ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026c0:	2220      	movs	r2, #32
 80026c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026ca:	480b      	ldr	r0, [pc, #44]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026cc:	f001 fe96 	bl	80043fc <HAL_DMA_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80026d6:	f7ff fee3 	bl	80024a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a06      	ldr	r2, [pc, #24]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80026e0:	4a05      	ldr	r2, [pc, #20]	@ (80026f8 <HAL_ADC_MspInit+0xd0>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	50040000 	.word	0x50040000
 80026f4:	48000800 	.word	0x48000800
 80026f8:	20000264 	.word	0x20000264
 80026fc:	40020008 	.word	0x40020008

08002700 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a05      	ldr	r2, [pc, #20]	@ (8002724 <HAL_CRC_MspInit+0x24>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d103      	bne.n	800271a <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002712:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002716:	f7ff feda 	bl	80024ce <LL_AHB1_GRP1_EnableClock>

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023000 	.word	0x40023000

08002728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b09c      	sub	sp, #112	@ 0x70
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	2250      	movs	r2, #80	@ 0x50
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f00b fbc9 	bl	800dee0 <memset>
  if(hi2c->Instance==I2C1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <HAL_I2C_MspInit+0xb0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d13b      	bne.n	80027d0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002758:	2304      	movs	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800275c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002762:	f107 030c 	add.w	r3, r7, #12
 8002766:	4618      	mov	r0, r3
 8002768:	f005 fa00 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002772:	f7ff fe95 	bl	80024a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	2002      	movs	r0, #2
 8002778:	f7ff fec2 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	2001      	movs	r0, #1
 800277e:	f7ff febf 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002782:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002786:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002788:	2312      	movs	r3, #18
 800278a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278c:	2301      	movs	r3, #1
 800278e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002794:	2304      	movs	r3, #4
 8002796:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800279c:	4619      	mov	r1, r3
 800279e:	480f      	ldr	r0, [pc, #60]	@ (80027dc <HAL_I2C_MspInit+0xb4>)
 80027a0:	f002 f8a6 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027aa:	2312      	movs	r3, #18
 80027ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b6:	2304      	movs	r3, #4
 80027b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027be:	4619      	mov	r1, r3
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c4:	f002 f894 	bl	80048f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80027cc:	f7ff feca 	bl	8002564 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027d0:	bf00      	nop
 80027d2:	3770      	adds	r7, #112	@ 0x70
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40005400 	.word	0x40005400
 80027dc:	48000400 	.word	0x48000400

080027e0 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b09c      	sub	sp, #112	@ 0x70
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	2250      	movs	r2, #80	@ 0x50
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f00b fb6d 	bl	800dee0 <memset>
  if(hsmbus->Instance==I2C3)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <HAL_SMBUS_MspInit+0x88>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d126      	bne.n	800285e <HAL_SMBUS_MspInit+0x7e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002810:	2308      	movs	r3, #8
 8002812:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002814:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002818:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4618      	mov	r0, r3
 8002820:	f005 f9a4 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 800282a:	f7ff fe39 	bl	80024a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	2002      	movs	r0, #2
 8002830:	f7ff fe66 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin|I2C3_SDA_Pin;
 8002834:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002838:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283a:	2312      	movs	r3, #18
 800283c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283e:	2301      	movs	r3, #1
 8002840:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002846:	2304      	movs	r3, #4
 8002848:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800284e:	4619      	mov	r1, r3
 8002850:	4806      	ldr	r0, [pc, #24]	@ (800286c <HAL_SMBUS_MspInit+0x8c>)
 8002852:	f002 f84d 	bl	80048f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002856:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800285a:	f7ff fe83 	bl	8002564 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800285e:	bf00      	nop
 8002860:	3770      	adds	r7, #112	@ 0x70
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40005c00 	.word	0x40005c00
 800286c:	48000400 	.word	0x48000400

08002870 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b096      	sub	sp, #88	@ 0x58
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	2250      	movs	r2, #80	@ 0x50
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f00b fb2d 	bl	800dee0 <memset>
  if(hlptim->Instance==LPTIM1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <HAL_LPTIM_MspInit+0x80>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d113      	bne.n	80028b8 <HAL_LPTIM_MspInit+0x48>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002890:	2310      	movs	r3, #16
 8002892:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8002894:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002898:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	4618      	mov	r0, r3
 80028a0:	f005 f964 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80028aa:	f7ff fdf9 	bl	80024a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80028ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80028b2:	f7ff fe57 	bl	8002564 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80028b6:	e016      	b.n	80028e6 <HAL_LPTIM_MspInit+0x76>
  else if(hlptim->Instance==LPTIM2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	@ (80028f4 <HAL_LPTIM_MspInit+0x84>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d111      	bne.n	80028e6 <HAL_LPTIM_MspInit+0x76>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80028c2:	2320      	movs	r3, #32
 80028c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 80028c6:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 f94b 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_LPTIM_MspInit+0x70>
      Error_Handler();
 80028dc:	f7ff fde0 	bl	80024a0 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80028e0:	2020      	movs	r0, #32
 80028e2:	f7ff fe58 	bl	8002596 <LL_APB1_GRP2_EnableClock>
}
 80028e6:	bf00      	nop
 80028e8:	3758      	adds	r7, #88	@ 0x58
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40007c00 	.word	0x40007c00
 80028f4:	40009400 	.word	0x40009400

080028f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b09c      	sub	sp, #112	@ 0x70
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2250      	movs	r2, #80	@ 0x50
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f00b fae1 	bl	800dee0 <memset>
  if(huart->Instance==LPUART1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a60      	ldr	r2, [pc, #384]	@ (8002aa4 <HAL_UART_MspInit+0x1ac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d17e      	bne.n	8002a26 <HAL_UART_MspInit+0x12e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002928:	2302      	movs	r3, #2
 800292a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800292c:	2300      	movs	r3, #0
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4618      	mov	r0, r3
 8002936:	f005 f919 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002940:	f7ff fdae 	bl	80024a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002944:	2001      	movs	r0, #1
 8002946:	f7ff fe26 	bl	8002596 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	2004      	movs	r0, #4
 800294c:	f7ff fdd8 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002950:	2002      	movs	r0, #2
 8002952:	f7ff fdd5 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	2001      	movs	r0, #1
 8002958:	f7ff fdd2 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> LPUART1_RX
    PB5     ------> LPUART1_TX
    PB12     ------> LPUART1_RTS
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = LPUART1_RX_MCU_Pin;
 800295c:	2301      	movs	r3, #1
 800295e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800296c:	2308      	movs	r3, #8
 800296e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(LPUART1_RX_MCU_GPIO_Port, &GPIO_InitStruct);
 8002970:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002974:	4619      	mov	r1, r3
 8002976:	484c      	ldr	r0, [pc, #304]	@ (8002aa8 <HAL_UART_MspInit+0x1b0>)
 8002978:	f001 ffba 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LPUART1_TX_MCU_Pin|GPIO_PIN_12;
 800297c:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8002980:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800298e:	2308      	movs	r3, #8
 8002990:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002996:	4619      	mov	r1, r3
 8002998:	4844      	ldr	r0, [pc, #272]	@ (8002aac <HAL_UART_MspInit+0x1b4>)
 800299a:	f001 ffa9 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800299e:	2340      	movs	r3, #64	@ 0x40
 80029a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80029ae:	2308      	movs	r3, #8
 80029b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029b6:	4619      	mov	r1, r3
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029bc:	f001 ff98 	bl	80048f0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80029c0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029c2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ab4 <HAL_UART_MspInit+0x1bc>)
 80029c4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80029c6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029c8:	2210      	movs	r2, #16
 80029ca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029cc:	4b38      	ldr	r3, [pc, #224]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d2:	4b37      	ldr	r3, [pc, #220]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d8:	4b35      	ldr	r3, [pc, #212]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029de:	4b34      	ldr	r3, [pc, #208]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e4:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80029ea:	4b31      	ldr	r3, [pc, #196]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029f0:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80029f6:	482e      	ldr	r0, [pc, #184]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 80029f8:	f001 fd00 	bl	80043fc <HAL_DMA_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002a02:	f7ff fd4d 	bl	80024a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a29      	ldr	r2, [pc, #164]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 8002a0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a0e:	4a28      	ldr	r2, [pc, #160]	@ (8002ab0 <HAL_UART_MspInit+0x1b8>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2105      	movs	r1, #5
 8002a18:	2025      	movs	r0, #37	@ 0x25
 8002a1a:	f001 fbd5 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002a1e:	2025      	movs	r0, #37	@ 0x25
 8002a20:	f001 fbec 	bl	80041fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a24:	e039      	b.n	8002a9a <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a23      	ldr	r2, [pc, #140]	@ (8002ab8 <HAL_UART_MspInit+0x1c0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d134      	bne.n	8002a9a <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 f895 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_MspInit+0x154>
      Error_Handler();
 8002a48:	f7ff fd2a 	bl	80024a0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a50:	f7ff fdba 	bl	80025c8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7ff fd53 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a6a:	2307      	movs	r3, #7
 8002a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a72:	4619      	mov	r1, r3
 8002a74:	480d      	ldr	r0, [pc, #52]	@ (8002aac <HAL_UART_MspInit+0x1b4>)
 8002a76:	f001 ff3b 	bl	80048f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002a7a:	2340      	movs	r3, #64	@ 0x40
 8002a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7e:	2312      	movs	r3, #18
 8002a80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a82:	2301      	movs	r3, #1
 8002a84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a92:	4619      	mov	r1, r3
 8002a94:	4805      	ldr	r0, [pc, #20]	@ (8002aac <HAL_UART_MspInit+0x1b4>)
 8002a96:	f001 ff2b 	bl	80048f0 <HAL_GPIO_Init>
}
 8002a9a:	bf00      	nop
 8002a9c:	3770      	adds	r7, #112	@ 0x70
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40008000 	.word	0x40008000
 8002aa8:	48000800 	.word	0x48000800
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	20000524 	.word	0x20000524
 8002ab4:	4002001c 	.word	0x4002001c
 8002ab8:	40013800 	.word	0x40013800

08002abc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	@ (8002b64 <HAL_QSPI_MspInit+0xa8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d13e      	bne.n	8002b5c <HAL_QSPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ade:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ae2:	f7ff fd26 	bl	8002532 <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	f7ff fd0a 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	2001      	movs	r0, #1
 8002aee:	f7ff fd07 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af2:	2008      	movs	r0, #8
 8002af4:	f7ff fd04 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = QSPI_BK_IO0_Pin;
 8002af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK_IO0_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	4814      	ldr	r0, [pc, #80]	@ (8002b68 <HAL_QSPI_MspInit+0xac>)
 8002b16:	f001 feeb 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK_SCK_Pin;
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK_SCK_GPIO_Port, &GPIO_InitStruct);
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4619      	mov	r1, r3
 8002b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b38:	f001 feda 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK_IO3_Pin|QSPI_BK_NCS_Pin|QSPI_BK_IO1_Pin|QSPI_BK_IO2_Pin;
 8002b3c:	23e8      	movs	r3, #232	@ 0xe8
 8002b3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b4c:	230a      	movs	r3, #10
 8002b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	4619      	mov	r1, r3
 8002b56:	4805      	ldr	r0, [pc, #20]	@ (8002b6c <HAL_QSPI_MspInit+0xb0>)
 8002b58:	f001 feca 	bl	80048f0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	a0001000 	.word	0xa0001000
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	48000c00 	.word	0x48000c00

08002b70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b096      	sub	sp, #88	@ 0x58
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	2250      	movs	r2, #80	@ 0x50
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00b f9ad 	bl	800dee0 <memset>
  if(hrtc->Instance==RTC)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <HAL_RTC_MspInit+0x68>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d11f      	bne.n	8002bd0 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002b90:	f003 fb9e 	bl	80062d0 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b98:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba0:	f107 0308 	add.w	r3, r7, #8
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 ffe1 	bl	8007b6c <HAL_RCCEx_PeriphCLKConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002bb0:	f7ff fc76 	bl	80024a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bb4:	f7ff fc7a 	bl	80024ac <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002bb8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002bbc:	f7ff fcd2 	bl	8002564 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2105      	movs	r1, #5
 8002bc4:	2029      	movs	r0, #41	@ 0x29
 8002bc6:	f001 faff 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002bca:	2029      	movs	r0, #41	@ 0x29
 8002bcc:	f001 fb16 	bl	80041fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3758      	adds	r7, #88	@ 0x58
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40002800 	.word	0x40002800

08002bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a31      	ldr	r2, [pc, #196]	@ (8002cc0 <HAL_SPI_MspInit+0xe4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d12b      	bne.n	8002c56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bfe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c02:	f7ff fce1 	bl	80025c8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7ff fc7a 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f7ff fc77 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    PA1     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA4     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_4;
 8002c12:	2392      	movs	r3, #146	@ 0x92
 8002c14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c22:	2305      	movs	r3, #5
 8002c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c30:	f001 fe5e 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c34:	2310      	movs	r3, #16
 8002c36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c44:	2305      	movs	r3, #5
 8002c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c48:	f107 030c 	add.w	r3, r7, #12
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	481d      	ldr	r0, [pc, #116]	@ (8002cc4 <HAL_SPI_MspInit+0xe8>)
 8002c50:	f001 fe4e 	bl	80048f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c54:	e02f      	b.n	8002cb6 <HAL_SPI_MspInit+0xda>
  else if(hspi->Instance==SPI2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc8 <HAL_SPI_MspInit+0xec>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d12a      	bne.n	8002cb6 <HAL_SPI_MspInit+0xda>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c64:	f7ff fc7e 	bl	8002564 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c68:	2008      	movs	r0, #8
 8002c6a:	f7ff fc49 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7ff fc46 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c74:	2303      	movs	r3, #3
 8002c76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c84:	2305      	movs	r3, #5
 8002c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480f      	ldr	r0, [pc, #60]	@ (8002ccc <HAL_SPI_MspInit+0xf0>)
 8002c90:	f001 fe2e 	bl	80048f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c94:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4804      	ldr	r0, [pc, #16]	@ (8002cc4 <HAL_SPI_MspInit+0xe8>)
 8002cb2:	f001 fe1d 	bl	80048f0 <HAL_GPIO_Init>
}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40013000 	.word	0x40013000
 8002cc4:	48000400 	.word	0x48000400
 8002cc8:	40003800 	.word	0x40003800
 8002ccc:	48000c00 	.word	0x48000c00

08002cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a35      	ldr	r2, [pc, #212]	@ (8002dc4 <HAL_TIM_Base_MspInit+0xf4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d128      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cf2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002cf6:	f7ff fc67 	bl	80025c8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfa:	2008      	movs	r0, #8
 8002cfc:	f7ff fc00 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PD14     ------> TIM1_CH1
    PD15     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d00:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	482a      	ldr	r0, [pc, #168]	@ (8002dc8 <HAL_TIM_Base_MspInit+0xf8>)
 8002d1e:	f001 fde7 	bl	80048f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	210f      	movs	r1, #15
 8002d26:	2019      	movs	r0, #25
 8002d28:	f001 fa4e 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d2c:	2019      	movs	r0, #25
 8002d2e:	f001 fa65 	bl	80041fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2105      	movs	r1, #5
 8002d36:	201b      	movs	r0, #27
 8002d38:	f001 fa46 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002d3c:	201b      	movs	r0, #27
 8002d3e:	f001 fa5d 	bl	80041fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d42:	e03a      	b.n	8002dba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4c:	d12c      	bne.n	8002da8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7ff fc08 	bl	8002564 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7ff fbd3 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5a:	2002      	movs	r0, #2
 8002d5c:	f7ff fbd0 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d80:	f001 fdb6 	bl	80048f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480a      	ldr	r0, [pc, #40]	@ (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002da2:	f001 fda5 	bl	80048f0 <HAL_GPIO_Init>
}
 8002da6:	e008      	b.n	8002dba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM17)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_TIM_Base_MspInit+0x100>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d103      	bne.n	8002dba <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002db2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002db6:	f7ff fc07 	bl	80025c8 <LL_APB2_GRP1_EnableClock>
}
 8002dba:	bf00      	nop
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	48000c00 	.word	0x48000c00
 8002dcc:	48000400 	.word	0x48000400
 8002dd0:	40014800 	.word	0x40014800

08002dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 030c 	add.w	r3, r7, #12
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e30 <HAL_PCD_MspInit+0x5c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d118      	bne.n	8002e28 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7ff fb82 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = USB_P_Pin|USB_N_Pin;
 8002dfc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002e0e:	230a      	movs	r3, #10
 8002e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4619      	mov	r1, r3
 8002e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e1c:	f001 fd68 	bl	80048f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002e20:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002e24:	f7ff fb9e 	bl	8002564 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8002e28:	bf00      	nop
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40006800 	.word	0x40006800

08002e34 <LL_APB2_GRP1_EnableClock>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e58:	68fb      	ldr	r3, [r7, #12]
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	@ 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	2019      	movs	r0, #25
 8002e84:	f001 f9a0 	bl	80041c8 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e88:	2019      	movs	r0, #25
 8002e8a:	f001 f9b7 	bl	80041fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002e8e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002e92:	f7ff ffcf 	bl	8002e34 <LL_APB2_GRP1_EnableClock>

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e96:	f107 020c 	add.w	r2, r7, #12
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fbd1 	bl	8007648 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ea6:	f004 fbb9 	bl	800761c <HAL_RCC_GetPCLK2Freq>
 8002eaa:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <HAL_InitTick+0xcc>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	0c9b      	lsrs	r3, r3, #18
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002eba:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <HAL_InitTick+0xd0>)
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_InitTick+0xd4>)
 8002ebe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_InitTick+0xd0>)
 8002ec2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ec6:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <HAL_InitTick+0xd0>)
 8002eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ecc:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_InitTick+0xd0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <HAL_InitTick+0xd0>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 8002eda:	4817      	ldr	r0, [pc, #92]	@ (8002f38 <HAL_InitTick+0xd0>)
 8002edc:	f005 fe59 	bl	8008b92 <HAL_TIM_Base_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8002ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11b      	bne.n	8002f26 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002eee:	4812      	ldr	r0, [pc, #72]	@ (8002f38 <HAL_InitTick+0xd0>)
 8002ef0:	f005 fea6 	bl	8008c40 <HAL_TIM_Base_Start_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8002efa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d111      	bne.n	8002f26 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002f02:	2019      	movs	r0, #25
 8002f04:	f001 f97a 	bl	80041fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	d808      	bhi.n	8002f20 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	2019      	movs	r0, #25
 8002f14:	f001 f958 	bl	80041c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f18:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <HAL_InitTick+0xd8>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e002      	b.n	8002f26 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8002f26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3738      	adds	r7, #56	@ 0x38
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	431bde83 	.word	0x431bde83
 8002f38:	20000aa4 	.word	0x20000aa4
 8002f3c:	40014400 	.word	0x40014400
 8002f40:	20000010 	.word	0x20000010

08002f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <NMI_Handler+0x4>

08002f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <HardFault_Handler+0x4>

08002f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <MemManage_Handler+0x4>

08002f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <BusFault_Handler+0x4>

08002f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <UsageFault_Handler+0x4>

08002f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f80:	4802      	ldr	r0, [pc, #8]	@ (8002f8c <DMA1_Channel1_IRQHandler+0x10>)
 8002f82:	f001 fba1 	bl	80046c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000264 	.word	0x20000264

08002f90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002f94:	4802      	ldr	r0, [pc, #8]	@ (8002fa0 <DMA1_Channel2_IRQHandler+0x10>)
 8002f96:	f001 fb97 	bl	80046c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000524 	.word	0x20000524

08002fa4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <TIM1_UP_TIM16_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim1);
 8002fb0:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8002fb2:	f005 fe93 	bl	8008cdc <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <TIM1_UP_TIM16_IRQHandler+0x20>
  {
    HAL_TIM_IRQHandler(&htim16);
 8002fbe:	4803      	ldr	r0, [pc, #12]	@ (8002fcc <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002fc0:	f005 fe8c 	bl	8008cdc <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200006b4 	.word	0x200006b4
 8002fcc:	20000aa4 	.word	0x20000aa4

08002fd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <TIM1_CC_IRQHandler+0x10>)
 8002fd6:	f005 fe81 	bl	8008cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200006b4 	.word	0x200006b4

08002fe4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002fe8:	4802      	ldr	r0, [pc, #8]	@ (8002ff4 <LPUART1_IRQHandler+0x10>)
 8002fea:	f006 fb15 	bl	8009618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200003fc 	.word	0x200003fc

08002ff8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ffc:	4802      	ldr	r0, [pc, #8]	@ (8003008 <RTC_Alarm_IRQHandler+0x10>)
 8002ffe:	f005 fba3 	bl	8008748 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200005c8 	.word	0x200005c8

0800300c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003010:	f001 fdf6 	bl	8004c00 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return 1;
 800301c:	2301      	movs	r3, #1
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_kill>:

int _kill(int pid, int sig)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003032:	f00a ffb7 	bl	800dfa4 <__errno>
 8003036:	4603      	mov	r3, r0
 8003038:	2216      	movs	r2, #22
 800303a:	601a      	str	r2, [r3, #0]
  return -1;
 800303c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_exit>:

void _exit (int status)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003050:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffe7 	bl	8003028 <_kill>
  while (1) {}    /* Make sure we hang here */
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <_exit+0x12>

0800305e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e00a      	b.n	8003086 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003070:	f3af 8000 	nop.w
 8003074:	4601      	mov	r1, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	60ba      	str	r2, [r7, #8]
 800307c:	b2ca      	uxtb	r2, r1
 800307e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	dbf0      	blt.n	8003070 <_read+0x12>
  }

  return len;
 800308e:	687b      	ldr	r3, [r7, #4]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030c0:	605a      	str	r2, [r3, #4]
  return 0;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_isatty>:

int _isatty(int file)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003108:	4a14      	ldr	r2, [pc, #80]	@ (800315c <_sbrk+0x5c>)
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <_sbrk+0x60>)
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <_sbrk+0x64>)
 800311e:	4a12      	ldr	r2, [pc, #72]	@ (8003168 <_sbrk+0x68>)
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <_sbrk+0x64>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003130:	f00a ff38 	bl	800dfa4 <__errno>
 8003134:	4603      	mov	r3, r0
 8003136:	220c      	movs	r2, #12
 8003138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800313e:	e009      	b.n	8003154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003140:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003146:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	4a05      	ldr	r2, [pc, #20]	@ (8003164 <_sbrk+0x64>)
 8003150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20030000 	.word	0x20030000
 8003160:	00000400 	.word	0x00000400
 8003164:	20000af0 	.word	0x20000af0
 8003168:	20009730 	.word	0x20009730

0800316c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003170:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <SystemInit+0x98>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	4a23      	ldr	r2, [pc, #140]	@ (8003204 <SystemInit+0x98>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003194:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003198:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031a4:	4b18      	ldr	r3, [pc, #96]	@ (8003208 <SystemInit+0x9c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b6:	f023 0305 	bic.w	r3, r3, #5
 80031ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d6:	4a0d      	ldr	r2, [pc, #52]	@ (800320c <SystemInit+0xa0>)
 80031d8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031de:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <SystemInit+0xa0>)
 80031e0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00
 8003208:	faf6fefb 	.word	0xfaf6fefb
 800320c:	22041000 	.word	0x22041000

08003210 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003210:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003212:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003214:	3304      	adds	r3, #4

08003216 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003216:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003218:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800321a:	d3f9      	bcc.n	8003210 <CopyDataInit>
  bx lr
 800321c:	4770      	bx	lr

0800321e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800321e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003220:	3004      	adds	r0, #4

08003222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003222:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003224:	d3fb      	bcc.n	800321e <FillZerobss>
  bx lr
 8003226:	4770      	bx	lr

08003228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003228:	480c      	ldr	r0, [pc, #48]	@ (800325c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800322a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800322c:	f7ff ff9e 	bl	800316c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003230:	480b      	ldr	r0, [pc, #44]	@ (8003260 <LoopForever+0x6>)
 8003232:	490c      	ldr	r1, [pc, #48]	@ (8003264 <LoopForever+0xa>)
 8003234:	4a0c      	ldr	r2, [pc, #48]	@ (8003268 <LoopForever+0xe>)
 8003236:	2300      	movs	r3, #0
 8003238:	f7ff ffed 	bl	8003216 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800323c:	480b      	ldr	r0, [pc, #44]	@ (800326c <LoopForever+0x12>)
 800323e:	490c      	ldr	r1, [pc, #48]	@ (8003270 <LoopForever+0x16>)
 8003240:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <LoopForever+0x1a>)
 8003242:	2300      	movs	r3, #0
 8003244:	f7ff ffe7 	bl	8003216 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003248:	480b      	ldr	r0, [pc, #44]	@ (8003278 <LoopForever+0x1e>)
 800324a:	490c      	ldr	r1, [pc, #48]	@ (800327c <LoopForever+0x22>)
 800324c:	2300      	movs	r3, #0
 800324e:	f7ff ffe8 	bl	8003222 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003252:	f00a fead 	bl	800dfb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003256:	f7fe f9e5 	bl	8001624 <main>

0800325a <LoopForever>:

LoopForever:
  b LoopForever
 800325a:	e7fe      	b.n	800325a <LoopForever>
  ldr   r0, =_estack
 800325c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003260:	20000008 	.word	0x20000008
 8003264:	200001e4 	.word	0x200001e4
 8003268:	08010430 	.word	0x08010430
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800326c:	20030000 	.word	0x20030000
 8003270:	20030000 	.word	0x20030000
 8003274:	0801060c 	.word	0x0801060c
  INIT_BSS _sbss, _ebss
 8003278:	200001e4 	.word	0x200001e4
 800327c:	2000972c 	.word	0x2000972c

08003280 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003280:	e7fe      	b.n	8003280 <ADC1_IRQHandler>
	...

08003284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_Init+0x3c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a0b      	ldr	r2, [pc, #44]	@ (80032c0 <HAL_Init+0x3c>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003298:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329a:	2003      	movs	r0, #3
 800329c:	f000 ff89 	bl	80041b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a0:	200f      	movs	r0, #15
 80032a2:	f7ff fde1 	bl	8002e68 <HAL_InitTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	71fb      	strb	r3, [r7, #7]
 80032b0:	e001      	b.n	80032b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032b2:	f7ff f9a2 	bl	80025fa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032b6:	79fb      	ldrb	r3, [r7, #7]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	58004000 	.word	0x58004000

080032c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000014 	.word	0x20000014
 80032e8:	20000af4 	.word	0x20000af4

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000af4 	.word	0x20000af4

08003304 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003308:	4b03      	ldr	r3, [pc, #12]	@ (8003318 <HAL_GetTickPrio+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000010 	.word	0x20000010

0800331c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3360      	adds	r3, #96	@ 0x60
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b08      	ldr	r3, [pc, #32]	@ (80033c8 <LL_ADC_SetOffset+0x44>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	03fff000 	.word	0x03fff000

080033cc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3360      	adds	r3, #96	@ 0x60
 80033da:	461a      	mov	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3360      	adds	r3, #96	@ 0x60
 8003408:	461a      	mov	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	431a      	orrs	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3330      	adds	r3, #48	@ 0x30
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	4413      	add	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	211f      	movs	r1, #31
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	401a      	ands	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0e9b      	lsrs	r3, r3, #26
 8003466:	f003 011f 	and.w	r1, r3, #31
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	431a      	orrs	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003486:	b480      	push	{r7}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3314      	adds	r3, #20
 8003496:	461a      	mov	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	0e5b      	lsrs	r3, r3, #25
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	4413      	add	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0d1b      	lsrs	r3, r3, #20
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2107      	movs	r1, #7
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	401a      	ands	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	0d1b      	lsrs	r3, r3, #20
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	43db      	mvns	r3, r3
 80034f6:	401a      	ands	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0318 	and.w	r3, r3, #24
 80034fe:	4908      	ldr	r1, [pc, #32]	@ (8003520 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003500:	40d9      	lsrs	r1, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	400b      	ands	r3, r1
 8003506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350a:	431a      	orrs	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	0007ffff 	.word	0x0007ffff

08003524 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6093      	str	r3, [r2, #8]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800355c:	d101      	bne.n	8003562 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003580:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003584:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035ac:	d101      	bne.n	80035b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <LL_ADC_IsEnabled+0x18>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <LL_ADC_IsEnabled+0x1a>
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d101      	bne.n	80035fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b08      	cmp	r3, #8
 800361e:	d101      	bne.n	8003624 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e12e      	b.n	80038b0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fe ffe1 	bl	8002628 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff65 	bl	8003548 <LL_ADC_IsDeepPowerDownEnabled>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff4b 	bl	8003524 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff80 	bl	8003598 <LL_ADC_IsInternalRegulatorEnabled>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d115      	bne.n	80036ca <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff64 	bl	8003570 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036a8:	4b83      	ldr	r3, [pc, #524]	@ (80038b8 <HAL_ADC_Init+0x284>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	4a83      	ldr	r2, [pc, #524]	@ (80038bc <HAL_ADC_Init+0x288>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036bc:	e002      	b.n	80036c4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f9      	bne.n	80036be <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ff62 	bl	8003598 <LL_ADC_IsInternalRegulatorEnabled>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	f043 0210 	orr.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	f043 0201 	orr.w	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ff73 	bl	80035e6 <LL_ADC_REG_IsConversionOngoing>
 8003700:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 80c7 	bne.w	800389e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 80c3 	bne.w	800389e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003720:	f043 0202 	orr.w	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff47 	bl	80035c0 <LL_ADC_IsEnabled>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003738:	4861      	ldr	r0, [pc, #388]	@ (80038c0 <HAL_ADC_Init+0x28c>)
 800373a:	f7ff ff41 	bl	80035c0 <LL_ADC_IsEnabled>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	485e      	ldr	r0, [pc, #376]	@ (80038c4 <HAL_ADC_Init+0x290>)
 800374c:	f7ff fde6 	bl	800331c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7e5b      	ldrb	r3, [r3, #25]
 8003754:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800375a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003760:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003766:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800376e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003770:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d106      	bne.n	8003790 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	3b01      	subs	r3, #1
 8003788:	045b      	lsls	r3, r3, #17
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d009      	beq.n	80037ac <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	4b45      	ldr	r3, [pc, #276]	@ (80038c8 <HAL_ADC_Init+0x294>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	430b      	orrs	r3, r1
 80037be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff0e 	bl	80035e6 <LL_ADC_REG_IsConversionOngoing>
 80037ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff1b 	bl	800360c <LL_ADC_INJ_IsConversionOngoing>
 80037d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d13d      	bne.n	800385a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d13a      	bne.n	800385a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80037e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003800:	f023 0302 	bic.w	r3, r3, #2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	69b9      	ldr	r1, [r7, #24]
 800380a:	430b      	orrs	r3, r1
 800380c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003814:	2b01      	cmp	r3, #1
 8003816:	d118      	bne.n	800384a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003822:	f023 0304 	bic.w	r3, r3, #4
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800383a:	430a      	orrs	r2, r1
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	611a      	str	r2, [r3, #16]
 8003848:	e007      	b.n	800385a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10c      	bne.n	800387c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	f023 010f 	bic.w	r1, r3, #15
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	1e5a      	subs	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
 800387a:	e007      	b.n	800388c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020f 	bic.w	r2, r2, #15
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	f023 0303 	bic.w	r3, r3, #3
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	@ 0x54
 800389c:	e007      	b.n	80038ae <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	053e2d63 	.word	0x053e2d63
 80038c0:	50040000 	.word	0x50040000
 80038c4:	50040300 	.word	0x50040300
 80038c8:	fff0c007 	.word	0xfff0c007

080038cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0b6      	sub	sp, #216	@ 0xd8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x22>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e39f      	b.n	800402e <HAL_ADC_ConfigChannel+0x762>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fe73 	bl	80035e6 <LL_ADC_REG_IsConversionOngoing>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 8384 	bne.w	8004010 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	f7ff fd8a 	bl	800342e <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fe61 	bl	80035e6 <LL_ADC_REG_IsConversionOngoing>
 8003924:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fe6d 	bl	800360c <LL_ADC_INJ_IsConversionOngoing>
 8003932:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003936:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 81a6 	bne.w	8003c8c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 81a1 	bne.w	8003c8c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	461a      	mov	r2, r3
 8003958:	f7ff fd95 	bl	8003486 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	08db      	lsrs	r3, r3, #3
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00a      	beq.n	8003994 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6919      	ldr	r1, [r3, #16]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800398e:	f7ff fcf9 	bl	8003384 <LL_ADC_SetOffset>
 8003992:	e17b      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fd16 	bl	80033cc <LL_ADC_GetOffsetChannel>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0xf4>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fd0b 	bl	80033cc <LL_ADC_GetOffsetChannel>
 80039b6:	4603      	mov	r3, r0
 80039b8:	0e9b      	lsrs	r3, r3, #26
 80039ba:	f003 021f 	and.w	r2, r3, #31
 80039be:	e01e      	b.n	80039fe <HAL_ADC_ConfigChannel+0x132>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fd00 	bl	80033cc <LL_ADC_GetOffsetChannel>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e004      	b.n	80039fc <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80039f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x14a>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	0e9b      	lsrs	r3, r3, #26
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	e018      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x17c>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	e004      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d106      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fccf 	bl	80033f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2101      	movs	r1, #1
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fcb3 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x1ba>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fca8 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	0e9b      	lsrs	r3, r3, #26
 8003a80:	f003 021f 	and.w	r2, r3, #31
 8003a84:	e01e      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x1f8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fc9d 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003aa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003ab4:	2320      	movs	r3, #32
 8003ab6:	e004      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x210>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	e018      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x242>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003b00:	2320      	movs	r3, #32
 8003b02:	e004      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b08:	fab3 f383 	clz	r3, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d106      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fc6c 	bl	80033f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fc50 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x280>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fc45 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003b42:	4603      	mov	r3, r0
 8003b44:	0e9b      	lsrs	r3, r3, #26
 8003b46:	f003 021f 	and.w	r2, r3, #31
 8003b4a:	e01e      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x2be>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2102      	movs	r1, #2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fc3a 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	e004      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x2d6>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	0e9b      	lsrs	r3, r3, #26
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	e016      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x304>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003bc2:	2320      	movs	r3, #32
 8003bc4:	e004      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d106      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2102      	movs	r1, #2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fc0b 	bl	80033f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2103      	movs	r1, #3
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fbef 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x342>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fbe4 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	0e9b      	lsrs	r3, r3, #26
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	e017      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x372>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2103      	movs	r1, #3
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fbd9 	bl	80033cc <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c28:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e003      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x38a>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	0e9b      	lsrs	r3, r3, #26
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	e011      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x3ae>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d106      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	2103      	movs	r1, #3
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fbb6 	bl	80033f8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fc95 	bl	80035c0 <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 81c2 	bne.w	8004022 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7ff fc16 	bl	80034dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x624>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	f040 8130 	bne.w	8003f1c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x418>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	bf94      	ite	ls
 8003cdc:	2301      	movls	r3, #1
 8003cde:	2300      	movhi	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e019      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x44c>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e003      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003d00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2b09      	cmp	r3, #9
 8003d10:	bf94      	ite	ls
 8003d12:	2301      	movls	r3, #1
 8003d14:	2300      	movhi	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d079      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x46c>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0e9b      	lsrs	r3, r3, #26
 8003d2e:	3301      	adds	r3, #1
 8003d30:	069b      	lsls	r3, r3, #26
 8003d32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d36:	e015      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x498>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e003      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	069b      	lsls	r3, r3, #26
 8003d60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x4b8>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	3301      	adds	r3, #1
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	e017      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x4e8>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d94:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e003      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2101      	movs	r1, #1
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	ea42 0103 	orr.w	r1, r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x50e>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0e9b      	lsrs	r3, r3, #26
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	051b      	lsls	r3, r3, #20
 8003dd8:	e018      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x540>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003df2:	2320      	movs	r3, #32
 8003df4:	e003      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df8:	fab3 f383 	clz	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	e080      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x560>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	3301      	adds	r3, #1
 8003e24:	069b      	lsls	r3, r3, #26
 8003e26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e2a:	e015      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x58c>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003e44:	2320      	movs	r3, #32
 8003e46:	e003      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	3301      	adds	r3, #1
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x5ac>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2101      	movs	r1, #1
 8003e72:	fa01 f303 	lsl.w	r3, r1, r3
 8003e76:	e017      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x5dc>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	61fb      	str	r3, [r7, #28]
  return result;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003e90:	2320      	movs	r3, #32
 8003e92:	e003      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	ea42 0103 	orr.w	r1, r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x608>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0e9b      	lsrs	r3, r3, #26
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	3b1e      	subs	r3, #30
 8003ecc:	051b      	lsls	r3, r3, #20
 8003ece:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	e01d      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x644>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	613b      	str	r3, [r7, #16]
  return result;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003eec:	2320      	movs	r3, #32
 8003eee:	e005      	b.n	8003efc <HAL_ADC_ConfigChannel+0x630>
 8003ef0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3301      	adds	r3, #1
 8003efe:	f003 021f 	and.w	r2, r3, #31
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	3b1e      	subs	r3, #30
 8003f0a:	051b      	lsls	r3, r3, #20
 8003f0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f10:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7ff fab5 	bl	8003486 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b45      	ldr	r3, [pc, #276]	@ (8004038 <HAL_ADC_ConfigChannel+0x76c>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d07c      	beq.n	8004022 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f28:	4844      	ldr	r0, [pc, #272]	@ (800403c <HAL_ADC_ConfigChannel+0x770>)
 8003f2a:	f7ff fa1d 	bl	8003368 <LL_ADC_GetCommonPathInternalCh>
 8003f2e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f32:	4843      	ldr	r0, [pc, #268]	@ (8004040 <HAL_ADC_ConfigChannel+0x774>)
 8003f34:	f7ff fb44 	bl	80035c0 <LL_ADC_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d15e      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a40      	ldr	r2, [pc, #256]	@ (8004044 <HAL_ADC_ConfigChannel+0x778>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d127      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x6cc>
 8003f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d121      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a39      	ldr	r2, [pc, #228]	@ (8004040 <HAL_ADC_ConfigChannel+0x774>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d161      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f66:	4619      	mov	r1, r3
 8003f68:	4834      	ldr	r0, [pc, #208]	@ (800403c <HAL_ADC_ConfigChannel+0x770>)
 8003f6a:	f7ff f9ea 	bl	8003342 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f6e:	4b36      	ldr	r3, [pc, #216]	@ (8004048 <HAL_ADC_ConfigChannel+0x77c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	4a35      	ldr	r2, [pc, #212]	@ (800404c <HAL_ADC_ConfigChannel+0x780>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003f88:	e002      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f9      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f96:	e044      	b.n	8004022 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004050 <HAL_ADC_ConfigChannel+0x784>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x6fe>
 8003fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fa6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <HAL_ADC_ConfigChannel+0x774>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d134      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	481e      	ldr	r0, [pc, #120]	@ (800403c <HAL_ADC_ConfigChannel+0x770>)
 8003fc4:	f7ff f9bd 	bl	8003342 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fc8:	e02b      	b.n	8004022 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a21      	ldr	r2, [pc, #132]	@ (8004054 <HAL_ADC_ConfigChannel+0x788>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d126      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x756>
 8003fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d120      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	@ (8004040 <HAL_ADC_ConfigChannel+0x774>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d11b      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003fea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4811      	ldr	r0, [pc, #68]	@ (800403c <HAL_ADC_ConfigChannel+0x770>)
 8003ff6:	f7ff f9a4 	bl	8003342 <LL_ADC_SetCommonPathInternalCh>
 8003ffa:	e012      	b.n	8004022 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800400e:	e008      	b.n	8004022 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800402a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800402e:	4618      	mov	r0, r3
 8004030:	37d8      	adds	r7, #216	@ 0xd8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	80080000 	.word	0x80080000
 800403c:	50040300 	.word	0x50040300
 8004040:	50040000 	.word	0x50040000
 8004044:	c7520000 	.word	0xc7520000
 8004048:	2000000c 	.word	0x2000000c
 800404c:	053e2d63 	.word	0x053e2d63
 8004050:	cb840000 	.word	0xcb840000
 8004054:	80000001 	.word	0x80000001

08004058 <__NVIC_SetPriorityGrouping>:
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004068:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <__NVIC_SetPriorityGrouping+0x44>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004074:	4013      	ands	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408a:	4a04      	ldr	r2, [pc, #16]	@ (800409c <__NVIC_SetPriorityGrouping+0x44>)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	60d3      	str	r3, [r2, #12]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <__NVIC_GetPriorityGrouping>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a4:	4b04      	ldr	r3, [pc, #16]	@ (80040b8 <__NVIC_GetPriorityGrouping+0x18>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	f003 0307 	and.w	r3, r3, #7
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <__NVIC_EnableIRQ>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	db0b      	blt.n	80040e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	4907      	ldr	r1, [pc, #28]	@ (80040f4 <__NVIC_EnableIRQ+0x38>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2001      	movs	r0, #1
 80040de:	fa00 f202 	lsl.w	r2, r0, r2
 80040e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	e000e100 	.word	0xe000e100

080040f8 <__NVIC_SetPriority>:
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	6039      	str	r1, [r7, #0]
 8004102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004108:	2b00      	cmp	r3, #0
 800410a:	db0a      	blt.n	8004122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	490c      	ldr	r1, [pc, #48]	@ (8004144 <__NVIC_SetPriority+0x4c>)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	0112      	lsls	r2, r2, #4
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	440b      	add	r3, r1
 800411c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004120:	e00a      	b.n	8004138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4908      	ldr	r1, [pc, #32]	@ (8004148 <__NVIC_SetPriority+0x50>)
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	3b04      	subs	r3, #4
 8004130:	0112      	lsls	r2, r2, #4
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	440b      	add	r3, r1
 8004136:	761a      	strb	r2, [r3, #24]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000e100 	.word	0xe000e100
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <NVIC_EncodePriority>:
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	@ 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f1c3 0307 	rsb	r3, r3, #7
 8004166:	2b04      	cmp	r3, #4
 8004168:	bf28      	it	cs
 800416a:	2304      	movcs	r3, #4
 800416c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3304      	adds	r3, #4
 8004172:	2b06      	cmp	r3, #6
 8004174:	d902      	bls.n	800417c <NVIC_EncodePriority+0x30>
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3b03      	subs	r3, #3
 800417a:	e000      	b.n	800417e <NVIC_EncodePriority+0x32>
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	401a      	ands	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	43d9      	mvns	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a4:	4313      	orrs	r3, r2
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	@ 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff ff4c 	bl	8004058 <__NVIC_SetPriorityGrouping>
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041d6:	f7ff ff63 	bl	80040a0 <__NVIC_GetPriorityGrouping>
 80041da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	6978      	ldr	r0, [r7, #20]
 80041e2:	f7ff ffb3 	bl	800414c <NVIC_EncodePriority>
 80041e6:	4602      	mov	r2, r0
 80041e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff ff82 	bl	80040f8 <__NVIC_SetPriority>
}
 80041f4:	bf00      	nop
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff ff56 	bl	80040bc <__NVIC_EnableIRQ>
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e054      	b.n	80042d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7f5b      	ldrb	r3, [r3, #29]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fe fa60 	bl	8002700 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a22      	ldr	r2, [pc, #136]	@ (80042dc <HAL_CRC_Init+0xc4>)
 8004254:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0218 	bic.w	r2, r2, #24
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	e00c      	b.n	8004282 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	461a      	mov	r2, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f834 	bl	80042e0 <HAL_CRCEx_Polynomial_Set>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e028      	b.n	80042d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	795b      	ldrb	r3, [r3, #5]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004292:	611a      	str	r2, [r3, #16]
 8004294:	e004      	b.n	80042a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6912      	ldr	r2, [r2, #16]
 800429e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	04c11db7 	.word	0x04c11db7

080042e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80042f0:	231f      	movs	r3, #31
 80042f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
 8004302:	e063      	b.n	80043cc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004304:	bf00      	nop
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1e5a      	subs	r2, r3, #1
 800430a:	613a      	str	r2, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <HAL_CRCEx_Polynomial_Set+0x44>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b18      	cmp	r3, #24
 8004328:	d846      	bhi.n	80043b8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800432a:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <HAL_CRCEx_Polynomial_Set+0x50>)
 800432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004330:	080043bf 	.word	0x080043bf
 8004334:	080043b9 	.word	0x080043b9
 8004338:	080043b9 	.word	0x080043b9
 800433c:	080043b9 	.word	0x080043b9
 8004340:	080043b9 	.word	0x080043b9
 8004344:	080043b9 	.word	0x080043b9
 8004348:	080043b9 	.word	0x080043b9
 800434c:	080043b9 	.word	0x080043b9
 8004350:	080043ad 	.word	0x080043ad
 8004354:	080043b9 	.word	0x080043b9
 8004358:	080043b9 	.word	0x080043b9
 800435c:	080043b9 	.word	0x080043b9
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043b9 	.word	0x080043b9
 8004368:	080043b9 	.word	0x080043b9
 800436c:	080043b9 	.word	0x080043b9
 8004370:	080043a1 	.word	0x080043a1
 8004374:	080043b9 	.word	0x080043b9
 8004378:	080043b9 	.word	0x080043b9
 800437c:	080043b9 	.word	0x080043b9
 8004380:	080043b9 	.word	0x080043b9
 8004384:	080043b9 	.word	0x080043b9
 8004388:	080043b9 	.word	0x080043b9
 800438c:	080043b9 	.word	0x080043b9
 8004390:	08004395 	.word	0x08004395
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d913      	bls.n	80043c2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800439e:	e010      	b.n	80043c2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b07      	cmp	r3, #7
 80043a4:	d90f      	bls.n	80043c6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80043aa:	e00c      	b.n	80043c6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b0f      	cmp	r3, #15
 80043b0:	d90b      	bls.n	80043ca <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80043b6:	e008      	b.n	80043ca <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	75fb      	strb	r3, [r7, #23]
        break;
 80043bc:	e006      	b.n	80043cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043be:	bf00      	nop
 80043c0:	e004      	b.n	80043cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043ca:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f023 0118 	bic.w	r1, r3, #24
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e08e      	b.n	800452c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	4b47      	ldr	r3, [pc, #284]	@ (8004534 <HAL_DMA_Init+0x138>)
 8004416:	429a      	cmp	r2, r3
 8004418:	d80f      	bhi.n	800443a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	4b45      	ldr	r3, [pc, #276]	@ (8004538 <HAL_DMA_Init+0x13c>)
 8004422:	4413      	add	r3, r2
 8004424:	4a45      	ldr	r2, [pc, #276]	@ (800453c <HAL_DMA_Init+0x140>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	091b      	lsrs	r3, r3, #4
 800442c:	009a      	lsls	r2, r3, #2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a42      	ldr	r2, [pc, #264]	@ (8004540 <HAL_DMA_Init+0x144>)
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
 8004438:	e00e      	b.n	8004458 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	4b40      	ldr	r3, [pc, #256]	@ (8004544 <HAL_DMA_Init+0x148>)
 8004442:	4413      	add	r3, r2
 8004444:	4a3d      	ldr	r2, [pc, #244]	@ (800453c <HAL_DMA_Init+0x140>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a3c      	ldr	r2, [pc, #240]	@ (8004548 <HAL_DMA_Init+0x14c>)
 8004456:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800447c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9bc 	bl	8004828 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044b8:	d102      	bne.n	80044c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80044cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d010      	beq.n	8004502 <HAL_DMA_Init+0x106>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d80c      	bhi.n	8004502 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9db 	bl	80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	e008      	b.n	8004514 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40020407 	.word	0x40020407
 8004538:	bffdfff8 	.word	0xbffdfff8
 800453c:	cccccccd 	.word	0xcccccccd
 8004540:	40020000 	.word	0x40020000
 8004544:	bffdfbf8 	.word	0xbffdfbf8
 8004548:	40020400 	.word	0x40020400

0800454c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e04f      	b.n	80045fe <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d008      	beq.n	800457c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e040      	b.n	80045fe <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 020e 	bic.w	r2, r2, #14
 800458a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004596:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800459a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b0:	f003 021c 	and.w	r2, r3, #28
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f202 	lsl.w	r2, r1, r2
 80045be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d005      	beq.n	800462e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2204      	movs	r2, #4
 8004626:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	e047      	b.n	80046be <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 020e 	bic.w	r2, r2, #14
 800463c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800465c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f003 021c 	and.w	r2, r3, #28
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800467a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004692:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800469c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
    }
  }
  return status;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e4:	f003 031c 	and.w	r3, r3, #28
 80046e8:	2204      	movs	r2, #4
 80046ea:	409a      	lsls	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d026      	beq.n	8004742 <HAL_DMA_IRQHandler+0x7a>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d021      	beq.n	8004742 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004720:	f003 021c 	and.w	r2, r3, #28
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	2104      	movs	r1, #4
 800472a:	fa01 f202 	lsl.w	r2, r1, r2
 800472e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d071      	beq.n	800481c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004740:	e06c      	b.n	800481c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	f003 031c 	and.w	r3, r3, #28
 800474a:	2202      	movs	r2, #2
 800474c:	409a      	lsls	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d02e      	beq.n	80047b4 <HAL_DMA_IRQHandler+0xec>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d029      	beq.n	80047b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 020a 	bic.w	r2, r2, #10
 800477c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478a:	f003 021c 	and.w	r2, r3, #28
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	2102      	movs	r1, #2
 8004794:	fa01 f202 	lsl.w	r2, r1, r2
 8004798:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d038      	beq.n	800481c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047b2:	e033      	b.n	800481c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b8:	f003 031c 	and.w	r3, r3, #28
 80047bc:	2208      	movs	r2, #8
 80047be:	409a      	lsls	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02a      	beq.n	800481e <HAL_DMA_IRQHandler+0x156>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d025      	beq.n	800481e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 020e 	bic.w	r2, r2, #14
 80047e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e6:	f003 021c 	and.w	r2, r3, #28
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	2101      	movs	r1, #1
 80047f0:	fa01 f202 	lsl.w	r2, r1, r2
 80047f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800481c:	bf00      	nop
 800481e:	bf00      	nop
}
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b17      	ldr	r3, [pc, #92]	@ (8004894 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004838:	429a      	cmp	r2, r3
 800483a:	d80a      	bhi.n	8004852 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004848:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6493      	str	r3, [r2, #72]	@ 0x48
 8004850:	e007      	b.n	8004862 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	009a      	lsls	r2, r3, #2
 800485a:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800485c:	4413      	add	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	3b08      	subs	r3, #8
 800486a:	4a0c      	ldr	r2, [pc, #48]	@ (800489c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004878:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40020407 	.word	0x40020407
 8004898:	4002081c 	.word	0x4002081c
 800489c:	cccccccd 	.word	0xcccccccd
 80048a0:	40020880 	.word	0x40020880

080048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	461a      	mov	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a09      	ldr	r2, [pc, #36]	@ (80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80048c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2201      	movs	r2, #1
 80048d4:	409a      	lsls	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	1000823f 	.word	0x1000823f
 80048ec:	40020940 	.word	0x40020940

080048f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048fe:	e14c      	b.n	8004b9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	fa01 f303 	lsl.w	r3, r1, r3
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 813e 	beq.w	8004b94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d005      	beq.n	8004930 <HAL_GPIO_Init+0x40>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d130      	bne.n	8004992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004966:	2201      	movs	r2, #1
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0201 	and.w	r2, r3, #1
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b03      	cmp	r3, #3
 800499c:	d017      	beq.n	80049ce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	2203      	movs	r2, #3
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d123      	bne.n	8004a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	08da      	lsrs	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3208      	adds	r2, #8
 80049e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4013      	ands	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	08da      	lsrs	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3208      	adds	r2, #8
 8004a1c:	6939      	ldr	r1, [r7, #16]
 8004a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0203 	and.w	r2, r3, #3
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8098 	beq.w	8004b94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a64:	4a54      	ldr	r2, [pc, #336]	@ (8004bb8 <HAL_GPIO_Init+0x2c8>)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	089b      	lsrs	r3, r3, #2
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	220f      	movs	r2, #15
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a8e:	d019      	beq.n	8004ac4 <HAL_GPIO_Init+0x1d4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a4a      	ldr	r2, [pc, #296]	@ (8004bbc <HAL_GPIO_Init+0x2cc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_GPIO_Init+0x1d0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a49      	ldr	r2, [pc, #292]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00d      	beq.n	8004abc <HAL_GPIO_Init+0x1cc>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a48      	ldr	r2, [pc, #288]	@ (8004bc4 <HAL_GPIO_Init+0x2d4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <HAL_GPIO_Init+0x1c8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a47      	ldr	r2, [pc, #284]	@ (8004bc8 <HAL_GPIO_Init+0x2d8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <HAL_GPIO_Init+0x1c4>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e008      	b.n	8004ac6 <HAL_GPIO_Init+0x1d6>
 8004ab4:	2307      	movs	r3, #7
 8004ab6:	e006      	b.n	8004ac6 <HAL_GPIO_Init+0x1d6>
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e004      	b.n	8004ac6 <HAL_GPIO_Init+0x1d6>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e002      	b.n	8004ac6 <HAL_GPIO_Init+0x1d6>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_GPIO_Init+0x1d6>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	f002 0203 	and.w	r2, r2, #3
 8004acc:	0092      	lsls	r2, r2, #2
 8004ace:	4093      	lsls	r3, r2
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ad6:	4938      	ldr	r1, [pc, #224]	@ (8004bb8 <HAL_GPIO_Init+0x2c8>)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	3302      	adds	r3, #2
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae4:	4b39      	ldr	r3, [pc, #228]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b08:	4a30      	ldr	r2, [pc, #192]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b32:	4a26      	ldr	r2, [pc, #152]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b38:	4b24      	ldr	r3, [pc, #144]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4013      	ands	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004b66:	4b19      	ldr	r3, [pc, #100]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	43db      	mvns	r3, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3301      	adds	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f aeab 	bne.w	8004900 <HAL_GPIO_Init+0x10>
  }
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	48000400 	.word	0x48000400
 8004bc0:	48000800 	.word	0x48000800
 8004bc4:	48000c00 	.word	0x48000c00
 8004bc8:	48001000 	.word	0x48001000
 8004bcc:	58000800 	.word	0x58000800

08004bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004be0:	787b      	ldrb	r3, [r7, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bec:	e002      	b.n	8004bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <HAL_HSEM_IRQHandler+0x30>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004c0c:	4b08      	ldr	r3, [pc, #32]	@ (8004c30 <HAL_HSEM_IRQHandler+0x30>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	4906      	ldr	r1, [pc, #24]	@ (8004c30 <HAL_HSEM_IRQHandler+0x30>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c1a:	4a05      	ldr	r2, [pc, #20]	@ (8004c30 <HAL_HSEM_IRQHandler+0x30>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f807 	bl	8004c34 <HAL_HSEM_FreeCallback>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	58001500 	.word	0x58001500

08004c34 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e08d      	b.n	8004d76 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fd fd5a 	bl	8002728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	@ 0x24
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	e006      	b.n	8004cd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d108      	bne.n	8004cea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	e007      	b.n	8004cfa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69d9      	ldr	r1, [r3, #28]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	817b      	strh	r3, [r7, #10]
 8004d90:	4613      	mov	r3, r2
 8004d92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	f040 80fd 	bne.w	8004f9c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_I2C_Master_Transmit+0x30>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0f6      	b.n	8004f9e <HAL_I2C_Master_Transmit+0x21e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004db8:	f7fe fa98 	bl	80032ec <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2319      	movs	r3, #25
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fdcc 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e0e1      	b.n	8004f9e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2221      	movs	r2, #33	@ 0x21
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2210      	movs	r2, #16
 8004de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	893a      	ldrh	r2, [r7, #8]
 8004dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2bff      	cmp	r3, #255	@ 0xff
 8004e0a:	d906      	bls.n	8004e1a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	22ff      	movs	r2, #255	@ 0xff
 8004e10:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004e12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e007      	b.n	8004e2a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004e24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d024      	beq.n	8004e7c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	781a      	ldrb	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	3301      	adds	r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	8979      	ldrh	r1, [r7, #10]
 8004e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8004fa8 <HAL_I2C_Master_Transmit+0x228>)
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 ffc7 	bl	8005e08 <I2C_TransferConfig>
 8004e7a:	e066      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	8979      	ldrh	r1, [r7, #10]
 8004e84:	4b48      	ldr	r3, [pc, #288]	@ (8004fa8 <HAL_I2C_Master_Transmit+0x228>)
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 ffbc 	bl	8005e08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004e90:	e05b      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	6a39      	ldr	r1, [r7, #32]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fdbf 	bl	8005a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07b      	b.n	8004f9e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d034      	beq.n	8004f4a <HAL_I2C_Master_Transmit+0x1ca>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d130      	bne.n	8004f4a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2180      	movs	r1, #128	@ 0x80
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fd38 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e04d      	b.n	8004f9e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2bff      	cmp	r3, #255	@ 0xff
 8004f0a:	d90e      	bls.n	8004f2a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	22ff      	movs	r2, #255	@ 0xff
 8004f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	8979      	ldrh	r1, [r7, #10]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 ff70 	bl	8005e08 <I2C_TransferConfig>
 8004f28:	e00f      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	8979      	ldrh	r1, [r7, #10]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 ff5f 	bl	8005e08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d19e      	bne.n	8004e92 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	6a39      	ldr	r1, [r7, #32]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fda5 	bl	8005aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e01a      	b.n	8004f9e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6859      	ldr	r1, [r3, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <HAL_I2C_Master_Transmit+0x22c>)
 8004f7c:	400b      	ands	r3, r1
 8004f7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	80002000 	.word	0x80002000
 8004fac:	fe00e800 	.word	0xfe00e800

08004fb0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	817b      	strh	r3, [r7, #10]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	f040 80db 	bne.w	8005188 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_I2C_Master_Receive+0x30>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e0d4      	b.n	800518a <HAL_I2C_Master_Receive+0x1da>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fe8:	f7fe f980 	bl	80032ec <HAL_GetTick>
 8004fec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	2319      	movs	r3, #25
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fcb4 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e0bf      	b.n	800518a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2222      	movs	r2, #34	@ 0x22
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2210      	movs	r2, #16
 8005016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	893a      	ldrh	r2, [r7, #8]
 800502a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	2bff      	cmp	r3, #255	@ 0xff
 800503a:	d90e      	bls.n	800505a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	22ff      	movs	r2, #255	@ 0xff
 8005040:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005046:	b2da      	uxtb	r2, r3
 8005048:	8979      	ldrh	r1, [r7, #10]
 800504a:	4b52      	ldr	r3, [pc, #328]	@ (8005194 <HAL_I2C_Master_Receive+0x1e4>)
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fed8 	bl	8005e08 <I2C_TransferConfig>
 8005058:	e06d      	b.n	8005136 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005068:	b2da      	uxtb	r2, r3
 800506a:	8979      	ldrh	r1, [r7, #10]
 800506c:	4b49      	ldr	r3, [pc, #292]	@ (8005194 <HAL_I2C_Master_Receive+0x1e4>)
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fec7 	bl	8005e08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800507a:	e05c      	b.n	8005136 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	6a39      	ldr	r1, [r7, #32]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fd55 	bl	8005b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e07c      	b.n	800518a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d034      	beq.n	8005136 <HAL_I2C_Master_Receive+0x186>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d130      	bne.n	8005136 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2200      	movs	r2, #0
 80050dc:	2180      	movs	r1, #128	@ 0x80
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fc42 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e04d      	b.n	800518a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2bff      	cmp	r3, #255	@ 0xff
 80050f6:	d90e      	bls.n	8005116 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	22ff      	movs	r2, #255	@ 0xff
 80050fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005102:	b2da      	uxtb	r2, r3
 8005104:	8979      	ldrh	r1, [r7, #10]
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fe7a 	bl	8005e08 <I2C_TransferConfig>
 8005114:	e00f      	b.n	8005136 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	8979      	ldrh	r1, [r7, #10]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fe69 	bl	8005e08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d19d      	bne.n	800507c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	6a39      	ldr	r1, [r7, #32]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fcaf 	bl	8005aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e01a      	b.n	800518a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2220      	movs	r2, #32
 800515a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <HAL_I2C_Master_Receive+0x1e8>)
 8005168:	400b      	ands	r3, r1
 800516a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	80002400 	.word	0x80002400
 8005198:	fe00e800 	.word	0xfe00e800

0800519c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	4608      	mov	r0, r1
 80051a6:	4611      	mov	r1, r2
 80051a8:	461a      	mov	r2, r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	817b      	strh	r3, [r7, #10]
 80051ae:	460b      	mov	r3, r1
 80051b0:	813b      	strh	r3, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b20      	cmp	r3, #32
 80051c0:	f040 80f9 	bne.w	80053b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_I2C_Mem_Write+0x34>
 80051ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0ed      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_I2C_Mem_Write+0x4e>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e0e6      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051f2:	f7fe f87b 	bl	80032ec <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2319      	movs	r3, #25
 80051fe:	2201      	movs	r2, #1
 8005200:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fbaf 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0d1      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2221      	movs	r2, #33	@ 0x21
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2240      	movs	r2, #64	@ 0x40
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800523c:	88f8      	ldrh	r0, [r7, #6]
 800523e:	893a      	ldrh	r2, [r7, #8]
 8005240:	8979      	ldrh	r1, [r7, #10]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	4603      	mov	r3, r0
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fabf 	bl	80057d0 <I2C_RequestMemoryWrite>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0a9      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	2bff      	cmp	r3, #255	@ 0xff
 800526c:	d90e      	bls.n	800528c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	22ff      	movs	r2, #255	@ 0xff
 8005272:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005278:	b2da      	uxtb	r2, r3
 800527a:	8979      	ldrh	r1, [r7, #10]
 800527c:	2300      	movs	r3, #0
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 fdbf 	bl	8005e08 <I2C_TransferConfig>
 800528a:	e00f      	b.n	80052ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529a:	b2da      	uxtb	r2, r3
 800529c:	8979      	ldrh	r1, [r7, #10]
 800529e:	2300      	movs	r3, #0
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fdae 	bl	8005e08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fbb2 	bl	8005a1a <I2C_WaitOnTXISFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e07b      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d034      	beq.n	8005364 <HAL_I2C_Mem_Write+0x1c8>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d130      	bne.n	8005364 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	2200      	movs	r2, #0
 800530a:	2180      	movs	r1, #128	@ 0x80
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fb2b 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e04d      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2bff      	cmp	r3, #255	@ 0xff
 8005324:	d90e      	bls.n	8005344 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	22ff      	movs	r2, #255	@ 0xff
 800532a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005330:	b2da      	uxtb	r2, r3
 8005332:	8979      	ldrh	r1, [r7, #10]
 8005334:	2300      	movs	r3, #0
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 fd63 	bl	8005e08 <I2C_TransferConfig>
 8005342:	e00f      	b.n	8005364 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005352:	b2da      	uxtb	r2, r3
 8005354:	8979      	ldrh	r1, [r7, #10]
 8005356:	2300      	movs	r3, #0
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fd52 	bl	8005e08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d19e      	bne.n	80052ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fb98 	bl	8005aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e01a      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2220      	movs	r2, #32
 8005388:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <HAL_I2C_Mem_Write+0x224>)
 8005396:	400b      	ands	r3, r1
 8005398:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e000      	b.n	80053b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	fe00e800 	.word	0xfe00e800

080053c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	461a      	mov	r2, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	817b      	strh	r3, [r7, #10]
 80053d6:	460b      	mov	r3, r1
 80053d8:	813b      	strh	r3, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	f040 80fd 	bne.w	80055e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <HAL_I2C_Mem_Read+0x34>
 80053f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0f1      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_I2C_Mem_Read+0x4e>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ea      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800541a:	f7fd ff67 	bl	80032ec <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2319      	movs	r3, #25
 8005426:	2201      	movs	r2, #1
 8005428:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fa9b 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0d5      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2222      	movs	r2, #34	@ 0x22
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2240      	movs	r2, #64	@ 0x40
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800545c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005464:	88f8      	ldrh	r0, [r7, #6]
 8005466:	893a      	ldrh	r2, [r7, #8]
 8005468:	8979      	ldrh	r1, [r7, #10]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	4603      	mov	r3, r0
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f9ff 	bl	8005878 <I2C_RequestMemoryRead>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0ad      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	2bff      	cmp	r3, #255	@ 0xff
 8005494:	d90e      	bls.n	80054b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22ff      	movs	r2, #255	@ 0xff
 800549a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	8979      	ldrh	r1, [r7, #10]
 80054a4:	4b52      	ldr	r3, [pc, #328]	@ (80055f0 <HAL_I2C_Mem_Read+0x22c>)
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fcab 	bl	8005e08 <I2C_TransferConfig>
 80054b2:	e00f      	b.n	80054d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	8979      	ldrh	r1, [r7, #10]
 80054c6:	4b4a      	ldr	r3, [pc, #296]	@ (80055f0 <HAL_I2C_Mem_Read+0x22c>)
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fc9a 	bl	8005e08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	2200      	movs	r2, #0
 80054dc:	2104      	movs	r1, #4
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fa42 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e07c      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d034      	beq.n	8005594 <HAL_I2C_Mem_Read+0x1d0>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d130      	bne.n	8005594 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	2200      	movs	r2, #0
 800553a:	2180      	movs	r1, #128	@ 0x80
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fa13 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e04d      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2bff      	cmp	r3, #255	@ 0xff
 8005554:	d90e      	bls.n	8005574 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	22ff      	movs	r2, #255	@ 0xff
 800555a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005560:	b2da      	uxtb	r2, r3
 8005562:	8979      	ldrh	r1, [r7, #10]
 8005564:	2300      	movs	r3, #0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fc4b 	bl	8005e08 <I2C_TransferConfig>
 8005572:	e00f      	b.n	8005594 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005582:	b2da      	uxtb	r2, r3
 8005584:	8979      	ldrh	r1, [r7, #10]
 8005586:	2300      	movs	r3, #0
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fc3a 	bl	8005e08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d19a      	bne.n	80054d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fa80 	bl	8005aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e01a      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2220      	movs	r2, #32
 80055b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <HAL_I2C_Mem_Read+0x230>)
 80055c6:	400b      	ands	r3, r1
 80055c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e000      	b.n	80055e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
  }
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	80002400 	.word	0x80002400
 80055f4:	fe00e800 	.word	0xfe00e800

080055f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	@ 0x28
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	460b      	mov	r3, r1
 8005606:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b20      	cmp	r3, #32
 8005616:	f040 80d6 	bne.w	80057c6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005628:	d101      	bne.n	800562e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
 800562c:	e0cc      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_I2C_IsDeviceReady+0x44>
 8005638:	2302      	movs	r3, #2
 800563a:	e0c5      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x1d0>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2224      	movs	r2, #36	@ 0x24
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_I2C_IsDeviceReady+0x72>
 800565a:	897b      	ldrh	r3, [r7, #10]
 800565c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005660:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005664:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005668:	e006      	b.n	8005678 <HAL_I2C_IsDeviceReady+0x80>
 800566a:	897b      	ldrh	r3, [r7, #10]
 800566c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005674:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800567e:	f7fd fe35 	bl	80032ec <HAL_GetTick>
 8005682:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80056b0:	e034      	b.n	800571c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056b8:	d01a      	beq.n	80056f0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fd fe17 	bl	80032ec <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <HAL_I2C_IsDeviceReady+0xd8>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10f      	bne.n	80056f0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e06b      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	bf0c      	ite	eq
 80056fe:	2301      	moveq	r3, #1
 8005700:	2300      	movne	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b10      	cmp	r3, #16
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800571c:	7ffb      	ldrb	r3, [r7, #31]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_I2C_IsDeviceReady+0x130>
 8005722:	7fbb      	ldrb	r3, [r7, #30]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0c4      	beq.n	80056b2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d01a      	beq.n	800576c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	2120      	movs	r1, #32
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f911 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e03b      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2220      	movs	r2, #32
 8005756:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e02d      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	2120      	movs	r1, #32
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f8f6 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e020      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2210      	movs	r2, #16
 800578c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2220      	movs	r2, #32
 8005794:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	3301      	adds	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	f63f af56 	bhi.w	8005652 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	461a      	mov	r2, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	817b      	strh	r3, [r7, #10]
 80057e2:	460b      	mov	r3, r1
 80057e4:	813b      	strh	r3, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	8979      	ldrh	r1, [r7, #10]
 80057f0:	4b20      	ldr	r3, [pc, #128]	@ (8005874 <I2C_RequestMemoryWrite+0xa4>)
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fb05 	bl	8005e08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f909 	bl	8005a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e02c      	b.n	800586c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005818:	893b      	ldrh	r3, [r7, #8]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	629a      	str	r2, [r3, #40]	@ 0x28
 8005822:	e015      	b.n	8005850 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005824:	893b      	ldrh	r3, [r7, #8]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	b29b      	uxth	r3, r3
 800582a:	b2da      	uxtb	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f8ef 	bl	8005a1a <I2C_WaitOnTXISFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e012      	b.n	800586c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005846:	893b      	ldrh	r3, [r7, #8]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2200      	movs	r2, #0
 8005858:	2180      	movs	r1, #128	@ 0x80
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f884 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	80002000 	.word	0x80002000

08005878 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	4608      	mov	r0, r1
 8005882:	4611      	mov	r1, r2
 8005884:	461a      	mov	r2, r3
 8005886:	4603      	mov	r3, r0
 8005888:	817b      	strh	r3, [r7, #10]
 800588a:	460b      	mov	r3, r1
 800588c:	813b      	strh	r3, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	b2da      	uxtb	r2, r3
 8005896:	8979      	ldrh	r1, [r7, #10]
 8005898:	4b20      	ldr	r3, [pc, #128]	@ (800591c <I2C_RequestMemoryRead+0xa4>)
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fab2 	bl	8005e08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	69b9      	ldr	r1, [r7, #24]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f8b6 	bl	8005a1a <I2C_WaitOnTXISFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e02c      	b.n	8005912 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d105      	bne.n	80058ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058be:	893b      	ldrh	r3, [r7, #8]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80058c8:	e015      	b.n	80058f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	69b9      	ldr	r1, [r7, #24]
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f89c 	bl	8005a1a <I2C_WaitOnTXISFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e012      	b.n	8005912 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058ec:	893b      	ldrh	r3, [r7, #8]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2140      	movs	r1, #64	@ 0x40
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f831 	bl	8005968 <I2C_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	80002000 	.word	0x80002000

08005920 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d103      	bne.n	800593e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	d007      	beq.n	800595c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	619a      	str	r2, [r3, #24]
  }
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005978:	e03b      	b.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f962 	bl	8005c48 <I2C_IsErrorOccurred>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e041      	b.n	8005a12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005994:	d02d      	beq.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fd fca9 	bl	80032ec <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d122      	bne.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d113      	bne.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e00f      	b.n	8005a12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d0b4      	beq.n	800597a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a26:	e033      	b.n	8005a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f90b 	bl	8005c48 <I2C_IsErrorOccurred>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e031      	b.n	8005aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a42:	d025      	beq.n	8005a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a44:	f7fd fc52 	bl	80032ec <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d302      	bcc.n	8005a5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d11a      	bne.n	8005a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d013      	beq.n	8005a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6c:	f043 0220 	orr.w	r2, r3, #32
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e007      	b.n	8005aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d1c4      	bne.n	8005a28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ab4:	e02f      	b.n	8005b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f8c4 	bl	8005c48 <I2C_IsErrorOccurred>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e02d      	b.n	8005b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fd fc0f 	bl	80032ec <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11a      	bne.n	8005b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d013      	beq.n	8005b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e007      	b.n	8005b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d1c8      	bne.n	8005ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005b40:	e071      	b.n	8005c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f87e 	bl	8005c48 <I2C_IsErrorOccurred>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d13b      	bne.n	8005bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d138      	bne.n	8005bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d105      	bne.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d121      	bne.n	8005bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2210      	movs	r2, #16
 8005b98:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b24      	ldr	r3, [pc, #144]	@ (8005c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005bb4:	400b      	ands	r3, r1
 8005bb6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	75fb      	strb	r3, [r7, #23]
 8005bd4:	e002      	b.n	8005bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005bdc:	f7fd fb86 	bl	80032ec <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d302      	bcc.n	8005bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d119      	bne.n	8005c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d116      	bne.n	8005c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d00f      	beq.n	8005c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f043 0220 	orr.w	r2, r3, #32
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d002      	beq.n	8005c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d083      	beq.n	8005b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	fe00e800 	.word	0xfe00e800

08005c48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	@ 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d068      	beq.n	8005d46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2210      	movs	r2, #16
 8005c7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c7c:	e049      	b.n	8005d12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c84:	d045      	beq.n	8005d12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fd fb31 	bl	80032ec <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <I2C_IsErrorOccurred+0x54>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d13a      	bne.n	8005d12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ca6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cbe:	d121      	bne.n	8005d04 <I2C_IsErrorOccurred+0xbc>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cc6:	d01d      	beq.n	8005d04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d01a      	beq.n	8005d04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005cde:	f7fd fb05 	bl	80032ec <HAL_GetTick>
 8005ce2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce4:	e00e      	b.n	8005d04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ce6:	f7fd fb01 	bl	80032ec <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b19      	cmp	r3, #25
 8005cf2:	d907      	bls.n	8005d04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	f043 0320 	orr.w	r3, r3, #32
 8005cfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005d02:	e006      	b.n	8005d12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d1e9      	bne.n	8005ce6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d003      	beq.n	8005d28 <I2C_IsErrorOccurred+0xe0>
 8005d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0aa      	beq.n	8005c7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2220      	movs	r2, #32
 8005d36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	f043 0304 	orr.w	r3, r3, #4
 8005d3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f043 0308 	orr.w	r3, r3, #8
 8005d80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f043 0302 	orr.w	r3, r3, #2
 8005da2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01c      	beq.n	8005df6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff fdaf 	bl	8005920 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8005e04 <I2C_IsErrorOccurred+0x1bc>)
 8005dce:	400b      	ands	r3, r1
 8005dd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3728      	adds	r7, #40	@ 0x28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	fe00e800 	.word	0xfe00e800

08005e08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	4613      	mov	r3, r2
 8005e18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e1a:	897b      	ldrh	r3, [r7, #10]
 8005e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e20:	7a7b      	ldrb	r3, [r7, #9]
 8005e22:	041b      	lsls	r3, r3, #16
 8005e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	0d5b      	lsrs	r3, r3, #21
 8005e42:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e46:	4b08      	ldr	r3, [pc, #32]	@ (8005e68 <I2C_TransferConfig+0x60>)
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	ea02 0103 	and.w	r1, r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	03ff63ff 	.word	0x03ff63ff

08005e6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d138      	bne.n	8005ef4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e032      	b.n	8005ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	@ 0x24
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ebe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
  }
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d139      	bne.n	8005f8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e033      	b.n	8005f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2224      	movs	r2, #36	@ 0x24
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e08f      	b.n	80060ce <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fc fc51 	bl	8002870 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d004      	beq.n	8005ff0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fee:	d103      	bne.n	8005ff8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 031e 	bic.w	r3, r3, #30
 8005ff6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006000:	4293      	cmp	r3, r2
 8006002:	d005      	beq.n	8006010 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800600a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800600e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4b31      	ldr	r3, [pc, #196]	@ (80060d8 <HAL_LPTIM_Init+0x13c>)
 8006014:	4013      	ands	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006020:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8006026:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800602c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8006032:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d107      	bne.n	8006052 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800604a:	4313      	orrs	r3, r2
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d004      	beq.n	8006064 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006062:	d107      	bne.n	8006074 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800606c:	4313      	orrs	r3, r2
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800607c:	4293      	cmp	r3, r2
 800607e:	d00a      	beq.n	8006096 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006088:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800608e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a0e      	ldr	r2, [pc, #56]	@ (80060dc <HAL_LPTIM_Init+0x140>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d108      	bne.n	80060ba <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	621a      	str	r2, [r3, #32]
 80060b8:	e004      	b.n	80060c4 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060c2:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	ff19f1fe 	.word	0xff19f1fe
 80060dc:	40007c00 	.word	0x40007c00

080060e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0c0      	b.n	8006274 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fc fe64 	bl	8002dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2203      	movs	r2, #3
 8006110:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f004 fb85 	bl	800a828 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
 8006122:	e03e      	b.n	80061a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	440b      	add	r3, r1
 8006132:	3311      	adds	r3, #17
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	440b      	add	r3, r1
 8006146:	3310      	adds	r3, #16
 8006148:	7bfa      	ldrb	r2, [r7, #15]
 800614a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	440b      	add	r3, r1
 800615a:	3313      	adds	r3, #19
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006160:	7bfa      	ldrb	r2, [r7, #15]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	440b      	add	r3, r1
 800616e:	3320      	adds	r3, #32
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006174:	7bfa      	ldrb	r2, [r7, #15]
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	440b      	add	r3, r1
 8006182:	3324      	adds	r3, #36	@ 0x24
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	440b      	add	r3, r1
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	3301      	adds	r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d3bb      	bcc.n	8006124 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
 80061b0:	e044      	b.n	800623c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061b2:	7bfa      	ldrb	r2, [r7, #15]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	440b      	add	r3, r1
 80061c0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061c8:	7bfa      	ldrb	r2, [r7, #15]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	440b      	add	r3, r1
 80061d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061da:	7bfa      	ldrb	r2, [r7, #15]
 80061dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	440b      	add	r3, r1
 80061ec:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061f4:	7bfa      	ldrb	r2, [r7, #15]
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800620a:	7bfa      	ldrb	r2, [r7, #15]
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	440b      	add	r3, r1
 8006218:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006220:	7bfa      	ldrb	r2, [r7, #15]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	440b      	add	r3, r1
 800622e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	3301      	adds	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	791b      	ldrb	r3, [r3, #4]
 8006240:	7bfa      	ldrb	r2, [r7, #15]
 8006242:	429a      	cmp	r2, r3
 8006244:	d3b5      	bcc.n	80061b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006252:	f004 fb04 	bl	800a85e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	7a9b      	ldrb	r3, [r3, #10]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d102      	bne.n	8006272 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f805 	bl	800627c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a04      	ldr	r2, [pc, #16]	@ (80062ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062de:	6013      	str	r3, [r2, #0]
}
 80062e0:	bf00      	nop
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	58000400 	.word	0x58000400

080062f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80062f4:	4b04      	ldr	r3, [pc, #16]	@ (8006308 <HAL_PWREx_GetVoltageRange+0x18>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	58000400 	.word	0x58000400

0800630c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af02      	add	r7, sp, #8
 8006312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006314:	f7fc ffea 	bl	80032ec <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e063      	b.n	80063ec <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7fc fbbf 	bl	8002abc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800633e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f858 	bl	80063f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	3b01      	subs	r3, #1
 8006358:	021a      	lsls	r2, r3, #8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	2120      	movs	r1, #32
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f850 	bl	8006414 <QSPI_WaitFlagStateUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d131      	bne.n	80063e2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006388:	f023 0310 	bic.w	r3, r3, #16
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6852      	ldr	r2, [r2, #4]
 8006390:	0611      	lsls	r1, r2, #24
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68d2      	ldr	r2, [r2, #12]
 8006396:	4311      	orrs	r1, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	430b      	orrs	r3, r1
 800639e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	4b13      	ldr	r3, [pc, #76]	@ (80063f4 <HAL_QSPI_Init+0xe8>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6912      	ldr	r2, [r2, #16]
 80063ae:	0411      	lsls	r1, r2, #16
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6952      	ldr	r2, [r2, #20]
 80063b4:	4311      	orrs	r1, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6992      	ldr	r2, [r2, #24]
 80063ba:	4311      	orrs	r1, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80063ea:	7afb      	ldrb	r3, [r7, #11]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	ffe0f8fe 	.word	0xffe0f8fe

080063f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006424:	e01a      	b.n	800645c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800642c:	d016      	beq.n	800645c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642e:	f7fc ff5d 	bl	80032ec <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	429a      	cmp	r2, r3
 800643c:	d302      	bcc.n	8006444 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10b      	bne.n	800645c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2204      	movs	r2, #4
 8006448:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006450:	f043 0201 	orr.w	r2, r3, #1
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e00e      	b.n	800647a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4013      	ands	r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	429a      	cmp	r2, r3
 8006476:	d1d6      	bne.n	8006426 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006482:	b480      	push	{r7}
 8006484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006494:	d101      	bne.n	800649a <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <LL_RCC_HSE_Enable>:
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80064aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b8:	6013      	str	r3, [r2, #0]
}
 80064ba:	bf00      	nop
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <LL_RCC_HSE_Disable>:
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80064c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064d6:	6013      	str	r3, [r2, #0]
}
 80064d8:	bf00      	nop
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <LL_RCC_HSE_IsReady>:
{
 80064e2:	b480      	push	{r7}
 80064e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064f4:	d101      	bne.n	80064fa <LL_RCC_HSE_IsReady+0x18>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <LL_RCC_HSE_IsReady+0x1a>
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <LL_RCC_HSI_Enable>:
{
 8006506:	b480      	push	{r7}
 8006508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800650a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006518:	6013      	str	r3, [r2, #0]
}
 800651a:	bf00      	nop
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <LL_RCC_HSI_Disable>:
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_RCC_HSI_IsReady>:
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006554:	d101      	bne.n	800655a <LL_RCC_HSI_IsReady+0x18>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <LL_RCC_HSI_IsReady+0x1a>
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	061b      	lsls	r3, r3, #24
 800657c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006580:	4313      	orrs	r3, r2
 8006582:	604b      	str	r3, [r1, #4]
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <LL_RCC_HSI48_Enable>:
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800659c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_RCC_HSI48_Disable>:
{
 80065b2:	b480      	push	{r7}
 80065b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80065ca:	bf00      	nop
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <LL_RCC_HSI48_IsReady>:
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80065d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d101      	bne.n	80065ec <LL_RCC_HSI48_IsReady+0x18>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <LL_RCC_HSI48_IsReady+0x1a>
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <LL_RCC_LSE_Enable>:
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_RCC_LSE_Disable>:
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800661e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006626:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006632:	bf00      	nop
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <LL_RCC_LSE_EnableBypass>:
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006648:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800664c:	f043 0304 	orr.w	r3, r3, #4
 8006650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <LL_RCC_LSE_DisableBypass>:
{
 800665e:	b480      	push	{r7}
 8006660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800666e:	f023 0304 	bic.w	r3, r3, #4
 8006672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <LL_RCC_LSE_IsReady>:
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b02      	cmp	r3, #2
 8006692:	d101      	bne.n	8006698 <LL_RCC_LSE_IsReady+0x18>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <LL_RCC_LSE_IsReady+0x1a>
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <LL_RCC_LSI1_Enable>:
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80066a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80066bc:	bf00      	nop
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <LL_RCC_LSI1_Disable>:
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80066de:	bf00      	nop
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <LL_RCC_LSI1_IsReady>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80066ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d101      	bne.n	8006700 <LL_RCC_LSI1_IsReady+0x18>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <LL_RCC_LSI1_IsReady+0x1a>
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <LL_RCC_LSI2_Enable>:
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800671c:	f043 0304 	orr.w	r3, r3, #4
 8006720:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_RCC_LSI2_Disable>:
{
 800672e:	b480      	push	{r7}
 8006730:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800673a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800673e:	f023 0304 	bic.w	r3, r3, #4
 8006742:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006746:	bf00      	nop
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <LL_RCC_LSI2_IsReady>:
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b08      	cmp	r3, #8
 8006762:	d101      	bne.n	8006768 <LL_RCC_LSI2_IsReady+0x18>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <LL_RCC_LSI2_IsReady+0x1a>
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <LL_RCC_LSI2_SetTrimming>:
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800677c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006784:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <LL_RCC_MSI_Enable>:
{
 80067a2:	b480      	push	{r7}
 80067a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80067a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_RCC_MSI_Disable>:
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80067c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	6013      	str	r3, [r2, #0]
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <LL_RCC_MSI_IsReady>:
{
 80067de:	b480      	push	{r7}
 80067e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80067e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d101      	bne.n	80067f4 <LL_RCC_MSI_IsReady+0x16>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <LL_RCC_MSI_IsReady+0x18>
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <LL_RCC_MSI_SetRange>:
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006812:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <LL_RCC_MSI_GetRange>:
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800682e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006838:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2bb0      	cmp	r3, #176	@ 0xb0
 800683e:	d901      	bls.n	8006844 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006840:	23b0      	movs	r3, #176	@ 0xb0
 8006842:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006844:	687b      	ldr	r3, [r7, #4]
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800685a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800686c:	4313      	orrs	r3, r2
 800686e:	604b      	str	r3, [r1, #4]
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <LL_RCC_SetSysClkSource>:
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f023 0203 	bic.w	r2, r3, #3
 800688e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4313      	orrs	r3, r2
 8006896:	608b      	str	r3, [r1, #8]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <LL_RCC_GetSysClkSource>:
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 030c 	and.w	r3, r3, #12
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <LL_RCC_SetAHBPrescaler>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	608b      	str	r3, [r1, #8]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <LL_C2_RCC_SetAHBPrescaler>:
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80068ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80068f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <LL_RCC_SetAHB4Prescaler>:
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800691c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006920:	f023 020f 	bic.w	r2, r3, #15
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <LL_RCC_SetAPB1Prescaler>:
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006950:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4313      	orrs	r3, r2
 8006958:	608b      	str	r3, [r1, #8]
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <LL_RCC_SetAPB2Prescaler>:
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800696e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006978:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4313      	orrs	r3, r2
 8006980:	608b      	str	r3, [r1, #8]
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <LL_RCC_GetAHBPrescaler>:
{
 800698e:	b480      	push	{r7}
 8006990:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800699c:	4618      	mov	r0, r3
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <LL_C2_RCC_GetAHBPrescaler>:
{
 80069a6:	b480      	push	{r7}
 80069a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80069aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <LL_RCC_GetAHB4Prescaler>:
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <LL_RCC_GetAPB1Prescaler>:
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <LL_RCC_GetAPB2Prescaler>:
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80069f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a1e:	6013      	str	r3, [r2, #0]
}
 8006a20:	bf00      	nop
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a3c:	6013      	str	r3, [r2, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a5a:	d101      	bne.n	8006a60 <LL_RCC_PLL_IsReady+0x18>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <LL_RCC_PLL_IsReady+0x1a>
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006a86:	b480      	push	{r7}
 8006a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0303 	and.w	r3, r3, #3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae0:	d101      	bne.n	8006ae6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b06:	d101      	bne.n	8006b0c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b20:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b2c:	d101      	bne.n	8006b32 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b50:	d101      	bne.n	8006b56 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006b62:	b480      	push	{r7}
 8006b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b74:	d101      	bne.n	8006b7a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b08d      	sub	sp, #52	@ 0x34
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e363      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 808d 	beq.w	8006cc2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ba8:	f7ff fe7c 	bl	80068a4 <LL_RCC_GetSysClkSource>
 8006bac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bae:	f7ff ff82 	bl	8006ab6 <LL_RCC_PLL_GetMainSource>
 8006bb2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x3e>
 8006bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbc:	2b0c      	cmp	r3, #12
 8006bbe:	d147      	bne.n	8006c50 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d144      	bne.n	8006c50 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e347      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006bd6:	f7ff fe27 	bl	8006828 <LL_RCC_MSI_GetRange>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	d914      	bls.n	8006c0a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fd61 	bl	80076ac <RCC_SetFlashLatencyFromMSIRange>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e336      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fe01 	bl	8006800 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fe25 	bl	8006852 <LL_RCC_MSI_SetCalibTrimming>
 8006c08:	e013      	b.n	8006c32 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fdf6 	bl	8006800 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fe1a 	bl	8006852 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fd42 	bl	80076ac <RCC_SetFlashLatencyFromMSIRange>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e317      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006c32:	f000 fcc9 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 8006c36:	4603      	mov	r3, r0
 8006c38:	4aa4      	ldr	r2, [pc, #656]	@ (8006ecc <HAL_RCC_OscConfig+0x344>)
 8006c3a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c3c:	4ba4      	ldr	r3, [pc, #656]	@ (8006ed0 <HAL_RCC_OscConfig+0x348>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fc f911 	bl	8002e68 <HAL_InitTick>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d039      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e308      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01e      	beq.n	8006c96 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c58:	f7ff fda3 	bl	80067a2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c5c:	f7fc fb46 	bl	80032ec <HAL_GetTick>
 8006c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c64:	f7fc fb42 	bl	80032ec <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e2f5      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006c76:	f7ff fdb2 	bl	80067de <LL_RCC_MSI_IsReady>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0f1      	beq.n	8006c64 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fdbb 	bl	8006800 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fddf 	bl	8006852 <LL_RCC_MSI_SetCalibTrimming>
 8006c94:	e015      	b.n	8006cc2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c96:	f7ff fd93 	bl	80067c0 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c9a:	f7fc fb27 	bl	80032ec <HAL_GetTick>
 8006c9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ca2:	f7fc fb23 	bl	80032ec <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e2d6      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006cb4:	f7ff fd93 	bl	80067de <LL_RCC_MSI_IsReady>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f1      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x11a>
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006cc0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d047      	beq.n	8006d5e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cce:	f7ff fde9 	bl	80068a4 <LL_RCC_GetSysClkSource>
 8006cd2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cd4:	f7ff feef 	bl	8006ab6 <LL_RCC_PLL_GetMainSource>
 8006cd8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_OscConfig+0x164>
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	2b0c      	cmp	r3, #12
 8006ce4:	d108      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d134      	bne.n	8006d5e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e2b4      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d00:	d102      	bne.n	8006d08 <HAL_RCC_OscConfig+0x180>
 8006d02:	f7ff fbd0 	bl	80064a6 <LL_RCC_HSE_Enable>
 8006d06:	e001      	b.n	8006d0c <HAL_RCC_OscConfig+0x184>
 8006d08:	f7ff fbdc 	bl	80064c4 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d012      	beq.n	8006d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fc faea 	bl	80032ec <HAL_GetTick>
 8006d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d1c:	f7fc fae6 	bl	80032ec <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	@ 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e299      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006d2e:	f7ff fbd8 	bl	80064e2 <LL_RCC_HSE_IsReady>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f1      	beq.n	8006d1c <HAL_RCC_OscConfig+0x194>
 8006d38:	e011      	b.n	8006d5e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3a:	f7fc fad7 	bl	80032ec <HAL_GetTick>
 8006d3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006d40:	e008      	b.n	8006d54 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d42:	f7fc fad3 	bl	80032ec <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b64      	cmp	r3, #100	@ 0x64
 8006d4e:	d901      	bls.n	8006d54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e286      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006d54:	f7ff fbc5 	bl	80064e2 <LL_RCC_HSE_IsReady>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f1      	bne.n	8006d42 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d04c      	beq.n	8006e04 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d6a:	f7ff fd9b 	bl	80068a4 <LL_RCC_GetSysClkSource>
 8006d6e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d70:	f7ff fea1 	bl	8006ab6 <LL_RCC_PLL_GetMainSource>
 8006d74:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCC_OscConfig+0x200>
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b0c      	cmp	r3, #12
 8006d80:	d10e      	bne.n	8006da0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d10b      	bne.n	8006da0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e266      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fbe4 	bl	8006566 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006d9e:	e031      	b.n	8006e04 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d019      	beq.n	8006ddc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da8:	f7ff fbad 	bl	8006506 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fc fa9e 	bl	80032ec <HAL_GetTick>
 8006db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006db4:	f7fc fa9a 	bl	80032ec <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e24d      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006dc6:	f7ff fbbc 	bl	8006542 <LL_RCC_HSI_IsReady>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f1      	beq.n	8006db4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fbc6 	bl	8006566 <LL_RCC_HSI_SetCalibTrimming>
 8006dda:	e013      	b.n	8006e04 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ddc:	f7ff fba2 	bl	8006524 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fc fa84 	bl	80032ec <HAL_GetTick>
 8006de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006de8:	f7fc fa80 	bl	80032ec <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e233      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006dfa:	f7ff fba2 	bl	8006542 <LL_RCC_HSI_IsReady>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f1      	bne.n	8006de8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80a3 	beq.w	8006f64 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d076      	beq.n	8006f14 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d046      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006e32:	f7ff fc59 	bl	80066e8 <LL_RCC_LSI1_IsReady>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d113      	bne.n	8006e64 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006e3c:	f7ff fc32 	bl	80066a4 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e40:	f7fc fa54 	bl	80032ec <HAL_GetTick>
 8006e44:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006e48:	f7fc fa50 	bl	80032ec <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e203      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006e5a:	f7ff fc45 	bl	80066e8 <LL_RCC_LSI1_IsReady>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0f1      	beq.n	8006e48 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006e64:	f7ff fc52 	bl	800670c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fc fa40 	bl	80032ec <HAL_GetTick>
 8006e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006e70:	f7fc fa3c 	bl	80032ec <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e1ef      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006e82:	f7ff fc65 	bl	8006750 <LL_RCC_LSI2_IsReady>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f1      	beq.n	8006e70 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fc6f 	bl	8006774 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006e96:	f7ff fc16 	bl	80066c6 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9a:	f7fc fa27 	bl	80032ec <HAL_GetTick>
 8006e9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ea2:	f7fc fa23 	bl	80032ec <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e1d6      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006eb4:	f7ff fc18 	bl	80066e8 <LL_RCC_LSI1_IsReady>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f1      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x31a>
 8006ebe:	e051      	b.n	8006f64 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006ec0:	f7ff fbf0 	bl	80066a4 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fc fa12 	bl	80032ec <HAL_GetTick>
 8006ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006eca:	e00c      	b.n	8006ee6 <HAL_RCC_OscConfig+0x35e>
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ed4:	f7fc fa0a 	bl	80032ec <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e1bd      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006ee6:	f7ff fbff 	bl	80066e8 <LL_RCC_LSI1_IsReady>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f1      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006ef0:	f7ff fc1d 	bl	800672e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006ef6:	f7fc f9f9 	bl	80032ec <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e1ac      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006f08:	f7ff fc22 	bl	8006750 <LL_RCC_LSI2_IsReady>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x36e>
 8006f12:	e027      	b.n	8006f64 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006f14:	f7ff fc0b 	bl	800672e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f18:	f7fc f9e8 	bl	80032ec <HAL_GetTick>
 8006f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006f20:	f7fc f9e4 	bl	80032ec <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e197      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006f32:	f7ff fc0d 	bl	8006750 <LL_RCC_LSI2_IsReady>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f1      	bne.n	8006f20 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006f3c:	f7ff fbc3 	bl	80066c6 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f40:	f7fc f9d4 	bl	80032ec <HAL_GetTick>
 8006f44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006f48:	f7fc f9d0 	bl	80032ec <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e183      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006f5a:	f7ff fbc5 	bl	80066e8 <LL_RCC_LSI1_IsReady>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f1      	bne.n	8006f48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d05b      	beq.n	8007028 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f70:	4ba7      	ldr	r3, [pc, #668]	@ (8007210 <HAL_RCC_OscConfig+0x688>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d114      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006f7c:	f7ff f9a8 	bl	80062d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f80:	f7fc f9b4 	bl	80032ec <HAL_GetTick>
 8006f84:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f88:	f7fc f9b0 	bl	80032ec <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e163      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f9a:	4b9d      	ldr	r3, [pc, #628]	@ (8007210 <HAL_RCC_OscConfig+0x688>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d102      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x42c>
 8006fae:	f7ff fb23 	bl	80065f8 <LL_RCC_LSE_Enable>
 8006fb2:	e00c      	b.n	8006fce <HAL_RCC_OscConfig+0x446>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d104      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x43e>
 8006fbc:	f7ff fb3e 	bl	800663c <LL_RCC_LSE_EnableBypass>
 8006fc0:	f7ff fb1a 	bl	80065f8 <LL_RCC_LSE_Enable>
 8006fc4:	e003      	b.n	8006fce <HAL_RCC_OscConfig+0x446>
 8006fc6:	f7ff fb28 	bl	800661a <LL_RCC_LSE_Disable>
 8006fca:	f7ff fb48 	bl	800665e <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d014      	beq.n	8007000 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd6:	f7fc f989 	bl	80032ec <HAL_GetTick>
 8006fda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006fdc:	e00a      	b.n	8006ff4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fde:	f7fc f985 	bl	80032ec <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e136      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006ff4:	f7ff fb44 	bl	8006680 <LL_RCC_LSE_IsReady>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0ef      	beq.n	8006fde <HAL_RCC_OscConfig+0x456>
 8006ffe:	e013      	b.n	8007028 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007000:	f7fc f974 	bl	80032ec <HAL_GetTick>
 8007004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007006:	e00a      	b.n	800701e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007008:	f7fc f970 	bl	80032ec <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007016:	4293      	cmp	r3, r2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e121      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800701e:	f7ff fb2f 	bl	8006680 <LL_RCC_LSE_IsReady>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1ef      	bne.n	8007008 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d02c      	beq.n	800708e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d014      	beq.n	8007066 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800703c:	f7ff faa8 	bl	8006590 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007040:	f7fc f954 	bl	80032ec <HAL_GetTick>
 8007044:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007048:	f7fc f950 	bl	80032ec <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e103      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800705a:	f7ff fabb 	bl	80065d4 <LL_RCC_HSI48_IsReady>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f1      	beq.n	8007048 <HAL_RCC_OscConfig+0x4c0>
 8007064:	e013      	b.n	800708e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007066:	f7ff faa4 	bl	80065b2 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800706a:	f7fc f93f 	bl	80032ec <HAL_GetTick>
 800706e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007072:	f7fc f93b 	bl	80032ec <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e0ee      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007084:	f7ff faa6 	bl	80065d4 <LL_RCC_HSI48_IsReady>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f1      	bne.n	8007072 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80e4 	beq.w	8007260 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007098:	f7ff fc04 	bl	80068a4 <LL_RCC_GetSysClkSource>
 800709c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800709e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	f040 80b4 	bne.w	8007218 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0203 	and.w	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d123      	bne.n	8007106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d11c      	bne.n	8007106 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070d8:	429a      	cmp	r2, r3
 80070da:	d114      	bne.n	8007106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d10d      	bne.n	8007106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d106      	bne.n	8007106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d05d      	beq.n	80071c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d058      	beq.n	80071be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e0a1      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800711e:	f7ff fc84 	bl	8006a2a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007122:	f7fc f8e3 	bl	80032ec <HAL_GetTick>
 8007126:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800712a:	f7fc f8df 	bl	80032ec <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e092      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800713c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1ef      	bne.n	800712a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800714a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	4b30      	ldr	r3, [pc, #192]	@ (8007214 <HAL_RCC_OscConfig+0x68c>)
 8007152:	4013      	ands	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800715c:	4311      	orrs	r1, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007162:	0212      	lsls	r2, r2, #8
 8007164:	4311      	orrs	r1, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800716a:	4311      	orrs	r1, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007170:	4311      	orrs	r1, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007176:	430a      	orrs	r2, r1
 8007178:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800717c:	4313      	orrs	r3, r2
 800717e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007180:	f7ff fc44 	bl	8006a0c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800718e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007194:	f7fc f8aa 	bl	80032ec <HAL_GetTick>
 8007198:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800719c:	f7fc f8a6 	bl	80032ec <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e059      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0ef      	beq.n	800719c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071bc:	e050      	b.n	8007260 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e04f      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d147      	bne.n	8007260 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80071d0:	f7ff fc1c 	bl	8006a0c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071e4:	f7fc f882 	bl	80032ec <HAL_GetTick>
 80071e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fc f87e 	bl	80032ec <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e031      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0ef      	beq.n	80071ec <HAL_RCC_OscConfig+0x664>
 800720c:	e028      	b.n	8007260 <HAL_RCC_OscConfig+0x6d8>
 800720e:	bf00      	nop
 8007210:	58000400 	.word	0x58000400
 8007214:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d01e      	beq.n	800725c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800721e:	f7ff fc04 	bl	8006a2a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007222:	f7fc f863 	bl	80032ec <HAL_GetTick>
 8007226:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800722a:	f7fc f85f 	bl	80032ec <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e012      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800723c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1ef      	bne.n	800722a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800724a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007254:	4b05      	ldr	r3, [pc, #20]	@ (800726c <HAL_RCC_OscConfig+0x6e4>)
 8007256:	4013      	ands	r3, r2
 8007258:	60cb      	str	r3, [r1, #12]
 800725a:	e001      	b.n	8007260 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3734      	adds	r7, #52	@ 0x34
 8007266:	46bd      	mov	sp, r7
 8007268:	bd90      	pop	{r4, r7, pc}
 800726a:	bf00      	nop
 800726c:	eefefffc 	.word	0xeefefffc

08007270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e12d      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007284:	4b98      	ldr	r3, [pc, #608]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d91b      	bls.n	80072ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007292:	4b95      	ldr	r3, [pc, #596]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f023 0207 	bic.w	r2, r3, #7
 800729a:	4993      	ldr	r1, [pc, #588]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	4313      	orrs	r3, r2
 80072a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a2:	f7fc f823 	bl	80032ec <HAL_GetTick>
 80072a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072aa:	f7fc f81f 	bl	80032ec <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e111      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072bc:	4b8a      	ldr	r3, [pc, #552]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d1ef      	bne.n	80072aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d016      	beq.n	8007304 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff faee 	bl	80068bc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072e0:	f7fc f804 	bl	80032ec <HAL_GetTick>
 80072e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072e8:	f7fc f800 	bl	80032ec <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e0f2      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80072fa:	f7ff fbe8 	bl	8006ace <LL_RCC_IsActiveFlag_HPRE>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f1      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d016      	beq.n	800733e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff fae5 	bl	80068e4 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800731a:	f7fb ffe7 	bl	80032ec <HAL_GetTick>
 800731e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007320:	e008      	b.n	8007334 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007322:	f7fb ffe3 	bl	80032ec <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e0d5      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007334:	f7ff fbdd 	bl	8006af2 <LL_RCC_IsActiveFlag_C2HPRE>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f1      	beq.n	8007322 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fade 	bl	8006910 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007354:	f7fb ffca 	bl	80032ec <HAL_GetTick>
 8007358:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800735c:	f7fb ffc6 	bl	80032ec <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e0b8      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800736e:	f7ff fbd3 	bl	8006b18 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f1      	beq.n	800735c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d016      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff fad8 	bl	800693e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800738e:	f7fb ffad 	bl	80032ec <HAL_GetTick>
 8007392:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007394:	e008      	b.n	80073a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007396:	f7fb ffa9 	bl	80032ec <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e09b      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80073a8:	f7ff fbc9 	bl	8006b3e <LL_RCC_IsActiveFlag_PPRE1>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f1      	beq.n	8007396 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d017      	beq.n	80073ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff face 	bl	8006966 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80073ca:	f7fb ff8f 	bl	80032ec <HAL_GetTick>
 80073ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80073d2:	f7fb ff8b 	bl	80032ec <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e07d      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80073e4:	f7ff fbbd 	bl	8006b62 <LL_RCC_IsActiveFlag_PPRE2>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f1      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d043      	beq.n	8007482 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d106      	bne.n	8007410 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007402:	f7ff f86e 	bl	80064e2 <LL_RCC_HSE_IsReady>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d11e      	bne.n	800744a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e067      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b03      	cmp	r3, #3
 8007416:	d106      	bne.n	8007426 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007418:	f7ff fb16 	bl	8006a48 <LL_RCC_PLL_IsReady>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d113      	bne.n	800744a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e05c      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800742e:	f7ff f9d6 	bl	80067de <LL_RCC_MSI_IsReady>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d108      	bne.n	800744a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e051      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800743c:	f7ff f881 	bl	8006542 <LL_RCC_HSI_IsReady>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e04a      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fa14 	bl	800687c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007454:	f7fb ff4a 	bl	80032ec <HAL_GetTick>
 8007458:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745a:	e00a      	b.n	8007472 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800745c:	f7fb ff46 	bl	80032ec <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e036      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007472:	f7ff fa17 	bl	80068a4 <LL_RCC_GetSysClkSource>
 8007476:	4602      	mov	r2, r0
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	429a      	cmp	r2, r3
 8007480:	d1ec      	bne.n	800745c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007482:	4b19      	ldr	r3, [pc, #100]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d21b      	bcs.n	80074c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007490:	4b15      	ldr	r3, [pc, #84]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f023 0207 	bic.w	r2, r3, #7
 8007498:	4913      	ldr	r1, [pc, #76]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	4313      	orrs	r3, r2
 800749e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a0:	f7fb ff24 	bl	80032ec <HAL_GetTick>
 80074a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80074a8:	f7fb ff20 	bl	80032ec <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e012      	b.n	80074e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ba:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <HAL_RCC_ClockConfig+0x278>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d1ef      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80074c8:	f000 f87e 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 80074cc:	4603      	mov	r3, r0
 80074ce:	4a07      	ldr	r2, [pc, #28]	@ (80074ec <HAL_RCC_ClockConfig+0x27c>)
 80074d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80074d2:	f7fb ff17 	bl	8003304 <HAL_GetTickPrio>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fb fcc5 	bl	8002e68 <HAL_InitTick>
 80074de:	4603      	mov	r3, r0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	58004000 	.word	0x58004000
 80074ec:	2000000c 	.word	0x2000000c

080074f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f6:	f7ff f9d5 	bl	80068a4 <LL_RCC_GetSysClkSource>
 80074fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007502:	f7ff f991 	bl	8006828 <LL_RCC_MSI_GetRange>
 8007506:	4603      	mov	r3, r0
 8007508:	091b      	lsrs	r3, r3, #4
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	4a2b      	ldr	r2, [pc, #172]	@ (80075bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8007510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e04b      	b.n	80075b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b04      	cmp	r3, #4
 800751c:	d102      	bne.n	8007524 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800751e:	4b28      	ldr	r3, [pc, #160]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e045      	b.n	80075b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b08      	cmp	r3, #8
 8007528:	d10a      	bne.n	8007540 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800752a:	f7fe ffaa 	bl	8006482 <LL_RCC_HSE_IsEnabledDiv2>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d102      	bne.n	800753a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007534:	4b22      	ldr	r3, [pc, #136]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e03a      	b.n	80075b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800753a:	4b22      	ldr	r3, [pc, #136]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	e037      	b.n	80075b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007540:	f7ff fab9 	bl	8006ab6 <LL_RCC_PLL_GetMainSource>
 8007544:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d003      	beq.n	8007554 <HAL_RCC_GetSysClockFreq+0x64>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d003      	beq.n	800755a <HAL_RCC_GetSysClockFreq+0x6a>
 8007552:	e00d      	b.n	8007570 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007554:	4b1a      	ldr	r3, [pc, #104]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007556:	60bb      	str	r3, [r7, #8]
        break;
 8007558:	e015      	b.n	8007586 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800755a:	f7fe ff92 	bl	8006482 <LL_RCC_HSE_IsEnabledDiv2>
 800755e:	4603      	mov	r3, r0
 8007560:	2b01      	cmp	r3, #1
 8007562:	d102      	bne.n	800756a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007564:	4b16      	ldr	r3, [pc, #88]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007566:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007568:	e00d      	b.n	8007586 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800756a:	4b16      	ldr	r3, [pc, #88]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800756c:	60bb      	str	r3, [r7, #8]
        break;
 800756e:	e00a      	b.n	8007586 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007570:	f7ff f95a 	bl	8006828 <LL_RCC_MSI_GetRange>
 8007574:	4603      	mov	r3, r0
 8007576:	091b      	lsrs	r3, r3, #4
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	4a0f      	ldr	r2, [pc, #60]	@ (80075bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800757e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007582:	60bb      	str	r3, [r7, #8]
        break;
 8007584:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007586:	f7ff fa71 	bl	8006a6c <LL_RCC_PLL_GetN>
 800758a:	4602      	mov	r2, r0
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	fb03 f402 	mul.w	r4, r3, r2
 8007592:	f7ff fa84 	bl	8006a9e <LL_RCC_PLL_GetDivider>
 8007596:	4603      	mov	r3, r0
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	3301      	adds	r3, #1
 800759c:	fbb4 f4f3 	udiv	r4, r4, r3
 80075a0:	f7ff fa71 	bl	8006a86 <LL_RCC_PLL_GetR>
 80075a4:	4603      	mov	r3, r0
 80075a6:	0f5b      	lsrs	r3, r3, #29
 80075a8:	3301      	adds	r3, #1
 80075aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80075ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80075b0:	68fb      	ldr	r3, [r7, #12]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd90      	pop	{r4, r7, pc}
 80075ba:	bf00      	nop
 80075bc:	08010048 	.word	0x08010048
 80075c0:	00f42400 	.word	0x00f42400
 80075c4:	01e84800 	.word	0x01e84800

080075c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c8:	b598      	push	{r3, r4, r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80075cc:	f7ff ff90 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 80075d0:	4604      	mov	r4, r0
 80075d2:	f7ff f9dc 	bl	800698e <LL_RCC_GetAHBPrescaler>
 80075d6:	4603      	mov	r3, r0
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	4a03      	ldr	r2, [pc, #12]	@ (80075ec <HAL_RCC_GetHCLKFreq+0x24>)
 80075e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	bd98      	pop	{r3, r4, r7, pc}
 80075ec:	0800ffe8 	.word	0x0800ffe8

080075f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f0:	b598      	push	{r3, r4, r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80075f4:	f7ff ffe8 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 80075f8:	4604      	mov	r4, r0
 80075fa:	f7ff f9ef 	bl	80069dc <LL_RCC_GetAPB1Prescaler>
 80075fe:	4603      	mov	r3, r0
 8007600:	0a1b      	lsrs	r3, r3, #8
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	4a04      	ldr	r2, [pc, #16]	@ (8007618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd98      	pop	{r3, r4, r7, pc}
 8007618:	08010028 	.word	0x08010028

0800761c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800761c:	b598      	push	{r3, r4, r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007620:	f7ff ffd2 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 8007624:	4604      	mov	r4, r0
 8007626:	f7ff f9e5 	bl	80069f4 <LL_RCC_GetAPB2Prescaler>
 800762a:	4603      	mov	r3, r0
 800762c:	0adb      	lsrs	r3, r3, #11
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	4a04      	ldr	r2, [pc, #16]	@ (8007644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007638:	f003 031f 	and.w	r3, r3, #31
 800763c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007640:	4618      	mov	r0, r3
 8007642:	bd98      	pop	{r3, r4, r7, pc}
 8007644:	08010028 	.word	0x08010028

08007648 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	226f      	movs	r2, #111	@ 0x6f
 8007656:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8007658:	f7ff f924 	bl	80068a4 <LL_RCC_GetSysClkSource>
 800765c:	4602      	mov	r2, r0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8007662:	f7ff f994 	bl	800698e <LL_RCC_GetAHBPrescaler>
 8007666:	4602      	mov	r2, r0
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800766c:	f7ff f9b6 	bl	80069dc <LL_RCC_GetAPB1Prescaler>
 8007670:	4602      	mov	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8007676:	f7ff f9bd 	bl	80069f4 <LL_RCC_GetAPB2Prescaler>
 800767a:	4602      	mov	r2, r0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8007680:	f7ff f991 	bl	80069a6 <LL_C2_RCC_GetAHBPrescaler>
 8007684:	4602      	mov	r2, r0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800768a:	f7ff f999 	bl	80069c0 <LL_RCC_GetAHB4Prescaler>
 800768e:	4602      	mov	r2, r0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007694:	4b04      	ldr	r3, [pc, #16]	@ (80076a8 <HAL_RCC_GetClockConfig+0x60>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0207 	and.w	r2, r3, #7
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	601a      	str	r2, [r3, #0]
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	58004000 	.word	0x58004000

080076ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80076ac:	b590      	push	{r4, r7, lr}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2bb0      	cmp	r3, #176	@ 0xb0
 80076b8:	d903      	bls.n	80076c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80076ba:	4b15      	ldr	r3, [pc, #84]	@ (8007710 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e007      	b.n	80076d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	4a11      	ldr	r2, [pc, #68]	@ (8007710 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80076cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80076d2:	f7ff f975 	bl	80069c0 <LL_RCC_GetAHB4Prescaler>
 80076d6:	4603      	mov	r3, r0
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	4a0d      	ldr	r2, [pc, #52]	@ (8007714 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80076e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007718 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	0c9c      	lsrs	r4, r3, #18
 80076f6:	f7fe fdfb 	bl	80062f0 <HAL_PWREx_GetVoltageRange>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4619      	mov	r1, r3
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 f80c 	bl	800771c <RCC_SetFlashLatency>
 8007704:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	bd90      	pop	{r4, r7, pc}
 800770e:	bf00      	nop
 8007710:	08010048 	.word	0x08010048
 8007714:	0800ffe8 	.word	0x0800ffe8
 8007718:	431bde83 	.word	0x431bde83

0800771c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800771c:	b590      	push	{r4, r7, lr}
 800771e:	b093      	sub	sp, #76	@ 0x4c
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007726:	4b37      	ldr	r3, [pc, #220]	@ (8007804 <RCC_SetFlashLatency+0xe8>)
 8007728:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800772c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800772e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007732:	4a35      	ldr	r2, [pc, #212]	@ (8007808 <RCC_SetFlashLatency+0xec>)
 8007734:	f107 031c 	add.w	r3, r7, #28
 8007738:	ca07      	ldmia	r2, {r0, r1, r2}
 800773a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800773e:	4b33      	ldr	r3, [pc, #204]	@ (800780c <RCC_SetFlashLatency+0xf0>)
 8007740:	f107 040c 	add.w	r4, r7, #12
 8007744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800774a:	2300      	movs	r3, #0
 800774c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007754:	d11a      	bne.n	800778c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007756:	2300      	movs	r3, #0
 8007758:	643b      	str	r3, [r7, #64]	@ 0x40
 800775a:	e013      	b.n	8007784 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800775c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	3348      	adds	r3, #72	@ 0x48
 8007762:	443b      	add	r3, r7
 8007764:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	429a      	cmp	r2, r3
 800776c:	d807      	bhi.n	800777e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800776e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3348      	adds	r3, #72	@ 0x48
 8007774:	443b      	add	r3, r7
 8007776:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800777a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800777c:	e020      	b.n	80077c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800777e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007780:	3301      	adds	r3, #1
 8007782:	643b      	str	r3, [r7, #64]	@ 0x40
 8007784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007786:	2b03      	cmp	r3, #3
 8007788:	d9e8      	bls.n	800775c <RCC_SetFlashLatency+0x40>
 800778a:	e019      	b.n	80077c0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800778c:	2300      	movs	r3, #0
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007790:	e013      	b.n	80077ba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	3348      	adds	r3, #72	@ 0x48
 8007798:	443b      	add	r3, r7
 800779a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d807      	bhi.n	80077b4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80077a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	3348      	adds	r3, #72	@ 0x48
 80077aa:	443b      	add	r3, r7
 80077ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80077b0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80077b2:	e005      	b.n	80077c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80077b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b6:	3301      	adds	r3, #1
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d9e8      	bls.n	8007792 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80077c0:	4b13      	ldr	r3, [pc, #76]	@ (8007810 <RCC_SetFlashLatency+0xf4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f023 0207 	bic.w	r2, r3, #7
 80077c8:	4911      	ldr	r1, [pc, #68]	@ (8007810 <RCC_SetFlashLatency+0xf4>)
 80077ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077cc:	4313      	orrs	r3, r2
 80077ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077d0:	f7fb fd8c 	bl	80032ec <HAL_GetTick>
 80077d4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80077d6:	e008      	b.n	80077ea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80077d8:	f7fb fd88 	bl	80032ec <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e007      	b.n	80077fa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80077ea:	4b09      	ldr	r3, [pc, #36]	@ (8007810 <RCC_SetFlashLatency+0xf4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d1ef      	bne.n	80077d8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	374c      	adds	r7, #76	@ 0x4c
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd90      	pop	{r4, r7, pc}
 8007802:	bf00      	nop
 8007804:	0800ff5c 	.word	0x0800ff5c
 8007808:	0800ff6c 	.word	0x0800ff6c
 800780c:	0800ff78 	.word	0x0800ff78
 8007810:	58004000 	.word	0x58004000

08007814 <LL_RCC_LSE_IsEnabled>:
{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <LL_RCC_LSE_IsEnabled+0x18>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <LL_RCC_LSE_IsEnabled+0x1a>
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <LL_RCC_LSE_IsReady>:
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800783c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d101      	bne.n	8007850 <LL_RCC_LSE_IsReady+0x18>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <LL_RCC_LSE_IsReady+0x1a>
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <LL_RCC_MSI_EnablePLLMode>:
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800786a:	f043 0304 	orr.w	r3, r3, #4
 800786e:	6013      	str	r3, [r2, #0]
}
 8007870:	bf00      	nop
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <LL_RCC_SetRFWKPClockSource>:
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800788a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800788e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4313      	orrs	r3, r2
 8007896:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <LL_RCC_SetSMPSClockSource>:
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80078ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	f023 0203 	bic.w	r2, r3, #3
 80078b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4313      	orrs	r3, r2
 80078c0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <LL_RCC_SetSMPSPrescaler>:
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80078d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80078e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <LL_RCC_SetUSARTClockSource>:
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80078fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007906:	f023 0203 	bic.w	r2, r3, #3
 800790a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4313      	orrs	r3, r2
 8007912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <LL_RCC_SetLPUARTClockSource>:
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800792a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007932:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <LL_RCC_SetI2CClockSource>:
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800795a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007966:	43db      	mvns	r3, r3
 8007968:	401a      	ands	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007972:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <LL_RCC_SetLPTIMClockSource>:
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007994:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	0c1b      	lsrs	r3, r3, #16
 800799c:	041b      	lsls	r3, r3, #16
 800799e:	43db      	mvns	r3, r3
 80079a0:	401a      	ands	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <LL_RCC_SetSAIClockSource>:
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80079c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <LL_RCC_SetRNGClockSource>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80079f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80079fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <LL_RCC_SetCLK48ClockSource>:
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <LL_RCC_SetUSBClockSource>:
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ffe3 	bl	8007a14 <LL_RCC_SetCLK48ClockSource>
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <LL_RCC_SetADCClockSource>:
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007a6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <LL_RCC_SetRTCClockSource>:
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <LL_RCC_GetRTCClockSource>:
{
 8007aae:	b480      	push	{r7}
 8007ab0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <LL_RCC_ForceBackupDomainReset>:
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007ae0:	bf00      	nop
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <LL_RCC_ReleaseBackupDomainReset>:
{
 8007aea:	b480      	push	{r7}
 8007aec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007afe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007b02:	bf00      	nop
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <LL_RCC_PLLSAI1_Enable>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b1e:	6013      	str	r3, [r2, #0]
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <LL_RCC_PLLSAI1_Disable>:
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b3c:	6013      	str	r3, [r2, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <LL_RCC_PLLSAI1_IsReady>:
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b5a:	d101      	bne.n	8007b60 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007b74:	2300      	movs	r3, #0
 8007b76:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007b78:	2300      	movs	r3, #0
 8007b7a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d034      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b90:	d021      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007b92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b96:	d81b      	bhi.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b9c:	d01d      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ba2:	d815      	bhi.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bac:	d110      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bbc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007bbe:	e00d      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 f94d 	bl	8007e64 <RCCEx_PLLSAI1_ConfigNP>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007bce:	e005      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	77fb      	strb	r3, [r7, #31]
        break;
 8007bd4:	e002      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bdc:	7ffb      	ldrb	r3, [r7, #31]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d105      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fee8 	bl	80079bc <LL_RCC_SetSAIClockSource>
 8007bec:	e001      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bee:	7ffb      	ldrb	r3, [r7, #31]
 8007bf0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d046      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007bfe:	f7ff ff56 	bl	8007aae <LL_RCC_GetRTCClockSource>
 8007c02:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d03c      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007c0e:	f7fe fb5f 	bl	80062d0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d105      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff ff30 	bl	8007a82 <LL_RCC_SetRTCClockSource>
 8007c22:	e02e      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007c2e:	f7ff ff4b 	bl	8007ac8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007c32:	f7ff ff5a 	bl	8007aea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007c44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007c4e:	f7ff fde1 	bl	8007814 <LL_RCC_LSE_IsEnabled>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d114      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c58:	f7fb fb48 	bl	80032ec <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007c5e:	e00b      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c60:	f7fb fb44 	bl	80032ec <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d902      	bls.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	77fb      	strb	r3, [r7, #31]
              break;
 8007c76:	e004      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007c78:	f7ff fdde 	bl	8007838 <LL_RCC_LSE_IsReady>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d1ee      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
 8007c84:	77bb      	strb	r3, [r7, #30]
 8007c86:	e001      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c88:	7ffb      	ldrb	r3, [r7, #31]
 8007c8a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fe2a 	bl	80078f6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fe35 	bl	8007922 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fe5d 	bl	8007988 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fe52 	bl	8007988 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fe2a 	bl	800794e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fe1f 	bl	800794e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d022      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff fe8d 	bl	8007a40 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d2e:	d107      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d3e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d48:	d10b      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f8e3 	bl	8007f1a <RCCEx_PLLSAI1_ConfigNQ>
 8007d54:	4603      	mov	r3, r0
 8007d56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007d58:	7ffb      	ldrb	r3, [r7, #31]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007d5e:	7ffb      	ldrb	r3, [r7, #31]
 8007d60:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d02b      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d76:	d008      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d80:	d003      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d105      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fe2a 	bl	80079e8 <LL_RCC_SetRNGClockSource>
 8007d94:	e00a      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	2000      	movs	r0, #0
 8007da2:	f7ff fe21 	bl	80079e8 <LL_RCC_SetRNGClockSource>
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fe34 	bl	8007a14 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007db4:	d107      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dc4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d022      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fe3d 	bl	8007a56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de4:	d107      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007df4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dfe:	d10b      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 f8e3 	bl	8007fd0 <RCCEx_PLLSAI1_ConfigNR>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007e0e:	7ffb      	ldrb	r3, [r7, #31]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007e14:	7ffb      	ldrb	r3, [r7, #31]
 8007e16:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff fd26 	bl	800787a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff fd45 	bl	80078ce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff fd2c 	bl	80078a6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007e4e:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007e5c:	f7ff fcfe 	bl	800785c <LL_RCC_MSI_EnablePLLMode>
}
 8007e60:	bf00      	nop
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007e70:	f7ff fe5b 	bl	8007b2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e74:	f7fb fa3a 	bl	80032ec <HAL_GetTick>
 8007e78:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e7a:	e009      	b.n	8007e90 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e7c:	f7fb fa36 	bl	80032ec <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d902      	bls.n	8007e90 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8e:	e004      	b.n	8007e9a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e90:	f7ff fe5a 	bl	8007b48 <LL_RCC_PLLSAI1_IsReady>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f0      	bne.n	8007e7c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d137      	bne.n	8007f10 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007ece:	f7ff fe1d 	bl	8007b0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed2:	f7fb fa0b 	bl	80032ec <HAL_GetTick>
 8007ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ed8:	e009      	b.n	8007eee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007eda:	f7fb fa07 	bl	80032ec <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d902      	bls.n	8007eee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	73fb      	strb	r3, [r7, #15]
        break;
 8007eec:	e004      	b.n	8007ef8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007eee:	f7ff fe2b 	bl	8007b48 <LL_RCC_PLLSAI1_IsReady>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d1f0      	bne.n	8007eda <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d108      	bne.n	8007f10 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007f26:	f7ff fe00 	bl	8007b2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f2a:	f7fb f9df 	bl	80032ec <HAL_GetTick>
 8007f2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f30:	e009      	b.n	8007f46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f32:	f7fb f9db 	bl	80032ec <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d902      	bls.n	8007f46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	73fb      	strb	r3, [r7, #15]
      break;
 8007f44:	e004      	b.n	8007f50 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f46:	f7ff fdff 	bl	8007b48 <LL_RCC_PLLSAI1_IsReady>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d137      	bne.n	8007fc6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f80:	4313      	orrs	r3, r2
 8007f82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007f84:	f7ff fdc2 	bl	8007b0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f88:	f7fb f9b0 	bl	80032ec <HAL_GetTick>
 8007f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f8e:	e009      	b.n	8007fa4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f90:	f7fb f9ac 	bl	80032ec <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d902      	bls.n	8007fa4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8007fa2:	e004      	b.n	8007fae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007fa4:	f7ff fdd0 	bl	8007b48 <LL_RCC_PLLSAI1_IsReady>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d1f0      	bne.n	8007f90 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d108      	bne.n	8007fc6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007fdc:	f7ff fda5 	bl	8007b2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fe0:	f7fb f984 	bl	80032ec <HAL_GetTick>
 8007fe4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007fe6:	e009      	b.n	8007ffc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fe8:	f7fb f980 	bl	80032ec <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d902      	bls.n	8007ffc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffa:	e004      	b.n	8008006 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007ffc:	f7ff fda4 	bl	8007b48 <LL_RCC_PLLSAI1_IsReady>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f0      	bne.n	8007fe8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d137      	bne.n	800807c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800800c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008020:	4313      	orrs	r3, r2
 8008022:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008036:	4313      	orrs	r3, r2
 8008038:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800803a:	f7ff fd67 	bl	8007b0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800803e:	f7fb f955 	bl	80032ec <HAL_GetTick>
 8008042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008044:	e009      	b.n	800805a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008046:	f7fb f951 	bl	80032ec <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d902      	bls.n	800805a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	73fb      	strb	r3, [r7, #15]
        break;
 8008058:	e004      	b.n	8008064 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800805a:	f7ff fd75 	bl	8007b48 <LL_RCC_PLLSAI1_IsReady>
 800805e:	4603      	mov	r3, r0
 8008060:	2b01      	cmp	r3, #1
 8008062:	d1f0      	bne.n	8008046 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800806a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800806e:	691a      	ldr	r2, [r3, #16]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008078:	4313      	orrs	r3, r2
 800807a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e09f      	b.n	80081da <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fa fd5e 	bl	8002b70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80080bc:	4b49      	ldr	r3, [pc, #292]	@ (80081e4 <HAL_RTC_Init+0x15c>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d07e      	beq.n	80081c6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	22ca      	movs	r2, #202	@ 0xca
 80080ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2253      	movs	r2, #83	@ 0x53
 80080d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fbab 	bl	8008834 <RTC_EnterInitMode>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	22ff      	movs	r2, #255	@ 0xff
 80080ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2204      	movs	r2, #4
 80080f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e067      	b.n	80081ca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800810c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68d2      	ldr	r2, [r2, #12]
 8008134:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6919      	ldr	r1, [r3, #16]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	041a      	lsls	r2, r3, #16
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008158:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0203 	bic.w	r2, r2, #3
 8008168:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	69da      	ldr	r2, [r3, #28]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d113      	bne.n	80081b8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fb29 	bl	80087e8 <HAL_RTC_WaitForSynchro>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00d      	beq.n	80081b8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	22ff      	movs	r2, #255	@ 0xff
 80081a2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2204      	movs	r2, #4
 80081a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e010      	b.n	80081da <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	22ff      	movs	r2, #255	@ 0xff
 80081be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
 80081c4:	e001      	b.n	80081ca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	40002800 	.word	0x40002800

080081e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081e8:	b590      	push	{r4, r7, lr}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d101      	bne.n	8008202 <HAL_RTC_SetTime+0x1a>
 80081fe:	2302      	movs	r3, #2
 8008200:	e0b2      	b.n	8008368 <HAL_RTC_SetTime+0x180>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2202      	movs	r2, #2
 800820e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d126      	bne.n	8008266 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d102      	bne.n	800822c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2200      	movs	r2, #0
 800822a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fb29 	bl	8008888 <RTC_ByteToBcd2>
 8008236:	4603      	mov	r3, r0
 8008238:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fb22 	bl	8008888 <RTC_ByteToBcd2>
 8008244:	4603      	mov	r3, r0
 8008246:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008248:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	789b      	ldrb	r3, [r3, #2]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fb1a 	bl	8008888 <RTC_ByteToBcd2>
 8008254:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008256:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	78db      	ldrb	r3, [r3, #3]
 800825e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e018      	b.n	8008298 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008286:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800828c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	78db      	ldrb	r3, [r3, #3]
 8008292:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008294:	4313      	orrs	r3, r2
 8008296:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	22ca      	movs	r2, #202	@ 0xca
 800829e:	625a      	str	r2, [r3, #36]	@ 0x24
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2253      	movs	r2, #83	@ 0x53
 80082a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fac3 	bl	8008834 <RTC_EnterInitMode>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00d      	beq.n	80082d0 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	22ff      	movs	r2, #255	@ 0xff
 80082ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2204      	movs	r2, #4
 80082c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e04b      	b.n	8008368 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80082da:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80082de:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80082ee:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6899      	ldr	r1, [r3, #8]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	431a      	orrs	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008316:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d113      	bne.n	800834e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fa5e 	bl	80087e8 <HAL_RTC_WaitForSynchro>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	22ff      	movs	r2, #255	@ 0xff
 8008338:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2204      	movs	r2, #4
 800833e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e00c      	b.n	8008368 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	22ff      	movs	r2, #255	@ 0xff
 8008354:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8008366:	2300      	movs	r3, #0
  }
}
 8008368:	4618      	mov	r0, r3
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	bd90      	pop	{r4, r7, pc}

08008370 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_RTC_SetDate+0x1a>
 8008386:	2302      	movs	r3, #2
 8008388:	e09c      	b.n	80084c4 <HAL_RTC_SetDate+0x154>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2202      	movs	r2, #2
 8008396:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10e      	bne.n	80083be <HAL_RTC_SetDate+0x4e>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	785b      	ldrb	r3, [r3, #1]
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d008      	beq.n	80083be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	f023 0310 	bic.w	r3, r3, #16
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	330a      	adds	r3, #10
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d11c      	bne.n	80083fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	78db      	ldrb	r3, [r3, #3]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fa5d 	bl	8008888 <RTC_ByteToBcd2>
 80083ce:	4603      	mov	r3, r0
 80083d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fa56 	bl	8008888 <RTC_ByteToBcd2>
 80083dc:	4603      	mov	r3, r0
 80083de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80083e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	789b      	ldrb	r3, [r3, #2]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fa4e 	bl	8008888 <RTC_ByteToBcd2>
 80083ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80083ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]
 80083fc:	e00e      	b.n	800841c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	78db      	ldrb	r3, [r3, #3]
 8008402:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800840a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008410:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	22ca      	movs	r2, #202	@ 0xca
 8008422:	625a      	str	r2, [r3, #36]	@ 0x24
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2253      	movs	r2, #83	@ 0x53
 800842a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fa01 	bl	8008834 <RTC_EnterInitMode>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00d      	beq.n	8008454 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	22ff      	movs	r2, #255	@ 0xff
 800843e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2204      	movs	r2, #4
 8008444:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e037      	b.n	80084c4 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800845e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008462:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008472:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	d113      	bne.n	80084aa <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 f9b0 	bl	80087e8 <HAL_RTC_WaitForSynchro>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00d      	beq.n	80084aa <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	22ff      	movs	r2, #255	@ 0xff
 8008494:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2204      	movs	r2, #4
 800849a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e00c      	b.n	80084c4 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	22ff      	movs	r2, #255	@ 0xff
 80084b0:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80084c2:	2300      	movs	r3, #0
  }
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	371c      	adds	r7, #28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd90      	pop	{r4, r7, pc}

080084cc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b089      	sub	sp, #36	@ 0x24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_RTC_SetAlarm_IT+0x1a>
 80084e2:	2302      	movs	r3, #2
 80084e4:	e129      	b.n	800873a <HAL_RTC_SetAlarm_IT+0x26e>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2202      	movs	r2, #2
 80084f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d137      	bne.n	800856c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d102      	bne.n	8008510 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f9b7 	bl	8008888 <RTC_ByteToBcd2>
 800851a:	4603      	mov	r3, r0
 800851c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f9b0 	bl	8008888 <RTC_ByteToBcd2>
 8008528:	4603      	mov	r3, r0
 800852a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800852c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	789b      	ldrb	r3, [r3, #2]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f9a8 	bl	8008888 <RTC_ByteToBcd2>
 8008538:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800853a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	78db      	ldrb	r3, [r3, #3]
 8008542:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008544:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f99a 	bl	8008888 <RTC_ByteToBcd2>
 8008554:	4603      	mov	r3, r0
 8008556:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008558:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008560:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008566:	4313      	orrs	r3, r2
 8008568:	61fb      	str	r3, [r7, #28]
 800856a:	e023      	b.n	80085b4 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2200      	movs	r2, #0
 800857e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800858c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008592:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	78db      	ldrb	r3, [r3, #3]
 8008598:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800859a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085a2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80085a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80085aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80085b0:	4313      	orrs	r3, r2
 80085b2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	4313      	orrs	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	22ca      	movs	r2, #202	@ 0xca
 80085c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2253      	movs	r2, #83	@ 0x53
 80085ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d8:	d14a      	bne.n	8008670 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085e8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80085fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80085fc:	f7fa fe76 	bl	80032ec <HAL_GetTick>
 8008600:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008602:	e015      	b.n	8008630 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008604:	f7fa fe72 	bl	80032ec <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008612:	d90d      	bls.n	8008630 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	22ff      	movs	r2, #255	@ 0xff
 800861a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2203      	movs	r2, #3
 8008620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e084      	b.n	800873a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0e2      	beq.n	8008604 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69ba      	ldr	r2, [r7, #24]
 800864c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800865c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800866c:	609a      	str	r2, [r3, #8]
 800866e:	e049      	b.n	8008704 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800867e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	b2da      	uxtb	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008690:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008692:	f7fa fe2b 	bl	80032ec <HAL_GetTick>
 8008696:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008698:	e015      	b.n	80086c6 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800869a:	f7fa fe27 	bl	80032ec <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086a8:	d90d      	bls.n	80086c6 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	22ff      	movs	r2, #255	@ 0xff
 80086b0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2203      	movs	r2, #3
 80086b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e039      	b.n	800873a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0e2      	beq.n	800869a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69fa      	ldr	r2, [r7, #28]
 80086da:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689a      	ldr	r2, [r3, #8]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086f2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008702:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008704:	4b0f      	ldr	r3, [pc, #60]	@ (8008744 <HAL_RTC_SetAlarm_IT+0x278>)
 8008706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870a:	4a0e      	ldr	r2, [pc, #56]	@ (8008744 <HAL_RTC_SetAlarm_IT+0x278>)
 800870c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008714:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <HAL_RTC_SetAlarm_IT+0x278>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a0a      	ldr	r2, [pc, #40]	@ (8008744 <HAL_RTC_SetAlarm_IT+0x278>)
 800871a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800871e:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	22ff      	movs	r2, #255	@ 0xff
 8008726:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3724      	adds	r7, #36	@ 0x24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd90      	pop	{r4, r7, pc}
 8008742:	bf00      	nop
 8008744:	58000800 	.word	0x58000800

08008748 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d012      	beq.n	8008784 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f831 	bl	80087d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	b2da      	uxtb	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008782:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d012      	beq.n	80087b8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f891 	bl	80088c8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80087b6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80087b8:	4b05      	ldr	r3, [pc, #20]	@ (80087d0 <HAL_RTC_AlarmIRQHandler+0x88>)
 80087ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80087be:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	58000800 	.word	0x58000800

080087d4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80087fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008800:	f7fa fd74 	bl	80032ec <HAL_GetTick>
 8008804:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008806:	e009      	b.n	800881c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008808:	f7fa fd70 	bl	80032ec <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008816:	d901      	bls.n	800881c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e007      	b.n	800882c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0ee      	beq.n	8008808 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d119      	bne.n	800887e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008852:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008854:	f7fa fd4a 	bl	80032ec <HAL_GetTick>
 8008858:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800885a:	e009      	b.n	8008870 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800885c:	f7fa fd46 	bl	80032ec <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800886a:	d901      	bls.n	8008870 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e007      	b.n	8008880 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0ee      	beq.n	800885c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800889a:	e005      	b.n	80088a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80088a2:	7afb      	ldrb	r3, [r7, #11]
 80088a4:	3b0a      	subs	r3, #10
 80088a6:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	2b09      	cmp	r3, #9
 80088ac:	d8f6      	bhi.n	800889c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	7afb      	ldrb	r3, [r7, #11]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b2db      	uxtb	r3, r3
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e0aa      	b.n	8008a44 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7f9 ff6e 	bl	80027e0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0201 	bic.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008926:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008936:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008946:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008950:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008960:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d012      	beq.n	8008990 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d107      	bne.n	8008982 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800897e:	609a      	str	r2, [r3, #8]
 8008980:	e006      	b.n	8008990 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800898e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d104      	bne.n	80089a2 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80089b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695a      	ldr	r2, [r3, #20]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d8:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80089de:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e4:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80089f0:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80089f2:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089fc:	d110      	bne.n	8008a20 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8008a0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a0e:	d107      	bne.n	8008a20 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008a1e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e095      	b.n	8008b8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d108      	bne.n	8008a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a6e:	d009      	beq.n	8008a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	61da      	str	r2, [r3, #28]
 8008a76:	e005      	b.n	8008a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fa f89c 	bl	8002bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ac4:	d902      	bls.n	8008acc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e002      	b.n	8008ad2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ad0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ada:	d007      	beq.n	8008aec <HAL_SPI_Init+0xa0>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ae4:	d002      	beq.n	8008aec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2e:	ea42 0103 	orr.w	r1, r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	0c1b      	lsrs	r3, r3, #16
 8008b48:	f003 0204 	and.w	r2, r3, #4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b68:	ea42 0103 	orr.w	r1, r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e049      	b.n	8008c38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7fa f889 	bl	8002cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f000 f9f5 	bl	8008fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d001      	beq.n	8008c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e036      	b.n	8008cc6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0201 	orr.w	r2, r2, #1
 8008c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a17      	ldr	r2, [pc, #92]	@ (8008cd4 <HAL_TIM_Base_Start_IT+0x94>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d004      	beq.n	8008c84 <HAL_TIM_Base_Start_IT+0x44>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c82:	d115      	bne.n	8008cb0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689a      	ldr	r2, [r3, #8]
 8008c8a:	4b13      	ldr	r3, [pc, #76]	@ (8008cd8 <HAL_TIM_Base_Start_IT+0x98>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b06      	cmp	r3, #6
 8008c94:	d015      	beq.n	8008cc2 <HAL_TIM_Base_Start_IT+0x82>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c9c:	d011      	beq.n	8008cc2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f042 0201 	orr.w	r2, r2, #1
 8008cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cae:	e008      	b.n	8008cc2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f042 0201 	orr.w	r2, r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	e000      	b.n	8008cc4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40012c00 	.word	0x40012c00
 8008cd8:	00010007 	.word	0x00010007

08008cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d020      	beq.n	8008d40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01b      	beq.n	8008d40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0202 	mvn.w	r2, #2
 8008d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f92b 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008d2c:	e005      	b.n	8008d3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f91d 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f92e 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d020      	beq.n	8008d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f003 0304 	and.w	r3, r3, #4
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01b      	beq.n	8008d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f06f 0204 	mvn.w	r2, #4
 8008d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f905 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008d78:	e005      	b.n	8008d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8f7 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f908 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d020      	beq.n	8008dd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f003 0308 	and.w	r3, r3, #8
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01b      	beq.n	8008dd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f06f 0208 	mvn.w	r2, #8
 8008da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2204      	movs	r2, #4
 8008dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f8df 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008dc4:	e005      	b.n	8008dd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8d1 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f8e2 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 0310 	and.w	r3, r3, #16
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d020      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f003 0310 	and.w	r3, r3, #16
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01b      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f06f 0210 	mvn.w	r2, #16
 8008df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2208      	movs	r2, #8
 8008dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f8b9 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008e10:	e005      	b.n	8008e1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f8ab 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f8bc 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00c      	beq.n	8008e48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d007      	beq.n	8008e48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0201 	mvn.w	r2, #1
 8008e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7f9 fb1a 	bl	800247c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00c      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 faf5 	bl	8009460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00c      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d007      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 faed 	bl	8009474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00c      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d007      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f876 	bl	8008faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00c      	beq.n	8008ee2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f06f 0220 	mvn.w	r2, #32
 8008eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fab5 	bl	800944c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e031      	b.n	8008f66 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f8c3 	bl	80090a0 <TIM_SlaveTimer_SetConfig>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d009      	beq.n	8008f34 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e018      	b.n	8008f66 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f42:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f52:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a30      	ldr	r2, [pc, #192]	@ (8009094 <TIM_Base_SetConfig+0xd4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d003      	beq.n	8008fe0 <TIM_Base_SetConfig+0x20>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fde:	d108      	bne.n	8008ff2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a27      	ldr	r2, [pc, #156]	@ (8009094 <TIM_Base_SetConfig+0xd4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00b      	beq.n	8009012 <TIM_Base_SetConfig+0x52>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009000:	d007      	beq.n	8009012 <TIM_Base_SetConfig+0x52>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a24      	ldr	r2, [pc, #144]	@ (8009098 <TIM_Base_SetConfig+0xd8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d003      	beq.n	8009012 <TIM_Base_SetConfig+0x52>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a23      	ldr	r2, [pc, #140]	@ (800909c <TIM_Base_SetConfig+0xdc>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d108      	bne.n	8009024 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4313      	orrs	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a12      	ldr	r2, [pc, #72]	@ (8009094 <TIM_Base_SetConfig+0xd4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d007      	beq.n	8009060 <TIM_Base_SetConfig+0xa0>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a11      	ldr	r2, [pc, #68]	@ (8009098 <TIM_Base_SetConfig+0xd8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d003      	beq.n	8009060 <TIM_Base_SetConfig+0xa0>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a10      	ldr	r2, [pc, #64]	@ (800909c <TIM_Base_SetConfig+0xdc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d103      	bne.n	8009068 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b01      	cmp	r3, #1
 8009078:	d105      	bne.n	8009086 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f023 0201 	bic.w	r2, r3, #1
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	611a      	str	r2, [r3, #16]
  }
}
 8009086:	bf00      	nop
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800

080090a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80090bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4313      	orrs	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	2b70      	cmp	r3, #112	@ 0x70
 80090f0:	d01a      	beq.n	8009128 <TIM_SlaveTimer_SetConfig+0x88>
 80090f2:	2b70      	cmp	r3, #112	@ 0x70
 80090f4:	d860      	bhi.n	80091b8 <TIM_SlaveTimer_SetConfig+0x118>
 80090f6:	2b60      	cmp	r3, #96	@ 0x60
 80090f8:	d054      	beq.n	80091a4 <TIM_SlaveTimer_SetConfig+0x104>
 80090fa:	2b60      	cmp	r3, #96	@ 0x60
 80090fc:	d85c      	bhi.n	80091b8 <TIM_SlaveTimer_SetConfig+0x118>
 80090fe:	2b50      	cmp	r3, #80	@ 0x50
 8009100:	d046      	beq.n	8009190 <TIM_SlaveTimer_SetConfig+0xf0>
 8009102:	2b50      	cmp	r3, #80	@ 0x50
 8009104:	d858      	bhi.n	80091b8 <TIM_SlaveTimer_SetConfig+0x118>
 8009106:	2b40      	cmp	r3, #64	@ 0x40
 8009108:	d019      	beq.n	800913e <TIM_SlaveTimer_SetConfig+0x9e>
 800910a:	2b40      	cmp	r3, #64	@ 0x40
 800910c:	d854      	bhi.n	80091b8 <TIM_SlaveTimer_SetConfig+0x118>
 800910e:	2b30      	cmp	r3, #48	@ 0x30
 8009110:	d055      	beq.n	80091be <TIM_SlaveTimer_SetConfig+0x11e>
 8009112:	2b30      	cmp	r3, #48	@ 0x30
 8009114:	d850      	bhi.n	80091b8 <TIM_SlaveTimer_SetConfig+0x118>
 8009116:	2b20      	cmp	r3, #32
 8009118:	d051      	beq.n	80091be <TIM_SlaveTimer_SetConfig+0x11e>
 800911a:	2b20      	cmp	r3, #32
 800911c:	d84c      	bhi.n	80091b8 <TIM_SlaveTimer_SetConfig+0x118>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d04d      	beq.n	80091be <TIM_SlaveTimer_SetConfig+0x11e>
 8009122:	2b10      	cmp	r3, #16
 8009124:	d04b      	beq.n	80091be <TIM_SlaveTimer_SetConfig+0x11e>
 8009126:	e047      	b.n	80091b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009138:	f000 f8a6 	bl	8009288 <TIM_ETR_SetConfig>
      break;
 800913c:	e040      	b.n	80091c0 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b05      	cmp	r3, #5
 8009144:	d101      	bne.n	800914a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e03b      	b.n	80091c2 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6a1a      	ldr	r2, [r3, #32]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009170:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	4313      	orrs	r3, r2
 800917c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	621a      	str	r2, [r3, #32]
      break;
 800918e:	e017      	b.n	80091c0 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800919c:	461a      	mov	r2, r3
 800919e:	f000 f814 	bl	80091ca <TIM_TI1_ConfigInputStage>
      break;
 80091a2:	e00d      	b.n	80091c0 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091b0:	461a      	mov	r2, r3
 80091b2:	f000 f839 	bl	8009228 <TIM_TI2_ConfigInputStage>
      break;
 80091b6:	e003      	b.n	80091c0 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	75fb      	strb	r3, [r7, #23]
      break;
 80091bc:	e000      	b.n	80091c0 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 80091be:	bf00      	nop
  }

  return status;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b087      	sub	sp, #28
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	f023 0201 	bic.w	r2, r3, #1
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f023 030a 	bic.w	r3, r3, #10
 8009206:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	621a      	str	r2, [r3, #32]
}
 800921c:	bf00      	nop
 800921e:	371c      	adds	r7, #28
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	f023 0210 	bic.w	r2, r3, #16
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	031b      	lsls	r3, r3, #12
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009264:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	621a      	str	r2, [r3, #32]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	021a      	lsls	r2, r3, #8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	609a      	str	r2, [r3, #8]
}
 80092bc:	bf00      	nop
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092dc:	2302      	movs	r3, #2
 80092de:	e04a      	b.n	8009376 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a1f      	ldr	r2, [pc, #124]	@ (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d108      	bne.n	800931c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009310:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a12      	ldr	r2, [pc, #72]	@ (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009348:	d10c      	bne.n	8009364 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	4313      	orrs	r3, r2
 800935a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40012c00 	.word	0x40012c00

08009388 <HAL_TIMEx_RemapConfig>:
  *         (*)  Value not defined in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpaf1;

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_TIMEx_RemapConfig+0x18>
 800939c:	2302      	movs	r3, #2
 800939e:	e04d      	b.n	800943c <HAL_TIMEx_RemapConfig+0xb4>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Read TIMx_OR */
  tmpor = READ_REG(htim->Instance->OR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ae:	60bb      	str	r3, [r7, #8]

  /* Read TIMx_AF1 */
  tmpaf1 = READ_REG(htim->Instance->AF1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a22      	ldr	r2, [pc, #136]	@ (8009448 <HAL_TIMEx_RemapConfig+0xc0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d004      	beq.n	80093cc <HAL_TIMEx_RemapConfig+0x44>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ca:	d115      	bne.n	80093f8 <HAL_TIMEx_RemapConfig+0x70>
  {
    if ((Remap & TIM1_AF1_ETRSEL) != (uint32_t)RESET)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	f403 33e0 	and.w	r3, r3, #114688	@ 0x1c000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d008      	beq.n	80093e8 <HAL_TIMEx_RemapConfig+0x60>
    {
      /* COMP1 output or COMP2 output connected to ETR input */
      MODIFY_REG(tmpaf1, TIM1_AF1_ETRSEL, (Remap & TIM1_AF1_ETRSEL));
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 32e0 	bic.w	r2, r3, #114688	@ 0x1c000
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f403 33e0 	and.w	r3, r3, #114688	@ 0x1c000
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	e003      	b.n	80093f0 <HAL_TIMEx_RemapConfig+0x68>
    }
    else
    {
      /* ETR legacy mode */
      MODIFY_REG(tmpaf1, TIM1_AF1_ETRSEL, 0U);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f423 33e0 	bic.w	r3, r3, #114688	@ 0x1c000
 80093ee:	60fb      	str	r3, [r7, #12]
    }

    /* Set TIMx_AF1 */
    WRITE_REG(htim->Instance->AF1, tmpaf1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Set other remapping capabilities */
  MODIFY_REG(tmpor, TIM_GET_OR_MASK(htim->Instance), (Remap & (~TIM1_AF1_ETRSEL)));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a12      	ldr	r2, [pc, #72]	@ (8009448 <HAL_TIMEx_RemapConfig+0xc0>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00a      	beq.n	8009418 <HAL_TIMEx_RemapConfig+0x90>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800940a:	d102      	bne.n	8009412 <HAL_TIMEx_RemapConfig+0x8a>
 800940c:	f06f 030f 	mvn.w	r3, #15
 8009410:	e004      	b.n	800941c <HAL_TIMEx_RemapConfig+0x94>
 8009412:	f06f 0303 	mvn.w	r3, #3
 8009416:	e001      	b.n	800941c <HAL_TIMEx_RemapConfig+0x94>
 8009418:	f06f 0313 	mvn.w	r3, #19
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	401a      	ands	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	f423 33e0 	bic.w	r3, r3, #114688	@ 0x1c000
 8009426:	4313      	orrs	r3, r2
 8009428:	60bb      	str	r3, [r7, #8]

  /* Set TIMx_OR */
  WRITE_REG(htim->Instance->OR, tmpor);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	40012c00 	.word	0x40012c00

0800944c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <LL_RCC_GetUSARTClockSource>:
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009494:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4013      	ands	r3, r2
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <LL_RCC_GetLPUARTClockSource>:
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80094b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4013      	ands	r3, r2
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e042      	b.n	8009560 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7f9 fa03 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2224      	movs	r2, #36	@ 0x24
 80094f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fe0a 	bl	800a12c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fbdf 	bl	8009cdc <UART_SetConfig>
 800951e:	4603      	mov	r3, r0
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e01b      	b.n	8009560 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fe89 	bl	800a270 <UART_CheckIdleState>
 800955e:	4603      	mov	r3, r0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e04a      	b.n	8009610 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7f9 f9b3 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2224      	movs	r2, #36	@ 0x24
 8009596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0201 	bic.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fdba 	bl	800a12c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fb8f 	bl	8009cdc <UART_SetConfig>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d101      	bne.n	80095c8 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e023      	b.n	8009610 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80095e6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0208 	orr.w	r2, r2, #8
 80095f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fe31 	bl	800a270 <UART_CheckIdleState>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b0ba      	sub	sp, #232	@ 0xe8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800963e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009642:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009646:	4013      	ands	r3, r2
 8009648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800964c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d11b      	bne.n	800968c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d015      	beq.n	800968c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	d105      	bne.n	8009678 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800966c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8300 	beq.w	8009c82 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
      }
      return;
 800968a:	e2fa      	b.n	8009c82 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800968c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8123 	beq.w	80098dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009696:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800969a:	4b8d      	ldr	r3, [pc, #564]	@ (80098d0 <HAL_UART_IRQHandler+0x2b8>)
 800969c:	4013      	ands	r3, r2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096a6:	4b8b      	ldr	r3, [pc, #556]	@ (80098d4 <HAL_UART_IRQHandler+0x2bc>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8116 	beq.w	80098dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d011      	beq.n	80096e0 <HAL_UART_IRQHandler+0xc8>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2201      	movs	r2, #1
 80096ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d6:	f043 0201 	orr.w	r2, r3, #1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d011      	beq.n	8009710 <HAL_UART_IRQHandler+0xf8>
 80096ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2202      	movs	r2, #2
 80096fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009706:	f043 0204 	orr.w	r2, r3, #4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d011      	beq.n	8009740 <HAL_UART_IRQHandler+0x128>
 800971c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2204      	movs	r2, #4
 800972e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009736:	f043 0202 	orr.w	r2, r3, #2
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b00      	cmp	r3, #0
 800974a:	d017      	beq.n	800977c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800974c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b00      	cmp	r3, #0
 8009756:	d105      	bne.n	8009764 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800975c:	4b5c      	ldr	r3, [pc, #368]	@ (80098d0 <HAL_UART_IRQHandler+0x2b8>)
 800975e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2208      	movs	r2, #8
 800976a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009772:	f043 0208 	orr.w	r2, r3, #8
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800977c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009784:	2b00      	cmp	r3, #0
 8009786:	d012      	beq.n	80097ae <HAL_UART_IRQHandler+0x196>
 8009788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800978c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00c      	beq.n	80097ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800979c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a4:	f043 0220 	orr.w	r2, r3, #32
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 8266 	beq.w	8009c86 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d013      	beq.n	80097ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d105      	bne.n	80097de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d007      	beq.n	80097ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009802:	2b40      	cmp	r3, #64	@ 0x40
 8009804:	d005      	beq.n	8009812 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800980a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800980e:	2b00      	cmp	r3, #0
 8009810:	d054      	beq.n	80098bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fe43 	bl	800a49e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009822:	2b40      	cmp	r3, #64	@ 0x40
 8009824:	d146      	bne.n	80098b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3308      	adds	r3, #8
 800982c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800983c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3308      	adds	r3, #8
 800984e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800985e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800986a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1d9      	bne.n	8009826 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009878:	2b00      	cmp	r3, #0
 800987a:	d017      	beq.n	80098ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009882:	4a15      	ldr	r2, [pc, #84]	@ (80098d8 <HAL_UART_IRQHandler+0x2c0>)
 8009884:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800988c:	4618      	mov	r0, r3
 800988e:	f7fa febc 	bl	800460a <HAL_DMA_Abort_IT>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d019      	beq.n	80098cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80098a6:	4610      	mov	r0, r2
 80098a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098aa:	e00f      	b.n	80098cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f9ff 	bl	8009cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b2:	e00b      	b.n	80098cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f9fb 	bl	8009cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ba:	e007      	b.n	80098cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f9f7 	bl	8009cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80098ca:	e1dc      	b.n	8009c86 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098cc:	bf00      	nop
    return;
 80098ce:	e1da      	b.n	8009c86 <HAL_UART_IRQHandler+0x66e>
 80098d0:	10000001 	.word	0x10000001
 80098d4:	04000120 	.word	0x04000120
 80098d8:	0800a56b 	.word	0x0800a56b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	f040 8170 	bne.w	8009bc6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ea:	f003 0310 	and.w	r3, r3, #16
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 8169 	beq.w	8009bc6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f8:	f003 0310 	and.w	r3, r3, #16
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 8162 	beq.w	8009bc6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2210      	movs	r2, #16
 8009908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	f040 80d8 	bne.w	8009aca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 80af 	beq.w	8009a90 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800993c:	429a      	cmp	r2, r3
 800993e:	f080 80a7 	bcs.w	8009a90 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009948:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	f040 8087 	bne.w	8009a6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800997c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800998a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800998e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1da      	bne.n	8009960 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80099e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e1      	bne.n	80099aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e3      	bne.n	80099e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a3c:	f023 0310 	bic.w	r3, r3, #16
 8009a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e4      	bne.n	8009a2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fa fd6f 	bl	800454c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2202      	movs	r2, #2
 8009a72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f91b 	bl	8009cc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a8e:	e0fc      	b.n	8009c8a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	f040 80f5 	bne.w	8009c8a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	f040 80eb 	bne.w	8009c8a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f8fe 	bl	8009cc4 <HAL_UARTEx_RxEventCallback>
      return;
 8009ac8:	e0df      	b.n	8009c8a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80d1 	beq.w	8009c8e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80cc 	beq.w	8009c8e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b20:	e841 2300 	strex	r3, r2, [r1]
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e4      	bne.n	8009af6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3308      	adds	r3, #8
 8009b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b42:	f023 0301 	bic.w	r3, r3, #1
 8009b46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b54:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e1      	bne.n	8009b2c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f023 0310 	bic.w	r3, r3, #16
 8009b90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	69b9      	ldr	r1, [r7, #24]
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	617b      	str	r3, [r7, #20]
   return(result);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e4      	bne.n	8009b7c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f880 	bl	8009cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bc4:	e063      	b.n	8009c8e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00e      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x5d8>
 8009bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d008      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009be6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fcfb 	bl	800a5e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bee:	e051      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d014      	beq.n	8009c26 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d105      	bne.n	8009c14 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d03a      	beq.n	8009c92 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	4798      	blx	r3
    }
    return;
 8009c24:	e035      	b.n	8009c92 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <HAL_UART_IRQHandler+0x62e>
 8009c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fca5 	bl	800a58e <UART_EndTransmit_IT>
    return;
 8009c44:	e026      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <HAL_UART_IRQHandler+0x64e>
 8009c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fcd4 	bl	800a60c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c64:	e016      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d010      	beq.n	8009c94 <HAL_UART_IRQHandler+0x67c>
 8009c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da0c      	bge.n	8009c94 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fcbc 	bl	800a5f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c80:	e008      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
      return;
 8009c82:	bf00      	nop
 8009c84:	e006      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
    return;
 8009c86:	bf00      	nop
 8009c88:	e004      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
      return;
 8009c8a:	bf00      	nop
 8009c8c:	e002      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
      return;
 8009c8e:	bf00      	nop
 8009c90:	e000      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
    return;
 8009c92:	bf00      	nop
  }
}
 8009c94:	37e8      	adds	r7, #232	@ 0xe8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop

08009c9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ce0:	b08c      	sub	sp, #48	@ 0x30
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4baf      	ldr	r3, [pc, #700]	@ (8009fc8 <UART_SetConfig+0x2ec>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	68da      	ldr	r2, [r3, #12]
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4aa4      	ldr	r2, [pc, #656]	@ (8009fcc <UART_SetConfig+0x2f0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d004      	beq.n	8009d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d44:	4313      	orrs	r3, r2
 8009d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009d52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	6812      	ldr	r2, [r2, #0]
 8009d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d66:	f023 010f 	bic.w	r1, r3, #15
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a95      	ldr	r2, [pc, #596]	@ (8009fd0 <UART_SetConfig+0x2f4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d125      	bne.n	8009dcc <UART_SetConfig+0xf0>
 8009d80:	2003      	movs	r0, #3
 8009d82:	f7ff fb81 	bl	8009488 <LL_RCC_GetUSARTClockSource>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d81b      	bhi.n	8009dc4 <UART_SetConfig+0xe8>
 8009d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d94 <UART_SetConfig+0xb8>)
 8009d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d92:	bf00      	nop
 8009d94:	08009da5 	.word	0x08009da5
 8009d98:	08009db5 	.word	0x08009db5
 8009d9c:	08009dad 	.word	0x08009dad
 8009da0:	08009dbd 	.word	0x08009dbd
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009daa:	e042      	b.n	8009e32 <UART_SetConfig+0x156>
 8009dac:	2302      	movs	r3, #2
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db2:	e03e      	b.n	8009e32 <UART_SetConfig+0x156>
 8009db4:	2304      	movs	r3, #4
 8009db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dba:	e03a      	b.n	8009e32 <UART_SetConfig+0x156>
 8009dbc:	2308      	movs	r3, #8
 8009dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dc2:	e036      	b.n	8009e32 <UART_SetConfig+0x156>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dca:	e032      	b.n	8009e32 <UART_SetConfig+0x156>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a7e      	ldr	r2, [pc, #504]	@ (8009fcc <UART_SetConfig+0x2f0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d12a      	bne.n	8009e2c <UART_SetConfig+0x150>
 8009dd6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009dda:	f7ff fb65 	bl	80094a8 <LL_RCC_GetLPUARTClockSource>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009de4:	d01a      	beq.n	8009e1c <UART_SetConfig+0x140>
 8009de6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009dea:	d81b      	bhi.n	8009e24 <UART_SetConfig+0x148>
 8009dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009df0:	d00c      	beq.n	8009e0c <UART_SetConfig+0x130>
 8009df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009df6:	d815      	bhi.n	8009e24 <UART_SetConfig+0x148>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <UART_SetConfig+0x128>
 8009dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e00:	d008      	beq.n	8009e14 <UART_SetConfig+0x138>
 8009e02:	e00f      	b.n	8009e24 <UART_SetConfig+0x148>
 8009e04:	2300      	movs	r3, #0
 8009e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e0a:	e012      	b.n	8009e32 <UART_SetConfig+0x156>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e12:	e00e      	b.n	8009e32 <UART_SetConfig+0x156>
 8009e14:	2304      	movs	r3, #4
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e1a:	e00a      	b.n	8009e32 <UART_SetConfig+0x156>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e22:	e006      	b.n	8009e32 <UART_SetConfig+0x156>
 8009e24:	2310      	movs	r3, #16
 8009e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e2a:	e002      	b.n	8009e32 <UART_SetConfig+0x156>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a65      	ldr	r2, [pc, #404]	@ (8009fcc <UART_SetConfig+0x2f0>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	f040 8097 	bne.w	8009f6c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e42:	2b08      	cmp	r3, #8
 8009e44:	d823      	bhi.n	8009e8e <UART_SetConfig+0x1b2>
 8009e46:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <UART_SetConfig+0x170>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e8f 	.word	0x08009e8f
 8009e54:	08009e79 	.word	0x08009e79
 8009e58:	08009e8f 	.word	0x08009e8f
 8009e5c:	08009e7f 	.word	0x08009e7f
 8009e60:	08009e8f 	.word	0x08009e8f
 8009e64:	08009e8f 	.word	0x08009e8f
 8009e68:	08009e8f 	.word	0x08009e8f
 8009e6c:	08009e87 	.word	0x08009e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e70:	f7fd fbbe 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 8009e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e76:	e010      	b.n	8009e9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e78:	4b56      	ldr	r3, [pc, #344]	@ (8009fd4 <UART_SetConfig+0x2f8>)
 8009e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e7c:	e00d      	b.n	8009e9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e7e:	f7fd fb37 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 8009e82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e84:	e009      	b.n	8009e9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e86:	f248 0306 	movw	r3, #32774	@ 0x8006
 8009e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e8c:	e005      	b.n	8009e9a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 812b 	beq.w	800a0f8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea6:	4a4c      	ldr	r2, [pc, #304]	@ (8009fd8 <UART_SetConfig+0x2fc>)
 8009ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eac:	461a      	mov	r2, r3
 8009eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	4413      	add	r3, r2
 8009ec0:	69ba      	ldr	r2, [r7, #24]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d305      	bcc.n	8009ed2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d903      	bls.n	8009eda <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ed8:	e10e      	b.n	800a0f8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009edc:	2200      	movs	r2, #0
 8009ede:	60bb      	str	r3, [r7, #8]
 8009ee0:	60fa      	str	r2, [r7, #12]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8009fd8 <UART_SetConfig+0x2fc>)
 8009ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	2200      	movs	r2, #0
 8009ef0:	603b      	str	r3, [r7, #0]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ef8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009efc:	f7f6 fe7c 	bl	8000bf8 <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4610      	mov	r0, r2
 8009f06:	4619      	mov	r1, r3
 8009f08:	f04f 0200 	mov.w	r2, #0
 8009f0c:	f04f 0300 	mov.w	r3, #0
 8009f10:	020b      	lsls	r3, r1, #8
 8009f12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f16:	0202      	lsls	r2, r0, #8
 8009f18:	6979      	ldr	r1, [r7, #20]
 8009f1a:	6849      	ldr	r1, [r1, #4]
 8009f1c:	0849      	lsrs	r1, r1, #1
 8009f1e:	2000      	movs	r0, #0
 8009f20:	460c      	mov	r4, r1
 8009f22:	4605      	mov	r5, r0
 8009f24:	eb12 0804 	adds.w	r8, r2, r4
 8009f28:	eb43 0905 	adc.w	r9, r3, r5
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	469a      	mov	sl, r3
 8009f34:	4693      	mov	fp, r2
 8009f36:	4652      	mov	r2, sl
 8009f38:	465b      	mov	r3, fp
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 fe5b 	bl	8000bf8 <__aeabi_uldivmod>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4613      	mov	r3, r2
 8009f48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f50:	d308      	bcc.n	8009f64 <UART_SetConfig+0x288>
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f58:	d204      	bcs.n	8009f64 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6a3a      	ldr	r2, [r7, #32]
 8009f60:	60da      	str	r2, [r3, #12]
 8009f62:	e0c9      	b.n	800a0f8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f6a:	e0c5      	b.n	800a0f8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	69db      	ldr	r3, [r3, #28]
 8009f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f74:	d16d      	bne.n	800a052 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009f76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b07      	cmp	r3, #7
 8009f7e:	d82d      	bhi.n	8009fdc <UART_SetConfig+0x300>
 8009f80:	a201      	add	r2, pc, #4	@ (adr r2, 8009f88 <UART_SetConfig+0x2ac>)
 8009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f86:	bf00      	nop
 8009f88:	08009fa9 	.word	0x08009fa9
 8009f8c:	08009fb1 	.word	0x08009fb1
 8009f90:	08009fdd 	.word	0x08009fdd
 8009f94:	08009fb7 	.word	0x08009fb7
 8009f98:	08009fdd 	.word	0x08009fdd
 8009f9c:	08009fdd 	.word	0x08009fdd
 8009fa0:	08009fdd 	.word	0x08009fdd
 8009fa4:	08009fbf 	.word	0x08009fbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fa8:	f7fd fb38 	bl	800761c <HAL_RCC_GetPCLK2Freq>
 8009fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fae:	e01b      	b.n	8009fe8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fb0:	4b08      	ldr	r3, [pc, #32]	@ (8009fd4 <UART_SetConfig+0x2f8>)
 8009fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009fb4:	e018      	b.n	8009fe8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fb6:	f7fd fa9b 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 8009fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fbc:	e014      	b.n	8009fe8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fbe:	f248 0306 	movw	r3, #32774	@ 0x8006
 8009fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009fc4:	e010      	b.n	8009fe8 <UART_SetConfig+0x30c>
 8009fc6:	bf00      	nop
 8009fc8:	cfff69f3 	.word	0xcfff69f3
 8009fcc:	40008000 	.word	0x40008000
 8009fd0:	40013800 	.word	0x40013800
 8009fd4:	00f42400 	.word	0x00f42400
 8009fd8:	08010088 	.word	0x08010088
      default:
        pclk = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009fe6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 8084 	beq.w	800a0f8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff4:	4a4b      	ldr	r2, [pc, #300]	@ (800a124 <UART_SetConfig+0x448>)
 8009ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a002:	005a      	lsls	r2, r3, #1
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	085b      	lsrs	r3, r3, #1
 800a00a:	441a      	add	r2, r3
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	fbb2 f3f3 	udiv	r3, r2, r3
 800a014:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	2b0f      	cmp	r3, #15
 800a01a:	d916      	bls.n	800a04a <UART_SetConfig+0x36e>
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a022:	d212      	bcs.n	800a04a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	b29b      	uxth	r3, r3
 800a028:	f023 030f 	bic.w	r3, r3, #15
 800a02c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	085b      	lsrs	r3, r3, #1
 800a032:	b29b      	uxth	r3, r3
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	b29a      	uxth	r2, r3
 800a03a:	8bfb      	ldrh	r3, [r7, #30]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	8bfa      	ldrh	r2, [r7, #30]
 800a046:	60da      	str	r2, [r3, #12]
 800a048:	e056      	b.n	800a0f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a050:	e052      	b.n	800a0f8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a052:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a056:	3b01      	subs	r3, #1
 800a058:	2b07      	cmp	r3, #7
 800a05a:	d822      	bhi.n	800a0a2 <UART_SetConfig+0x3c6>
 800a05c:	a201      	add	r2, pc, #4	@ (adr r2, 800a064 <UART_SetConfig+0x388>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a085 	.word	0x0800a085
 800a068:	0800a08d 	.word	0x0800a08d
 800a06c:	0800a0a3 	.word	0x0800a0a3
 800a070:	0800a093 	.word	0x0800a093
 800a074:	0800a0a3 	.word	0x0800a0a3
 800a078:	0800a0a3 	.word	0x0800a0a3
 800a07c:	0800a0a3 	.word	0x0800a0a3
 800a080:	0800a09b 	.word	0x0800a09b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a084:	f7fd faca 	bl	800761c <HAL_RCC_GetPCLK2Freq>
 800a088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a08a:	e010      	b.n	800a0ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a08c:	4b26      	ldr	r3, [pc, #152]	@ (800a128 <UART_SetConfig+0x44c>)
 800a08e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a090:	e00d      	b.n	800a0ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a092:	f7fd fa2d 	bl	80074f0 <HAL_RCC_GetSysClockFreq>
 800a096:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a098:	e009      	b.n	800a0ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a09a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800a09e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0a0:	e005      	b.n	800a0ae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0ac:	bf00      	nop
    }

    if (pclk != 0U)
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d021      	beq.n	800a0f8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a124 <UART_SetConfig+0x448>)
 800a0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	085b      	lsrs	r3, r3, #1
 800a0cc:	441a      	add	r2, r3
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d909      	bls.n	800a0f2 <UART_SetConfig+0x416>
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0e4:	d205      	bcs.n	800a0f2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60da      	str	r2, [r3, #12]
 800a0f0:	e002      	b.n	800a0f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2201      	movs	r2, #1
 800a104:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2200      	movs	r2, #0
 800a10c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2200      	movs	r2, #0
 800a112:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a114:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3730      	adds	r7, #48	@ 0x30
 800a11c:	46bd      	mov	sp, r7
 800a11e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a122:	bf00      	nop
 800a124:	08010088 	.word	0x08010088
 800a128:	00f42400 	.word	0x00f42400

0800a12c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00a      	beq.n	800a156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00a      	beq.n	800a178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00a      	beq.n	800a19a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d01a      	beq.n	800a242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a22a:	d10a      	bne.n	800a242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	605a      	str	r2, [r3, #4]
  }
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b098      	sub	sp, #96	@ 0x60
 800a274:	af02      	add	r7, sp, #8
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a280:	f7f9 f834 	bl	80032ec <HAL_GetTick>
 800a284:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0308 	and.w	r3, r3, #8
 800a290:	2b08      	cmp	r3, #8
 800a292:	d12f      	bne.n	800a2f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a294:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a29c:	2200      	movs	r2, #0
 800a29e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f88e 	bl	800a3c4 <UART_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d022      	beq.n	800a2f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e6      	bne.n	800a2ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e063      	b.n	800a3bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d149      	bne.n	800a396 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a302:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a30a:	2200      	movs	r2, #0
 800a30c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f857 	bl	800a3c4 <UART_WaitOnFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d03c      	beq.n	800a396 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	623b      	str	r3, [r7, #32]
   return(result);
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a33a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a33c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e6      	bne.n	800a31c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3308      	adds	r3, #8
 800a354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f023 0301 	bic.w	r3, r3, #1
 800a364:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3308      	adds	r3, #8
 800a36c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a36e:	61fa      	str	r2, [r7, #28]
 800a370:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	69b9      	ldr	r1, [r7, #24]
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	617b      	str	r3, [r7, #20]
   return(result);
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e5      	bne.n	800a34e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2220      	movs	r2, #32
 800a386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e012      	b.n	800a3bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2220      	movs	r2, #32
 800a39a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3758      	adds	r7, #88	@ 0x58
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3d4:	e04f      	b.n	800a476 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3dc:	d04b      	beq.n	800a476 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3de:	f7f8 ff85 	bl	80032ec <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d302      	bcc.n	800a3f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e04e      	b.n	800a496 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0304 	and.w	r3, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	d037      	beq.n	800a476 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2b80      	cmp	r3, #128	@ 0x80
 800a40a:	d034      	beq.n	800a476 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b40      	cmp	r3, #64	@ 0x40
 800a410:	d031      	beq.n	800a476 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b08      	cmp	r3, #8
 800a41e:	d110      	bne.n	800a442 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2208      	movs	r2, #8
 800a426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 f838 	bl	800a49e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2208      	movs	r2, #8
 800a432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e029      	b.n	800a496 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a44c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a450:	d111      	bne.n	800a476 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a45a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f81e 	bl	800a49e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2220      	movs	r2, #32
 800a466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e00f      	b.n	800a496 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	69da      	ldr	r2, [r3, #28]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	4013      	ands	r3, r2
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	429a      	cmp	r2, r3
 800a484:	bf0c      	ite	eq
 800a486:	2301      	moveq	r3, #1
 800a488:	2300      	movne	r3, #0
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	429a      	cmp	r2, r3
 800a492:	d0a0      	beq.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b095      	sub	sp, #84	@ 0x54
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	e853 3f00 	ldrex	r3, [r3]
 800a4b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4cc:	e841 2300 	strex	r3, r2, [r1]
 800a4d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e6      	bne.n	800a4a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3308      	adds	r3, #8
 800a4de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	e853 3f00 	ldrex	r3, [r3]
 800a4e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4ee:	f023 0301 	bic.w	r3, r3, #1
 800a4f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e3      	bne.n	800a4d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a514:	2b01      	cmp	r3, #1
 800a516:	d118      	bne.n	800a54a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	60bb      	str	r3, [r7, #8]
   return(result);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	f023 0310 	bic.w	r3, r3, #16
 800a52c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a536:	61bb      	str	r3, [r7, #24]
 800a538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	6979      	ldr	r1, [r7, #20]
 800a53c:	69ba      	ldr	r2, [r7, #24]
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	613b      	str	r3, [r7, #16]
   return(result);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e6      	bne.n	800a518 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2220      	movs	r2, #32
 800a54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a55e:	bf00      	nop
 800a560:	3754      	adds	r7, #84	@ 0x54
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a576:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7ff fb95 	bl	8009cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b088      	sub	sp, #32
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5aa:	61fb      	str	r3, [r7, #28]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6979      	ldr	r1, [r7, #20]
 800a5ba:	69ba      	ldr	r2, [r7, #24]
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e6      	bne.n	800a596 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff fb60 	bl	8009c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5dc:	bf00      	nop
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_UARTEx_DisableFifoMode+0x16>
 800a632:	2302      	movs	r3, #2
 800a634:	e027      	b.n	800a686 <HAL_UARTEx_DisableFifoMode+0x66>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2224      	movs	r2, #36	@ 0x24
 800a642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0201 	bic.w	r2, r2, #1
 800a65c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a664:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2220      	movs	r2, #32
 800a678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d101      	bne.n	800a6aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e02d      	b.n	800a706 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2224      	movs	r2, #36	@ 0x24
 800a6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 0201 	bic.w	r2, r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f850 	bl	800a78c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d101      	bne.n	800a726 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a722:	2302      	movs	r3, #2
 800a724:	e02d      	b.n	800a782 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2224      	movs	r2, #36	@ 0x24
 800a732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 0201 	bic.w	r2, r2, #1
 800a74c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f812 	bl	800a78c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2220      	movs	r2, #32
 800a774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d108      	bne.n	800a7ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7ac:	e031      	b.n	800a812 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7ae:	2308      	movs	r3, #8
 800a7b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7b2:	2308      	movs	r3, #8
 800a7b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	0e5b      	lsrs	r3, r3, #25
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f003 0307 	and.w	r3, r3, #7
 800a7c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	0f5b      	lsrs	r3, r3, #29
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	f003 0307 	and.w	r3, r3, #7
 800a7d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	7b3a      	ldrb	r2, [r7, #12]
 800a7da:	4911      	ldr	r1, [pc, #68]	@ (800a820 <UARTEx_SetNbDataToProcess+0x94>)
 800a7dc:	5c8a      	ldrb	r2, [r1, r2]
 800a7de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7e2:	7b3a      	ldrb	r2, [r7, #12]
 800a7e4:	490f      	ldr	r1, [pc, #60]	@ (800a824 <UARTEx_SetNbDataToProcess+0x98>)
 800a7e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	7b7a      	ldrb	r2, [r7, #13]
 800a7f8:	4909      	ldr	r1, [pc, #36]	@ (800a820 <UARTEx_SetNbDataToProcess+0x94>)
 800a7fa:	5c8a      	ldrb	r2, [r1, r2]
 800a7fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a800:	7b7a      	ldrb	r2, [r7, #13]
 800a802:	4908      	ldr	r1, [pc, #32]	@ (800a824 <UARTEx_SetNbDataToProcess+0x98>)
 800a804:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a806:	fb93 f3f2 	sdiv	r3, r3, r2
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	080100a0 	.word	0x080100a0
 800a824:	080100a8 	.word	0x080100a8

0800a828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a830:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a834:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	b29b      	uxth	r3, r3
 800a842:	43db      	mvns	r3, r3
 800a844:	b29b      	uxth	r3, r3
 800a846:	4013      	ands	r3, r2
 800a848:	b29a      	uxth	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a85e:	b480      	push	{r7}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	1d3b      	adds	r3, r7, #4
 800a868:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2201      	movs	r2, #1
 800a870:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <__NVIC_SetPriority>:
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	db0a      	blt.n	800a8c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	490c      	ldr	r1, [pc, #48]	@ (800a8e8 <__NVIC_SetPriority+0x4c>)
 800a8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ba:	0112      	lsls	r2, r2, #4
 800a8bc:	b2d2      	uxtb	r2, r2
 800a8be:	440b      	add	r3, r1
 800a8c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a8c4:	e00a      	b.n	800a8dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4908      	ldr	r1, [pc, #32]	@ (800a8ec <__NVIC_SetPriority+0x50>)
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	f003 030f 	and.w	r3, r3, #15
 800a8d2:	3b04      	subs	r3, #4
 800a8d4:	0112      	lsls	r2, r2, #4
 800a8d6:	b2d2      	uxtb	r2, r2
 800a8d8:	440b      	add	r3, r1
 800a8da:	761a      	strb	r2, [r3, #24]
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	e000e100 	.word	0xe000e100
 800a8ec:	e000ed00 	.word	0xe000ed00

0800a8f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a8f4:	4b05      	ldr	r3, [pc, #20]	@ (800a90c <SysTick_Handler+0x1c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a8f8:	f001 fd46 	bl	800c388 <xTaskGetSchedulerState>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d001      	beq.n	800a906 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a902:	f002 fb41 	bl	800cf88 <xPortSysTickHandler>
  }
}
 800a906:	bf00      	nop
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	e000e010 	.word	0xe000e010

0800a910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a914:	2100      	movs	r1, #0
 800a916:	f06f 0004 	mvn.w	r0, #4
 800a91a:	f7ff ffbf 	bl	800a89c <__NVIC_SetPriority>
#endif
}
 800a91e:	bf00      	nop
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a92a:	f3ef 8305 	mrs	r3, IPSR
 800a92e:	603b      	str	r3, [r7, #0]
  return(result);
 800a930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a936:	f06f 0305 	mvn.w	r3, #5
 800a93a:	607b      	str	r3, [r7, #4]
 800a93c:	e00c      	b.n	800a958 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a93e:	4b0a      	ldr	r3, [pc, #40]	@ (800a968 <osKernelInitialize+0x44>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d105      	bne.n	800a952 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a946:	4b08      	ldr	r3, [pc, #32]	@ (800a968 <osKernelInitialize+0x44>)
 800a948:	2201      	movs	r2, #1
 800a94a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	607b      	str	r3, [r7, #4]
 800a950:	e002      	b.n	800a958 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a958:	687b      	ldr	r3, [r7, #4]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	20000af8 	.word	0x20000af8

0800a96c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a972:	f3ef 8305 	mrs	r3, IPSR
 800a976:	603b      	str	r3, [r7, #0]
  return(result);
 800a978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a97e:	f06f 0305 	mvn.w	r3, #5
 800a982:	607b      	str	r3, [r7, #4]
 800a984:	e010      	b.n	800a9a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a986:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b4 <osKernelStart+0x48>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d109      	bne.n	800a9a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a98e:	f7ff ffbf 	bl	800a910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a992:	4b08      	ldr	r3, [pc, #32]	@ (800a9b4 <osKernelStart+0x48>)
 800a994:	2202      	movs	r2, #2
 800a996:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a998:	f001 f892 	bl	800bac0 <vTaskStartScheduler>
      stat = osOK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	607b      	str	r3, [r7, #4]
 800a9a0:	e002      	b.n	800a9a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a9a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9a8:	687b      	ldr	r3, [r7, #4]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000af8 	.word	0x20000af8

0800a9b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08e      	sub	sp, #56	@ 0x38
 800a9bc:	af04      	add	r7, sp, #16
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9c8:	f3ef 8305 	mrs	r3, IPSR
 800a9cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a9ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d17e      	bne.n	800aad2 <osThreadNew+0x11a>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d07b      	beq.n	800aad2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a9da:	2380      	movs	r3, #128	@ 0x80
 800a9dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a9de:	2318      	movs	r3, #24
 800a9e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a9e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d045      	beq.n	800aa7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <osThreadNew+0x48>
        name = attr->name;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d008      	beq.n	800aa26 <osThreadNew+0x6e>
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	2b38      	cmp	r3, #56	@ 0x38
 800aa18:	d805      	bhi.n	800aa26 <osThreadNew+0x6e>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <osThreadNew+0x72>
        return (NULL);
 800aa26:	2300      	movs	r3, #0
 800aa28:	e054      	b.n	800aad4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	089b      	lsrs	r3, r3, #2
 800aa38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00e      	beq.n	800aa60 <osThreadNew+0xa8>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	2ba7      	cmp	r3, #167	@ 0xa7
 800aa48:	d90a      	bls.n	800aa60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d006      	beq.n	800aa60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <osThreadNew+0xa8>
        mem = 1;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	61bb      	str	r3, [r7, #24]
 800aa5e:	e010      	b.n	800aa82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10c      	bne.n	800aa82 <osThreadNew+0xca>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d108      	bne.n	800aa82 <osThreadNew+0xca>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d104      	bne.n	800aa82 <osThreadNew+0xca>
          mem = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	61bb      	str	r3, [r7, #24]
 800aa7c:	e001      	b.n	800aa82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d110      	bne.n	800aaaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa90:	9202      	str	r2, [sp, #8]
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	6a3a      	ldr	r2, [r7, #32]
 800aa9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 fe1a 	bl	800b6d8 <xTaskCreateStatic>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	613b      	str	r3, [r7, #16]
 800aaa8:	e013      	b.n	800aad2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d110      	bne.n	800aad2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	f107 0310 	add.w	r3, r7, #16
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f000 fe68 	bl	800b798 <xTaskCreate>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d001      	beq.n	800aad2 <osThreadNew+0x11a>
            hTask = NULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aad2:	693b      	ldr	r3, [r7, #16]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3728      	adds	r7, #40	@ 0x28
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aae4:	f3ef 8305 	mrs	r3, IPSR
 800aae8:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <osDelay+0x1c>
    stat = osErrorISR;
 800aaf0:	f06f 0305 	mvn.w	r3, #5
 800aaf4:	60fb      	str	r3, [r7, #12]
 800aaf6:	e007      	b.n	800ab08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 ffa6 	bl	800ba54 <vTaskDelay>
    }
  }

  return (stat);
 800ab08:	68fb      	ldr	r3, [r7, #12]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4a07      	ldr	r2, [pc, #28]	@ (800ab40 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	4a06      	ldr	r2, [pc, #24]	@ (800ab44 <vApplicationGetIdleTaskMemory+0x30>)
 800ab2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2280      	movs	r2, #128	@ 0x80
 800ab30:	601a      	str	r2, [r3, #0]
}
 800ab32:	bf00      	nop
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20000afc 	.word	0x20000afc
 800ab44:	20000ba4 	.word	0x20000ba4

0800ab48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4a07      	ldr	r2, [pc, #28]	@ (800ab74 <vApplicationGetTimerTaskMemory+0x2c>)
 800ab58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	4a06      	ldr	r2, [pc, #24]	@ (800ab78 <vApplicationGetTimerTaskMemory+0x30>)
 800ab5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ab66:	601a      	str	r2, [r3, #0]
}
 800ab68:	bf00      	nop
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	20000da4 	.word	0x20000da4
 800ab78:	20000e4c 	.word	0x20000e4c

0800ab7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f103 0208 	add.w	r2, r3, #8
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f103 0208 	add.w	r2, r3, #8
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f103 0208 	add.w	r2, r3, #8
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abd6:	b480      	push	{r7}
 800abd8:	b085      	sub	sp, #20
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	601a      	str	r2, [r3, #0]
}
 800ac12:	bf00      	nop
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac34:	d103      	bne.n	800ac3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	e00c      	b.n	800ac58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3308      	adds	r3, #8
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	e002      	b.n	800ac4c <vListInsert+0x2e>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d2f6      	bcs.n	800ac46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	601a      	str	r2, [r3, #0]
}
 800ac84:	bf00      	nop
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	6892      	ldr	r2, [r2, #8]
 800aca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6852      	ldr	r2, [r2, #4]
 800acb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d103      	bne.n	800acc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	689a      	ldr	r2, [r3, #8]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10b      	bne.n	800ad10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	e7fd      	b.n	800ad0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad10:	f002 f8aa 	bl	800ce68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad1c:	68f9      	ldr	r1, [r7, #12]
 800ad1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad20:	fb01 f303 	mul.w	r3, r1, r3
 800ad24:	441a      	add	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad40:	3b01      	subs	r3, #1
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad46:	fb01 f303 	mul.w	r3, r1, r3
 800ad4a:	441a      	add	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	22ff      	movs	r2, #255	@ 0xff
 800ad54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	22ff      	movs	r2, #255	@ 0xff
 800ad5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d114      	bne.n	800ad90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01a      	beq.n	800ada4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3310      	adds	r3, #16
 800ad72:	4618      	mov	r0, r3
 800ad74:	f001 f942 	bl	800bffc <xTaskRemoveFromEventList>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d012      	beq.n	800ada4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad7e:	4b0d      	ldr	r3, [pc, #52]	@ (800adb4 <xQueueGenericReset+0xd0>)
 800ad80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	e009      	b.n	800ada4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3310      	adds	r3, #16
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fef1 	bl	800ab7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3324      	adds	r3, #36	@ 0x24
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff feec 	bl	800ab7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ada4:	f002 f892 	bl	800cecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ada8:	2301      	movs	r3, #1
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	e000ed04 	.word	0xe000ed04

0800adb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08e      	sub	sp, #56	@ 0x38
 800adbc:	af02      	add	r7, sp, #8
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10b      	bne.n	800ade4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800adde:	bf00      	nop
 800ade0:	bf00      	nop
 800ade2:	e7fd      	b.n	800ade0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	e7fd      	b.n	800adfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <xQueueGenericCreateStatic+0x56>
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <xQueueGenericCreateStatic+0x5a>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <xQueueGenericCreateStatic+0x5c>
 800ae12:	2300      	movs	r3, #0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10b      	bne.n	800ae30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	623b      	str	r3, [r7, #32]
}
 800ae2a:	bf00      	nop
 800ae2c:	bf00      	nop
 800ae2e:	e7fd      	b.n	800ae2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <xQueueGenericCreateStatic+0x84>
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <xQueueGenericCreateStatic+0x88>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e000      	b.n	800ae42 <xQueueGenericCreateStatic+0x8a>
 800ae40:	2300      	movs	r3, #0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10b      	bne.n	800ae5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	61fb      	str	r3, [r7, #28]
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	e7fd      	b.n	800ae5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae5e:	2350      	movs	r3, #80	@ 0x50
 800ae60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b50      	cmp	r3, #80	@ 0x50
 800ae66:	d00b      	beq.n	800ae80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	61bb      	str	r3, [r7, #24]
}
 800ae7a:	bf00      	nop
 800ae7c:	bf00      	nop
 800ae7e:	e7fd      	b.n	800ae7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00d      	beq.n	800aea8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	68b9      	ldr	r1, [r7, #8]
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 f805 	bl	800aeb2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3730      	adds	r7, #48	@ 0x30
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	607a      	str	r2, [r7, #4]
 800aebe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	e002      	b.n	800aed4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aee0:	2101      	movs	r1, #1
 800aee2:	69b8      	ldr	r0, [r7, #24]
 800aee4:	f7ff fefe 	bl	800ace4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	78fa      	ldrb	r2, [r7, #3]
 800aeec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08e      	sub	sp, #56	@ 0x38
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af06:	2300      	movs	r3, #0
 800af08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10b      	bne.n	800af2c <xQueueGenericSend+0x34>
	__asm volatile
 800af14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af26:	bf00      	nop
 800af28:	bf00      	nop
 800af2a:	e7fd      	b.n	800af28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d103      	bne.n	800af3a <xQueueGenericSend+0x42>
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <xQueueGenericSend+0x46>
 800af3a:	2301      	movs	r3, #1
 800af3c:	e000      	b.n	800af40 <xQueueGenericSend+0x48>
 800af3e:	2300      	movs	r3, #0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <xQueueGenericSend+0x64>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af56:	bf00      	nop
 800af58:	bf00      	nop
 800af5a:	e7fd      	b.n	800af58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d103      	bne.n	800af6a <xQueueGenericSend+0x72>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af66:	2b01      	cmp	r3, #1
 800af68:	d101      	bne.n	800af6e <xQueueGenericSend+0x76>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e000      	b.n	800af70 <xQueueGenericSend+0x78>
 800af6e:	2300      	movs	r3, #0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10b      	bne.n	800af8c <xQueueGenericSend+0x94>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	623b      	str	r3, [r7, #32]
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af8c:	f001 f9fc 	bl	800c388 <xTaskGetSchedulerState>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d102      	bne.n	800af9c <xQueueGenericSend+0xa4>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <xQueueGenericSend+0xa8>
 800af9c:	2301      	movs	r3, #1
 800af9e:	e000      	b.n	800afa2 <xQueueGenericSend+0xaa>
 800afa0:	2300      	movs	r3, #0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10b      	bne.n	800afbe <xQueueGenericSend+0xc6>
	__asm volatile
 800afa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	61fb      	str	r3, [r7, #28]
}
 800afb8:	bf00      	nop
 800afba:	bf00      	nop
 800afbc:	e7fd      	b.n	800afba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afbe:	f001 ff53 	bl	800ce68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afca:	429a      	cmp	r2, r3
 800afcc:	d302      	bcc.n	800afd4 <xQueueGenericSend+0xdc>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d129      	bne.n	800b028 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afda:	f000 fa0f 	bl	800b3fc <prvCopyDataToQueue>
 800afde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d010      	beq.n	800b00a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	3324      	adds	r3, #36	@ 0x24
 800afec:	4618      	mov	r0, r3
 800afee:	f001 f805 	bl	800bffc <xTaskRemoveFromEventList>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d013      	beq.n	800b020 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aff8:	4b3f      	ldr	r3, [pc, #252]	@ (800b0f8 <xQueueGenericSend+0x200>)
 800affa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	e00a      	b.n	800b020 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d007      	beq.n	800b020 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b010:	4b39      	ldr	r3, [pc, #228]	@ (800b0f8 <xQueueGenericSend+0x200>)
 800b012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b020:	f001 ff54 	bl	800cecc <vPortExitCritical>
				return pdPASS;
 800b024:	2301      	movs	r3, #1
 800b026:	e063      	b.n	800b0f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d103      	bne.n	800b036 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b02e:	f001 ff4d 	bl	800cecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b032:	2300      	movs	r3, #0
 800b034:	e05c      	b.n	800b0f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d106      	bne.n	800b04a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b03c:	f107 0314 	add.w	r3, r7, #20
 800b040:	4618      	mov	r0, r3
 800b042:	f001 f83f 	bl	800c0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b046:	2301      	movs	r3, #1
 800b048:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b04a:	f001 ff3f 	bl	800cecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b04e:	f000 fda7 	bl	800bba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b052:	f001 ff09 	bl	800ce68 <vPortEnterCritical>
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b05c:	b25b      	sxtb	r3, r3
 800b05e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b062:	d103      	bne.n	800b06c <xQueueGenericSend+0x174>
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b072:	b25b      	sxtb	r3, r3
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b078:	d103      	bne.n	800b082 <xQueueGenericSend+0x18a>
 800b07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b082:	f001 ff23 	bl	800cecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b086:	1d3a      	adds	r2, r7, #4
 800b088:	f107 0314 	add.w	r3, r7, #20
 800b08c:	4611      	mov	r1, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f001 f82e 	bl	800c0f0 <xTaskCheckForTimeOut>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d124      	bne.n	800b0e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b09a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b09c:	f000 faa6 	bl	800b5ec <prvIsQueueFull>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d018      	beq.n	800b0d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	3310      	adds	r3, #16
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 ff52 	bl	800bf58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0b6:	f000 fa31 	bl	800b51c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0ba:	f000 fd7f 	bl	800bbbc <xTaskResumeAll>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f47f af7c 	bne.w	800afbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f8 <xQueueGenericSend+0x200>)
 800b0c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	e772      	b.n	800afbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b0d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0da:	f000 fa1f 	bl	800b51c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0de:	f000 fd6d 	bl	800bbbc <xTaskResumeAll>
 800b0e2:	e76c      	b.n	800afbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b0e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0e6:	f000 fa19 	bl	800b51c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0ea:	f000 fd67 	bl	800bbbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b0ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3738      	adds	r7, #56	@ 0x38
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b090      	sub	sp, #64	@ 0x40
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10b      	bne.n	800b12c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b126:	bf00      	nop
 800b128:	bf00      	nop
 800b12a:	e7fd      	b.n	800b128 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d103      	bne.n	800b13a <xQueueGenericSendFromISR+0x3e>
 800b132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <xQueueGenericSendFromISR+0x42>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <xQueueGenericSendFromISR+0x44>
 800b13e:	2300      	movs	r3, #0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10b      	bne.n	800b15c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d103      	bne.n	800b16a <xQueueGenericSendFromISR+0x6e>
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <xQueueGenericSendFromISR+0x72>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e000      	b.n	800b170 <xQueueGenericSendFromISR+0x74>
 800b16e:	2300      	movs	r3, #0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10b      	bne.n	800b18c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	623b      	str	r3, [r7, #32]
}
 800b186:	bf00      	nop
 800b188:	bf00      	nop
 800b18a:	e7fd      	b.n	800b188 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b18c:	f001 ff4c 	bl	800d028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b190:	f3ef 8211 	mrs	r2, BASEPRI
 800b194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	61fa      	str	r2, [r7, #28]
 800b1a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d302      	bcc.n	800b1be <xQueueGenericSendFromISR+0xc2>
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d12f      	bne.n	800b21e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1d4:	f000 f912 	bl	800b3fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1e0:	d112      	bne.n	800b208 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d016      	beq.n	800b218 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ec:	3324      	adds	r3, #36	@ 0x24
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 ff04 	bl	800bffc <xTaskRemoveFromEventList>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00e      	beq.n	800b218 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00b      	beq.n	800b218 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	e007      	b.n	800b218 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b208:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b20c:	3301      	adds	r3, #1
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	b25a      	sxtb	r2, r3
 800b212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b218:	2301      	movs	r3, #1
 800b21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b21c:	e001      	b.n	800b222 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b224:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b22c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b230:	4618      	mov	r0, r3
 800b232:	3740      	adds	r7, #64	@ 0x40
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08c      	sub	sp, #48	@ 0x30
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b244:	2300      	movs	r3, #0
 800b246:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10b      	bne.n	800b26a <xQueueReceive+0x32>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	623b      	str	r3, [r7, #32]
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	e7fd      	b.n	800b266 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d103      	bne.n	800b278 <xQueueReceive+0x40>
 800b270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <xQueueReceive+0x44>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <xQueueReceive+0x46>
 800b27c:	2300      	movs	r3, #0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <xQueueReceive+0x62>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	61fb      	str	r3, [r7, #28]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b29a:	f001 f875 	bl	800c388 <xTaskGetSchedulerState>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d102      	bne.n	800b2aa <xQueueReceive+0x72>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <xQueueReceive+0x76>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e000      	b.n	800b2b0 <xQueueReceive+0x78>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10b      	bne.n	800b2cc <xQueueReceive+0x94>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	61bb      	str	r3, [r7, #24]
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	e7fd      	b.n	800b2c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2cc:	f001 fdcc 	bl	800ce68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01f      	beq.n	800b31c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2e0:	f000 f8f6 	bl	800b4d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e6:	1e5a      	subs	r2, r3, #1
 800b2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00f      	beq.n	800b314 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f6:	3310      	adds	r3, #16
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fe7f 	bl	800bffc <xTaskRemoveFromEventList>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b304:	4b3c      	ldr	r3, [pc, #240]	@ (800b3f8 <xQueueReceive+0x1c0>)
 800b306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b314:	f001 fdda 	bl	800cecc <vPortExitCritical>
				return pdPASS;
 800b318:	2301      	movs	r3, #1
 800b31a:	e069      	b.n	800b3f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d103      	bne.n	800b32a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b322:	f001 fdd3 	bl	800cecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b326:	2300      	movs	r3, #0
 800b328:	e062      	b.n	800b3f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b330:	f107 0310 	add.w	r3, r7, #16
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fec5 	bl	800c0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b33a:	2301      	movs	r3, #1
 800b33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b33e:	f001 fdc5 	bl	800cecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b342:	f000 fc2d 	bl	800bba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b346:	f001 fd8f 	bl	800ce68 <vPortEnterCritical>
 800b34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b350:	b25b      	sxtb	r3, r3
 800b352:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b356:	d103      	bne.n	800b360 <xQueueReceive+0x128>
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b362:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b366:	b25b      	sxtb	r3, r3
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b36c:	d103      	bne.n	800b376 <xQueueReceive+0x13e>
 800b36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b376:	f001 fda9 	bl	800cecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b37a:	1d3a      	adds	r2, r7, #4
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f000 feb4 	bl	800c0f0 <xTaskCheckForTimeOut>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d123      	bne.n	800b3d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b38e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b390:	f000 f916 	bl	800b5c0 <prvIsQueueEmpty>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d017      	beq.n	800b3ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39c:	3324      	adds	r3, #36	@ 0x24
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f000 fdd8 	bl	800bf58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3aa:	f000 f8b7 	bl	800b51c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3ae:	f000 fc05 	bl	800bbbc <xTaskResumeAll>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d189      	bne.n	800b2cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b3b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f8 <xQueueReceive+0x1c0>)
 800b3ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	e780      	b.n	800b2cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3cc:	f000 f8a6 	bl	800b51c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3d0:	f000 fbf4 	bl	800bbbc <xTaskResumeAll>
 800b3d4:	e77a      	b.n	800b2cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b3d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3d8:	f000 f8a0 	bl	800b51c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3dc:	f000 fbee 	bl	800bbbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3e2:	f000 f8ed 	bl	800b5c0 <prvIsQueueEmpty>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f43f af6f 	beq.w	800b2cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3730      	adds	r7, #48	@ 0x30
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b408:	2300      	movs	r3, #0
 800b40a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b410:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10d      	bne.n	800b436 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d14d      	bne.n	800b4be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	4618      	mov	r0, r3
 800b428:	f000 ffcc 	bl	800c3c4 <xTaskPriorityDisinherit>
 800b42c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	609a      	str	r2, [r3, #8]
 800b434:	e043      	b.n	800b4be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d119      	bne.n	800b470 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6858      	ldr	r0, [r3, #4]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b444:	461a      	mov	r2, r3
 800b446:	68b9      	ldr	r1, [r7, #8]
 800b448:	f002 fdd9 	bl	800dffe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b454:	441a      	add	r2, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	429a      	cmp	r2, r3
 800b464:	d32b      	bcc.n	800b4be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	605a      	str	r2, [r3, #4]
 800b46e:	e026      	b.n	800b4be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	68d8      	ldr	r0, [r3, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b478:	461a      	mov	r2, r3
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	f002 fdbf 	bl	800dffe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b488:	425b      	negs	r3, r3
 800b48a:	441a      	add	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	68da      	ldr	r2, [r3, #12]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d207      	bcs.n	800b4ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	689a      	ldr	r2, [r3, #8]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a4:	425b      	negs	r3, r3
 800b4a6:	441a      	add	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d105      	bne.n	800b4be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b4c6:	697b      	ldr	r3, [r7, #20]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d018      	beq.n	800b514 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ea:	441a      	add	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68da      	ldr	r2, [r3, #12]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d303      	bcc.n	800b504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68d9      	ldr	r1, [r3, #12]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b50c:	461a      	mov	r2, r3
 800b50e:	6838      	ldr	r0, [r7, #0]
 800b510:	f002 fd75 	bl	800dffe <memcpy>
	}
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b524:	f001 fca0 	bl	800ce68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b52e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b530:	e011      	b.n	800b556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	d012      	beq.n	800b560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3324      	adds	r3, #36	@ 0x24
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 fd5c 	bl	800bffc <xTaskRemoveFromEventList>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b54a:	f000 fe35 	bl	800c1b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	3b01      	subs	r3, #1
 800b552:	b2db      	uxtb	r3, r3
 800b554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dce9      	bgt.n	800b532 <prvUnlockQueue+0x16>
 800b55e:	e000      	b.n	800b562 <prvUnlockQueue+0x46>
					break;
 800b560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	22ff      	movs	r2, #255	@ 0xff
 800b566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b56a:	f001 fcaf 	bl	800cecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b56e:	f001 fc7b 	bl	800ce68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b57a:	e011      	b.n	800b5a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d012      	beq.n	800b5aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3310      	adds	r3, #16
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fd37 	bl	800bffc <xTaskRemoveFromEventList>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b594:	f000 fe10 	bl	800c1b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dce9      	bgt.n	800b57c <prvUnlockQueue+0x60>
 800b5a8:	e000      	b.n	800b5ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b5aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	22ff      	movs	r2, #255	@ 0xff
 800b5b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b5b4:	f001 fc8a 	bl	800cecc <vPortExitCritical>
}
 800b5b8:	bf00      	nop
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5c8:	f001 fc4e 	bl	800ce68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	e001      	b.n	800b5de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5de:	f001 fc75 	bl	800cecc <vPortExitCritical>

	return xReturn;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5f4:	f001 fc38 	bl	800ce68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b600:	429a      	cmp	r2, r3
 800b602:	d102      	bne.n	800b60a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	60fb      	str	r3, [r7, #12]
 800b608:	e001      	b.n	800b60e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b60e:	f001 fc5d 	bl	800cecc <vPortExitCritical>

	return xReturn;
 800b612:	68fb      	ldr	r3, [r7, #12]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
 800b62a:	e014      	b.n	800b656 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b62c:	4a0f      	ldr	r2, [pc, #60]	@ (800b66c <vQueueAddToRegistry+0x50>)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10b      	bne.n	800b650 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b638:	490c      	ldr	r1, [pc, #48]	@ (800b66c <vQueueAddToRegistry+0x50>)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b642:	4a0a      	ldr	r2, [pc, #40]	@ (800b66c <vQueueAddToRegistry+0x50>)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	4413      	add	r3, r2
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b64e:	e006      	b.n	800b65e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3301      	adds	r3, #1
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2b07      	cmp	r3, #7
 800b65a:	d9e7      	bls.n	800b62c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b65c:	bf00      	nop
 800b65e:	bf00      	nop
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	2000124c 	.word	0x2000124c

0800b670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b680:	f001 fbf2 	bl	800ce68 <vPortEnterCritical>
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b68a:	b25b      	sxtb	r3, r3
 800b68c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b690:	d103      	bne.n	800b69a <vQueueWaitForMessageRestricted+0x2a>
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6a0:	b25b      	sxtb	r3, r3
 800b6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6a6:	d103      	bne.n	800b6b0 <vQueueWaitForMessageRestricted+0x40>
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6b0:	f001 fc0c 	bl	800cecc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d106      	bne.n	800b6ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	3324      	adds	r3, #36	@ 0x24
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f000 fc6d 	bl	800bfa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b6ca:	6978      	ldr	r0, [r7, #20]
 800b6cc:	f7ff ff26 	bl	800b51c <prvUnlockQueue>
	}
 800b6d0:	bf00      	nop
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08e      	sub	sp, #56	@ 0x38
 800b6dc:	af04      	add	r7, sp, #16
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10b      	bne.n	800b704 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	623b      	str	r3, [r7, #32]
}
 800b6fe:	bf00      	nop
 800b700:	bf00      	nop
 800b702:	e7fd      	b.n	800b700 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10b      	bne.n	800b722 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	61fb      	str	r3, [r7, #28]
}
 800b71c:	bf00      	nop
 800b71e:	bf00      	nop
 800b720:	e7fd      	b.n	800b71e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b722:	23a8      	movs	r3, #168	@ 0xa8
 800b724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2ba8      	cmp	r3, #168	@ 0xa8
 800b72a:	d00b      	beq.n	800b744 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	61bb      	str	r3, [r7, #24]
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	e7fd      	b.n	800b740 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b744:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01e      	beq.n	800b78a <xTaskCreateStatic+0xb2>
 800b74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d01b      	beq.n	800b78a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b754:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b75a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b764:	2300      	movs	r3, #0
 800b766:	9303      	str	r3, [sp, #12]
 800b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76a:	9302      	str	r3, [sp, #8]
 800b76c:	f107 0314 	add.w	r3, r7, #20
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	68b9      	ldr	r1, [r7, #8]
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f000 f851 	bl	800b824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b782:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b784:	f000 f8f6 	bl	800b974 <prvAddNewTaskToReadyList>
 800b788:	e001      	b.n	800b78e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b78a:	2300      	movs	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b78e:	697b      	ldr	r3, [r7, #20]
	}
 800b790:	4618      	mov	r0, r3
 800b792:	3728      	adds	r7, #40	@ 0x28
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08c      	sub	sp, #48	@ 0x30
 800b79c:	af04      	add	r7, sp, #16
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b7a8:	88fb      	ldrh	r3, [r7, #6]
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 fc7d 	bl	800d0ac <pvPortMalloc>
 800b7b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00e      	beq.n	800b7d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7ba:	20a8      	movs	r0, #168	@ 0xa8
 800b7bc:	f001 fc76 	bl	800d0ac <pvPortMalloc>
 800b7c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b7ce:	e005      	b.n	800b7dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7d0:	6978      	ldr	r0, [r7, #20]
 800b7d2:	f001 fd39 	bl	800d248 <vPortFree>
 800b7d6:	e001      	b.n	800b7dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d017      	beq.n	800b812 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7ea:	88fa      	ldrh	r2, [r7, #6]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9303      	str	r3, [sp, #12]
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	9302      	str	r3, [sp, #8]
 800b7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 f80f 	bl	800b824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b806:	69f8      	ldr	r0, [r7, #28]
 800b808:	f000 f8b4 	bl	800b974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b80c:	2301      	movs	r3, #1
 800b80e:	61bb      	str	r3, [r7, #24]
 800b810:	e002      	b.n	800b818 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b816:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b818:	69bb      	ldr	r3, [r7, #24]
	}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b088      	sub	sp, #32
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
 800b830:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b834:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	461a      	mov	r2, r3
 800b83c:	21a5      	movs	r1, #165	@ 0xa5
 800b83e:	f002 fb4f 	bl	800dee0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b84c:	3b01      	subs	r3, #1
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	f023 0307 	bic.w	r3, r3, #7
 800b85a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	f003 0307 	and.w	r3, r3, #7
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00b      	beq.n	800b87e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	617b      	str	r3, [r7, #20]
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	e7fd      	b.n	800b87a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d01f      	beq.n	800b8c4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b884:	2300      	movs	r3, #0
 800b886:	61fb      	str	r3, [r7, #28]
 800b888:	e012      	b.n	800b8b0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	4413      	add	r3, r2
 800b890:	7819      	ldrb	r1, [r3, #0]
 800b892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	4413      	add	r3, r2
 800b898:	3334      	adds	r3, #52	@ 0x34
 800b89a:	460a      	mov	r2, r1
 800b89c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d006      	beq.n	800b8b8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	61fb      	str	r3, [r7, #28]
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	2b0f      	cmp	r3, #15
 800b8b4:	d9e9      	bls.n	800b88a <prvInitialiseNewTask+0x66>
 800b8b6:	e000      	b.n	800b8ba <prvInitialiseNewTask+0x96>
			{
				break;
 800b8b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b8c2:	e003      	b.n	800b8cc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ce:	2b37      	cmp	r3, #55	@ 0x37
 800b8d0:	d901      	bls.n	800b8d6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8d2:	2337      	movs	r3, #55	@ 0x37
 800b8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8e0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff f965 	bl	800abbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f4:	3318      	adds	r3, #24
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff f960 	bl	800abbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b900:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b904:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b910:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b914:	2200      	movs	r2, #0
 800b916:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b924:	3354      	adds	r3, #84	@ 0x54
 800b926:	224c      	movs	r2, #76	@ 0x4c
 800b928:	2100      	movs	r1, #0
 800b92a:	4618      	mov	r0, r3
 800b92c:	f002 fad8 	bl	800dee0 <memset>
 800b930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b932:	4a0d      	ldr	r2, [pc, #52]	@ (800b968 <prvInitialiseNewTask+0x144>)
 800b934:	659a      	str	r2, [r3, #88]	@ 0x58
 800b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b938:	4a0c      	ldr	r2, [pc, #48]	@ (800b96c <prvInitialiseNewTask+0x148>)
 800b93a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93e:	4a0c      	ldr	r2, [pc, #48]	@ (800b970 <prvInitialiseNewTask+0x14c>)
 800b940:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	68f9      	ldr	r1, [r7, #12]
 800b946:	69b8      	ldr	r0, [r7, #24]
 800b948:	f001 f95a 	bl	800cc00 <pxPortInitialiseStack>
 800b94c:	4602      	mov	r2, r0
 800b94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b95e:	bf00      	nop
 800b960:	3720      	adds	r7, #32
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	200095e0 	.word	0x200095e0
 800b96c:	20009648 	.word	0x20009648
 800b970:	200096b0 	.word	0x200096b0

0800b974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b97c:	f001 fa74 	bl	800ce68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b980:	4b2d      	ldr	r3, [pc, #180]	@ (800ba38 <prvAddNewTaskToReadyList+0xc4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3301      	adds	r3, #1
 800b986:	4a2c      	ldr	r2, [pc, #176]	@ (800ba38 <prvAddNewTaskToReadyList+0xc4>)
 800b988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b98a:	4b2c      	ldr	r3, [pc, #176]	@ (800ba3c <prvAddNewTaskToReadyList+0xc8>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d109      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b992:	4a2a      	ldr	r2, [pc, #168]	@ (800ba3c <prvAddNewTaskToReadyList+0xc8>)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b998:	4b27      	ldr	r3, [pc, #156]	@ (800ba38 <prvAddNewTaskToReadyList+0xc4>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d110      	bne.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9a0:	f000 fc2e 	bl	800c200 <prvInitialiseTaskLists>
 800b9a4:	e00d      	b.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9a6:	4b26      	ldr	r3, [pc, #152]	@ (800ba40 <prvAddNewTaskToReadyList+0xcc>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d109      	bne.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9ae:	4b23      	ldr	r3, [pc, #140]	@ (800ba3c <prvAddNewTaskToReadyList+0xc8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d802      	bhi.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9bc:	4a1f      	ldr	r2, [pc, #124]	@ (800ba3c <prvAddNewTaskToReadyList+0xc8>)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9c2:	4b20      	ldr	r3, [pc, #128]	@ (800ba44 <prvAddNewTaskToReadyList+0xd0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	4a1e      	ldr	r2, [pc, #120]	@ (800ba44 <prvAddNewTaskToReadyList+0xd0>)
 800b9ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b9cc:	4b1d      	ldr	r3, [pc, #116]	@ (800ba44 <prvAddNewTaskToReadyList+0xd0>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba48 <prvAddNewTaskToReadyList+0xd4>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d903      	bls.n	800b9e8 <prvAddNewTaskToReadyList+0x74>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e4:	4a18      	ldr	r2, [pc, #96]	@ (800ba48 <prvAddNewTaskToReadyList+0xd4>)
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4a15      	ldr	r2, [pc, #84]	@ (800ba4c <prvAddNewTaskToReadyList+0xd8>)
 800b9f6:	441a      	add	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4610      	mov	r0, r2
 800ba00:	f7ff f8e9 	bl	800abd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba04:	f001 fa62 	bl	800cecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba08:	4b0d      	ldr	r3, [pc, #52]	@ (800ba40 <prvAddNewTaskToReadyList+0xcc>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00e      	beq.n	800ba2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba10:	4b0a      	ldr	r3, [pc, #40]	@ (800ba3c <prvAddNewTaskToReadyList+0xc8>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d207      	bcs.n	800ba2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba50 <prvAddNewTaskToReadyList+0xdc>)
 800ba20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba2e:	bf00      	nop
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20001760 	.word	0x20001760
 800ba3c:	2000128c 	.word	0x2000128c
 800ba40:	2000176c 	.word	0x2000176c
 800ba44:	2000177c 	.word	0x2000177c
 800ba48:	20001768 	.word	0x20001768
 800ba4c:	20001290 	.word	0x20001290
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d018      	beq.n	800ba98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba66:	4b14      	ldr	r3, [pc, #80]	@ (800bab8 <vTaskDelay+0x64>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00b      	beq.n	800ba86 <vTaskDelay+0x32>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	60bb      	str	r3, [r7, #8]
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	e7fd      	b.n	800ba82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba86:	f000 f88b 	bl	800bba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fd09 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba92:	f000 f893 	bl	800bbbc <xTaskResumeAll>
 800ba96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d107      	bne.n	800baae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ba9e:	4b07      	ldr	r3, [pc, #28]	@ (800babc <vTaskDelay+0x68>)
 800baa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20001788 	.word	0x20001788
 800babc:	e000ed04 	.word	0xe000ed04

0800bac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08a      	sub	sp, #40	@ 0x28
 800bac4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800baca:	2300      	movs	r3, #0
 800bacc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bace:	463a      	mov	r2, r7
 800bad0:	1d39      	adds	r1, r7, #4
 800bad2:	f107 0308 	add.w	r3, r7, #8
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7ff f81c 	bl	800ab14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	9202      	str	r2, [sp, #8]
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	2300      	movs	r3, #0
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	2300      	movs	r3, #0
 800baec:	460a      	mov	r2, r1
 800baee:	4924      	ldr	r1, [pc, #144]	@ (800bb80 <vTaskStartScheduler+0xc0>)
 800baf0:	4824      	ldr	r0, [pc, #144]	@ (800bb84 <vTaskStartScheduler+0xc4>)
 800baf2:	f7ff fdf1 	bl	800b6d8 <xTaskCreateStatic>
 800baf6:	4603      	mov	r3, r0
 800baf8:	4a23      	ldr	r2, [pc, #140]	@ (800bb88 <vTaskStartScheduler+0xc8>)
 800bafa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bafc:	4b22      	ldr	r3, [pc, #136]	@ (800bb88 <vTaskStartScheduler+0xc8>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb04:	2301      	movs	r3, #1
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	e001      	b.n	800bb0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d102      	bne.n	800bb1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb14:	f000 fd1a 	bl	800c54c <xTimerCreateTimerTask>
 800bb18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d11b      	bne.n	800bb58 <vTaskStartScheduler+0x98>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	613b      	str	r3, [r7, #16]
}
 800bb32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb34:	4b15      	ldr	r3, [pc, #84]	@ (800bb8c <vTaskStartScheduler+0xcc>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3354      	adds	r3, #84	@ 0x54
 800bb3a:	4a15      	ldr	r2, [pc, #84]	@ (800bb90 <vTaskStartScheduler+0xd0>)
 800bb3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb3e:	4b15      	ldr	r3, [pc, #84]	@ (800bb94 <vTaskStartScheduler+0xd4>)
 800bb40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb46:	4b14      	ldr	r3, [pc, #80]	@ (800bb98 <vTaskStartScheduler+0xd8>)
 800bb48:	2201      	movs	r2, #1
 800bb4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb4c:	4b13      	ldr	r3, [pc, #76]	@ (800bb9c <vTaskStartScheduler+0xdc>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb52:	f001 f8e5 	bl	800cd20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb56:	e00f      	b.n	800bb78 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb5e:	d10b      	bne.n	800bb78 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	e7fd      	b.n	800bb74 <vTaskStartScheduler+0xb4>
}
 800bb78:	bf00      	nop
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	0800ff88 	.word	0x0800ff88
 800bb84:	0800c1d1 	.word	0x0800c1d1
 800bb88:	20001784 	.word	0x20001784
 800bb8c:	2000128c 	.word	0x2000128c
 800bb90:	20000028 	.word	0x20000028
 800bb94:	20001780 	.word	0x20001780
 800bb98:	2000176c 	.word	0x2000176c
 800bb9c:	20001764 	.word	0x20001764

0800bba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bba4:	4b04      	ldr	r3, [pc, #16]	@ (800bbb8 <vTaskSuspendAll+0x18>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	4a03      	ldr	r2, [pc, #12]	@ (800bbb8 <vTaskSuspendAll+0x18>)
 800bbac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bbae:	bf00      	nop
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20001788 	.word	0x20001788

0800bbbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbca:	4b42      	ldr	r3, [pc, #264]	@ (800bcd4 <xTaskResumeAll+0x118>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10b      	bne.n	800bbea <xTaskResumeAll+0x2e>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	603b      	str	r3, [r7, #0]
}
 800bbe4:	bf00      	nop
 800bbe6:	bf00      	nop
 800bbe8:	e7fd      	b.n	800bbe6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bbea:	f001 f93d 	bl	800ce68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bbee:	4b39      	ldr	r3, [pc, #228]	@ (800bcd4 <xTaskResumeAll+0x118>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	4a37      	ldr	r2, [pc, #220]	@ (800bcd4 <xTaskResumeAll+0x118>)
 800bbf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbf8:	4b36      	ldr	r3, [pc, #216]	@ (800bcd4 <xTaskResumeAll+0x118>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d162      	bne.n	800bcc6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc00:	4b35      	ldr	r3, [pc, #212]	@ (800bcd8 <xTaskResumeAll+0x11c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d05e      	beq.n	800bcc6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc08:	e02f      	b.n	800bc6a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc0a:	4b34      	ldr	r3, [pc, #208]	@ (800bcdc <xTaskResumeAll+0x120>)
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3318      	adds	r3, #24
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff f83a 	bl	800ac90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff f835 	bl	800ac90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc2a:	4b2d      	ldr	r3, [pc, #180]	@ (800bce0 <xTaskResumeAll+0x124>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d903      	bls.n	800bc3a <xTaskResumeAll+0x7e>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc36:	4a2a      	ldr	r2, [pc, #168]	@ (800bce0 <xTaskResumeAll+0x124>)
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc3e:	4613      	mov	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4a27      	ldr	r2, [pc, #156]	@ (800bce4 <xTaskResumeAll+0x128>)
 800bc48:	441a      	add	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4619      	mov	r1, r3
 800bc50:	4610      	mov	r0, r2
 800bc52:	f7fe ffc0 	bl	800abd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc5a:	4b23      	ldr	r3, [pc, #140]	@ (800bce8 <xTaskResumeAll+0x12c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d302      	bcc.n	800bc6a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bc64:	4b21      	ldr	r3, [pc, #132]	@ (800bcec <xTaskResumeAll+0x130>)
 800bc66:	2201      	movs	r2, #1
 800bc68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc6a:	4b1c      	ldr	r3, [pc, #112]	@ (800bcdc <xTaskResumeAll+0x120>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1cb      	bne.n	800bc0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc78:	f000 fb66 	bl	800c348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc7c:	4b1c      	ldr	r3, [pc, #112]	@ (800bcf0 <xTaskResumeAll+0x134>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d010      	beq.n	800bcaa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc88:	f000 f846 	bl	800bd18 <xTaskIncrementTick>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bc92:	4b16      	ldr	r3, [pc, #88]	@ (800bcec <xTaskResumeAll+0x130>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1f1      	bne.n	800bc88 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bca4:	4b12      	ldr	r3, [pc, #72]	@ (800bcf0 <xTaskResumeAll+0x134>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bcaa:	4b10      	ldr	r3, [pc, #64]	@ (800bcec <xTaskResumeAll+0x130>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d009      	beq.n	800bcc6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bcf4 <xTaskResumeAll+0x138>)
 800bcb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcc6:	f001 f901 	bl	800cecc <vPortExitCritical>

	return xAlreadyYielded;
 800bcca:	68bb      	ldr	r3, [r7, #8]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	20001788 	.word	0x20001788
 800bcd8:	20001760 	.word	0x20001760
 800bcdc:	20001720 	.word	0x20001720
 800bce0:	20001768 	.word	0x20001768
 800bce4:	20001290 	.word	0x20001290
 800bce8:	2000128c 	.word	0x2000128c
 800bcec:	20001774 	.word	0x20001774
 800bcf0:	20001770 	.word	0x20001770
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bcfe:	4b05      	ldr	r3, [pc, #20]	@ (800bd14 <xTaskGetTickCount+0x1c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd04:	687b      	ldr	r3, [r7, #4]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20001764 	.word	0x20001764

0800bd18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd22:	4b4f      	ldr	r3, [pc, #316]	@ (800be60 <xTaskIncrementTick+0x148>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f040 8090 	bne.w	800be4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd2c:	4b4d      	ldr	r3, [pc, #308]	@ (800be64 <xTaskIncrementTick+0x14c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	3301      	adds	r3, #1
 800bd32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd34:	4a4b      	ldr	r2, [pc, #300]	@ (800be64 <xTaskIncrementTick+0x14c>)
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d121      	bne.n	800bd84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd40:	4b49      	ldr	r3, [pc, #292]	@ (800be68 <xTaskIncrementTick+0x150>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00b      	beq.n	800bd62 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	603b      	str	r3, [r7, #0]
}
 800bd5c:	bf00      	nop
 800bd5e:	bf00      	nop
 800bd60:	e7fd      	b.n	800bd5e <xTaskIncrementTick+0x46>
 800bd62:	4b41      	ldr	r3, [pc, #260]	@ (800be68 <xTaskIncrementTick+0x150>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	4b40      	ldr	r3, [pc, #256]	@ (800be6c <xTaskIncrementTick+0x154>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a3e      	ldr	r2, [pc, #248]	@ (800be68 <xTaskIncrementTick+0x150>)
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	4a3e      	ldr	r2, [pc, #248]	@ (800be6c <xTaskIncrementTick+0x154>)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	4b3e      	ldr	r3, [pc, #248]	@ (800be70 <xTaskIncrementTick+0x158>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	4a3c      	ldr	r2, [pc, #240]	@ (800be70 <xTaskIncrementTick+0x158>)
 800bd7e:	6013      	str	r3, [r2, #0]
 800bd80:	f000 fae2 	bl	800c348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd84:	4b3b      	ldr	r3, [pc, #236]	@ (800be74 <xTaskIncrementTick+0x15c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d349      	bcc.n	800be22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd8e:	4b36      	ldr	r3, [pc, #216]	@ (800be68 <xTaskIncrementTick+0x150>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d104      	bne.n	800bda2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd98:	4b36      	ldr	r3, [pc, #216]	@ (800be74 <xTaskIncrementTick+0x15c>)
 800bd9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd9e:	601a      	str	r2, [r3, #0]
					break;
 800bda0:	e03f      	b.n	800be22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda2:	4b31      	ldr	r3, [pc, #196]	@ (800be68 <xTaskIncrementTick+0x150>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d203      	bcs.n	800bdc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bdba:	4a2e      	ldr	r2, [pc, #184]	@ (800be74 <xTaskIncrementTick+0x15c>)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bdc0:	e02f      	b.n	800be22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe ff62 	bl	800ac90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d004      	beq.n	800bdde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	3318      	adds	r3, #24
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fe ff59 	bl	800ac90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde2:	4b25      	ldr	r3, [pc, #148]	@ (800be78 <xTaskIncrementTick+0x160>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d903      	bls.n	800bdf2 <xTaskIncrementTick+0xda>
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdee:	4a22      	ldr	r2, [pc, #136]	@ (800be78 <xTaskIncrementTick+0x160>)
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4a1f      	ldr	r2, [pc, #124]	@ (800be7c <xTaskIncrementTick+0x164>)
 800be00:	441a      	add	r2, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	3304      	adds	r3, #4
 800be06:	4619      	mov	r1, r3
 800be08:	4610      	mov	r0, r2
 800be0a:	f7fe fee4 	bl	800abd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be12:	4b1b      	ldr	r3, [pc, #108]	@ (800be80 <xTaskIncrementTick+0x168>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be18:	429a      	cmp	r2, r3
 800be1a:	d3b8      	bcc.n	800bd8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800be1c:	2301      	movs	r3, #1
 800be1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be20:	e7b5      	b.n	800bd8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be22:	4b17      	ldr	r3, [pc, #92]	@ (800be80 <xTaskIncrementTick+0x168>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be28:	4914      	ldr	r1, [pc, #80]	@ (800be7c <xTaskIncrementTick+0x164>)
 800be2a:	4613      	mov	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	440b      	add	r3, r1
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d901      	bls.n	800be3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800be3a:	2301      	movs	r3, #1
 800be3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be3e:	4b11      	ldr	r3, [pc, #68]	@ (800be84 <xTaskIncrementTick+0x16c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d007      	beq.n	800be56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800be46:	2301      	movs	r3, #1
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e004      	b.n	800be56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be4c:	4b0e      	ldr	r3, [pc, #56]	@ (800be88 <xTaskIncrementTick+0x170>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3301      	adds	r3, #1
 800be52:	4a0d      	ldr	r2, [pc, #52]	@ (800be88 <xTaskIncrementTick+0x170>)
 800be54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be56:	697b      	ldr	r3, [r7, #20]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20001788 	.word	0x20001788
 800be64:	20001764 	.word	0x20001764
 800be68:	20001718 	.word	0x20001718
 800be6c:	2000171c 	.word	0x2000171c
 800be70:	20001778 	.word	0x20001778
 800be74:	20001780 	.word	0x20001780
 800be78:	20001768 	.word	0x20001768
 800be7c:	20001290 	.word	0x20001290
 800be80:	2000128c 	.word	0x2000128c
 800be84:	20001774 	.word	0x20001774
 800be88:	20001770 	.word	0x20001770

0800be8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be92:	4b2b      	ldr	r3, [pc, #172]	@ (800bf40 <vTaskSwitchContext+0xb4>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be9a:	4b2a      	ldr	r3, [pc, #168]	@ (800bf44 <vTaskSwitchContext+0xb8>)
 800be9c:	2201      	movs	r2, #1
 800be9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bea0:	e047      	b.n	800bf32 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bea2:	4b28      	ldr	r3, [pc, #160]	@ (800bf44 <vTaskSwitchContext+0xb8>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea8:	4b27      	ldr	r3, [pc, #156]	@ (800bf48 <vTaskSwitchContext+0xbc>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	60fb      	str	r3, [r7, #12]
 800beae:	e011      	b.n	800bed4 <vTaskSwitchContext+0x48>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <vTaskSwitchContext+0x42>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	607b      	str	r3, [r7, #4]
}
 800bec8:	bf00      	nop
 800beca:	bf00      	nop
 800becc:	e7fd      	b.n	800beca <vTaskSwitchContext+0x3e>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	491d      	ldr	r1, [pc, #116]	@ (800bf4c <vTaskSwitchContext+0xc0>)
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	4613      	mov	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	440b      	add	r3, r1
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0e3      	beq.n	800beb0 <vTaskSwitchContext+0x24>
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	4613      	mov	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4413      	add	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4a16      	ldr	r2, [pc, #88]	@ (800bf4c <vTaskSwitchContext+0xc0>)
 800bef4:	4413      	add	r3, r2
 800bef6:	60bb      	str	r3, [r7, #8]
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	605a      	str	r2, [r3, #4]
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	3308      	adds	r3, #8
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d104      	bne.n	800bf18 <vTaskSwitchContext+0x8c>
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	605a      	str	r2, [r3, #4]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	4a0c      	ldr	r2, [pc, #48]	@ (800bf50 <vTaskSwitchContext+0xc4>)
 800bf20:	6013      	str	r3, [r2, #0]
 800bf22:	4a09      	ldr	r2, [pc, #36]	@ (800bf48 <vTaskSwitchContext+0xbc>)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf28:	4b09      	ldr	r3, [pc, #36]	@ (800bf50 <vTaskSwitchContext+0xc4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3354      	adds	r3, #84	@ 0x54
 800bf2e:	4a09      	ldr	r2, [pc, #36]	@ (800bf54 <vTaskSwitchContext+0xc8>)
 800bf30:	6013      	str	r3, [r2, #0]
}
 800bf32:	bf00      	nop
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	20001788 	.word	0x20001788
 800bf44:	20001774 	.word	0x20001774
 800bf48:	20001768 	.word	0x20001768
 800bf4c:	20001290 	.word	0x20001290
 800bf50:	2000128c 	.word	0x2000128c
 800bf54:	20000028 	.word	0x20000028

0800bf58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10b      	bne.n	800bf80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	60fb      	str	r3, [r7, #12]
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	e7fd      	b.n	800bf7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf80:	4b07      	ldr	r3, [pc, #28]	@ (800bfa0 <vTaskPlaceOnEventList+0x48>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	3318      	adds	r3, #24
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7fe fe48 	bl	800ac1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf8e:	2101      	movs	r1, #1
 800bf90:	6838      	ldr	r0, [r7, #0]
 800bf92:	f000 fa87 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>
}
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	2000128c 	.word	0x2000128c

0800bfa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	617b      	str	r3, [r7, #20]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfce:	4b0a      	ldr	r3, [pc, #40]	@ (800bff8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3318      	adds	r3, #24
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7fe fdfd 	bl	800abd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d002      	beq.n	800bfe8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bfe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfe6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	68b8      	ldr	r0, [r7, #8]
 800bfec:	f000 fa5a 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>
	}
 800bff0:	bf00      	nop
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	2000128c 	.word	0x2000128c

0800bffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10b      	bne.n	800c02a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60fb      	str	r3, [r7, #12]
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	e7fd      	b.n	800c026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	3318      	adds	r3, #24
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fe2e 	bl	800ac90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c034:	4b1d      	ldr	r3, [pc, #116]	@ (800c0ac <xTaskRemoveFromEventList+0xb0>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d11d      	bne.n	800c078 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	3304      	adds	r3, #4
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fe25 	bl	800ac90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c04a:	4b19      	ldr	r3, [pc, #100]	@ (800c0b0 <xTaskRemoveFromEventList+0xb4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d903      	bls.n	800c05a <xTaskRemoveFromEventList+0x5e>
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c056:	4a16      	ldr	r2, [pc, #88]	@ (800c0b0 <xTaskRemoveFromEventList+0xb4>)
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4a13      	ldr	r2, [pc, #76]	@ (800c0b4 <xTaskRemoveFromEventList+0xb8>)
 800c068:	441a      	add	r2, r3
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f7fe fdb0 	bl	800abd6 <vListInsertEnd>
 800c076:	e005      	b.n	800c084 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	3318      	adds	r3, #24
 800c07c:	4619      	mov	r1, r3
 800c07e:	480e      	ldr	r0, [pc, #56]	@ (800c0b8 <xTaskRemoveFromEventList+0xbc>)
 800c080:	f7fe fda9 	bl	800abd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c088:	4b0c      	ldr	r3, [pc, #48]	@ (800c0bc <xTaskRemoveFromEventList+0xc0>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08e:	429a      	cmp	r2, r3
 800c090:	d905      	bls.n	800c09e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c092:	2301      	movs	r3, #1
 800c094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c096:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c0 <xTaskRemoveFromEventList+0xc4>)
 800c098:	2201      	movs	r2, #1
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	e001      	b.n	800c0a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0a2:	697b      	ldr	r3, [r7, #20]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20001788 	.word	0x20001788
 800c0b0:	20001768 	.word	0x20001768
 800c0b4:	20001290 	.word	0x20001290
 800c0b8:	20001720 	.word	0x20001720
 800c0bc:	2000128c 	.word	0x2000128c
 800c0c0:	20001774 	.word	0x20001774

0800c0c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0cc:	4b06      	ldr	r3, [pc, #24]	@ (800c0e8 <vTaskInternalSetTimeOutState+0x24>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0d4:	4b05      	ldr	r3, [pc, #20]	@ (800c0ec <vTaskInternalSetTimeOutState+0x28>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	605a      	str	r2, [r3, #4]
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	20001778 	.word	0x20001778
 800c0ec:	20001764 	.word	0x20001764

0800c0f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10b      	bne.n	800c118 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	613b      	str	r3, [r7, #16]
}
 800c112:	bf00      	nop
 800c114:	bf00      	nop
 800c116:	e7fd      	b.n	800c114 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10b      	bne.n	800c136 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	60fb      	str	r3, [r7, #12]
}
 800c130:	bf00      	nop
 800c132:	bf00      	nop
 800c134:	e7fd      	b.n	800c132 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c136:	f000 fe97 	bl	800ce68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c13a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1b0 <xTaskCheckForTimeOut+0xc0>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c152:	d102      	bne.n	800c15a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c154:	2300      	movs	r3, #0
 800c156:	61fb      	str	r3, [r7, #28]
 800c158:	e023      	b.n	800c1a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	4b15      	ldr	r3, [pc, #84]	@ (800c1b4 <xTaskCheckForTimeOut+0xc4>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d007      	beq.n	800c176 <xTaskCheckForTimeOut+0x86>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d302      	bcc.n	800c176 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c170:	2301      	movs	r3, #1
 800c172:	61fb      	str	r3, [r7, #28]
 800c174:	e015      	b.n	800c1a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d20b      	bcs.n	800c198 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff ff99 	bl	800c0c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c192:	2300      	movs	r3, #0
 800c194:	61fb      	str	r3, [r7, #28]
 800c196:	e004      	b.n	800c1a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1a2:	f000 fe93 	bl	800cecc <vPortExitCritical>

	return xReturn;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20001764 	.word	0x20001764
 800c1b4:	20001778 	.word	0x20001778

0800c1b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1bc:	4b03      	ldr	r3, [pc, #12]	@ (800c1cc <vTaskMissedYield+0x14>)
 800c1be:	2201      	movs	r2, #1
 800c1c0:	601a      	str	r2, [r3, #0]
}
 800c1c2:	bf00      	nop
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	20001774 	.word	0x20001774

0800c1d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1d8:	f000 f852 	bl	800c280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1dc:	4b06      	ldr	r3, [pc, #24]	@ (800c1f8 <prvIdleTask+0x28>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d9f9      	bls.n	800c1d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c1e4:	4b05      	ldr	r3, [pc, #20]	@ (800c1fc <prvIdleTask+0x2c>)
 800c1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c1f4:	e7f0      	b.n	800c1d8 <prvIdleTask+0x8>
 800c1f6:	bf00      	nop
 800c1f8:	20001290 	.word	0x20001290
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c206:	2300      	movs	r3, #0
 800c208:	607b      	str	r3, [r7, #4]
 800c20a:	e00c      	b.n	800c226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4a12      	ldr	r2, [pc, #72]	@ (800c260 <prvInitialiseTaskLists+0x60>)
 800c218:	4413      	add	r3, r2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fe fcae 	bl	800ab7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3301      	adds	r3, #1
 800c224:	607b      	str	r3, [r7, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b37      	cmp	r3, #55	@ 0x37
 800c22a:	d9ef      	bls.n	800c20c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c22c:	480d      	ldr	r0, [pc, #52]	@ (800c264 <prvInitialiseTaskLists+0x64>)
 800c22e:	f7fe fca5 	bl	800ab7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c232:	480d      	ldr	r0, [pc, #52]	@ (800c268 <prvInitialiseTaskLists+0x68>)
 800c234:	f7fe fca2 	bl	800ab7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c238:	480c      	ldr	r0, [pc, #48]	@ (800c26c <prvInitialiseTaskLists+0x6c>)
 800c23a:	f7fe fc9f 	bl	800ab7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c23e:	480c      	ldr	r0, [pc, #48]	@ (800c270 <prvInitialiseTaskLists+0x70>)
 800c240:	f7fe fc9c 	bl	800ab7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c244:	480b      	ldr	r0, [pc, #44]	@ (800c274 <prvInitialiseTaskLists+0x74>)
 800c246:	f7fe fc99 	bl	800ab7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c24a:	4b0b      	ldr	r3, [pc, #44]	@ (800c278 <prvInitialiseTaskLists+0x78>)
 800c24c:	4a05      	ldr	r2, [pc, #20]	@ (800c264 <prvInitialiseTaskLists+0x64>)
 800c24e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c250:	4b0a      	ldr	r3, [pc, #40]	@ (800c27c <prvInitialiseTaskLists+0x7c>)
 800c252:	4a05      	ldr	r2, [pc, #20]	@ (800c268 <prvInitialiseTaskLists+0x68>)
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	bf00      	nop
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20001290 	.word	0x20001290
 800c264:	200016f0 	.word	0x200016f0
 800c268:	20001704 	.word	0x20001704
 800c26c:	20001720 	.word	0x20001720
 800c270:	20001734 	.word	0x20001734
 800c274:	2000174c 	.word	0x2000174c
 800c278:	20001718 	.word	0x20001718
 800c27c:	2000171c 	.word	0x2000171c

0800c280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c286:	e019      	b.n	800c2bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c288:	f000 fdee 	bl	800ce68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c28c:	4b10      	ldr	r3, [pc, #64]	@ (800c2d0 <prvCheckTasksWaitingTermination+0x50>)
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3304      	adds	r3, #4
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fe fcf9 	bl	800ac90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c29e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d4 <prvCheckTasksWaitingTermination+0x54>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c2d4 <prvCheckTasksWaitingTermination+0x54>)
 800c2a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d8 <prvCheckTasksWaitingTermination+0x58>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c2d8 <prvCheckTasksWaitingTermination+0x58>)
 800c2b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2b2:	f000 fe0b 	bl	800cecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f810 	bl	800c2dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2bc:	4b06      	ldr	r3, [pc, #24]	@ (800c2d8 <prvCheckTasksWaitingTermination+0x58>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e1      	bne.n	800c288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20001734 	.word	0x20001734
 800c2d4:	20001760 	.word	0x20001760
 800c2d8:	20001748 	.word	0x20001748

0800c2dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3354      	adds	r3, #84	@ 0x54
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f001 fe05 	bl	800def8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d108      	bne.n	800c30a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 ffa3 	bl	800d248 <vPortFree>
				vPortFree( pxTCB );
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 ffa0 	bl	800d248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c308:	e019      	b.n	800c33e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c310:	2b01      	cmp	r3, #1
 800c312:	d103      	bne.n	800c31c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 ff97 	bl	800d248 <vPortFree>
	}
 800c31a:	e010      	b.n	800c33e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c322:	2b02      	cmp	r3, #2
 800c324:	d00b      	beq.n	800c33e <prvDeleteTCB+0x62>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60fb      	str	r3, [r7, #12]
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	e7fd      	b.n	800c33a <prvDeleteTCB+0x5e>
	}
 800c33e:	bf00      	nop
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c34e:	4b0c      	ldr	r3, [pc, #48]	@ (800c380 <prvResetNextTaskUnblockTime+0x38>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d104      	bne.n	800c362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c358:	4b0a      	ldr	r3, [pc, #40]	@ (800c384 <prvResetNextTaskUnblockTime+0x3c>)
 800c35a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c35e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c360:	e008      	b.n	800c374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c362:	4b07      	ldr	r3, [pc, #28]	@ (800c380 <prvResetNextTaskUnblockTime+0x38>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	4a04      	ldr	r2, [pc, #16]	@ (800c384 <prvResetNextTaskUnblockTime+0x3c>)
 800c372:	6013      	str	r3, [r2, #0]
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	20001718 	.word	0x20001718
 800c384:	20001780 	.word	0x20001780

0800c388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c38e:	4b0b      	ldr	r3, [pc, #44]	@ (800c3bc <xTaskGetSchedulerState+0x34>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d102      	bne.n	800c39c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c396:	2301      	movs	r3, #1
 800c398:	607b      	str	r3, [r7, #4]
 800c39a:	e008      	b.n	800c3ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c39c:	4b08      	ldr	r3, [pc, #32]	@ (800c3c0 <xTaskGetSchedulerState+0x38>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d102      	bne.n	800c3aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	607b      	str	r3, [r7, #4]
 800c3a8:	e001      	b.n	800c3ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3ae:	687b      	ldr	r3, [r7, #4]
	}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	2000176c 	.word	0x2000176c
 800c3c0:	20001788 	.word	0x20001788

0800c3c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d058      	beq.n	800c48c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3da:	4b2f      	ldr	r3, [pc, #188]	@ (800c498 <xTaskPriorityDisinherit+0xd4>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	693a      	ldr	r2, [r7, #16]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d00b      	beq.n	800c3fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	60fb      	str	r3, [r7, #12]
}
 800c3f6:	bf00      	nop
 800c3f8:	bf00      	nop
 800c3fa:	e7fd      	b.n	800c3f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10b      	bne.n	800c41c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	60bb      	str	r3, [r7, #8]
}
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	e7fd      	b.n	800c418 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c420:	1e5a      	subs	r2, r3, #1
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c42e:	429a      	cmp	r2, r3
 800c430:	d02c      	beq.n	800c48c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c436:	2b00      	cmp	r3, #0
 800c438:	d128      	bne.n	800c48c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe fc26 	bl	800ac90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c450:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c45c:	4b0f      	ldr	r3, [pc, #60]	@ (800c49c <xTaskPriorityDisinherit+0xd8>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	429a      	cmp	r2, r3
 800c462:	d903      	bls.n	800c46c <xTaskPriorityDisinherit+0xa8>
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c468:	4a0c      	ldr	r2, [pc, #48]	@ (800c49c <xTaskPriorityDisinherit+0xd8>)
 800c46a:	6013      	str	r3, [r2, #0]
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4a09      	ldr	r2, [pc, #36]	@ (800c4a0 <xTaskPriorityDisinherit+0xdc>)
 800c47a:	441a      	add	r2, r3
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	3304      	adds	r3, #4
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f7fe fba7 	bl	800abd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c488:	2301      	movs	r3, #1
 800c48a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c48c:	697b      	ldr	r3, [r7, #20]
	}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	2000128c 	.word	0x2000128c
 800c49c:	20001768 	.word	0x20001768
 800c4a0:	20001290 	.word	0x20001290

0800c4a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4ae:	4b21      	ldr	r3, [pc, #132]	@ (800c534 <prvAddCurrentTaskToDelayedList+0x90>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4b4:	4b20      	ldr	r3, [pc, #128]	@ (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe fbe8 	bl	800ac90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4c6:	d10a      	bne.n	800c4de <prvAddCurrentTaskToDelayedList+0x3a>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d007      	beq.n	800c4de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4819      	ldr	r0, [pc, #100]	@ (800c53c <prvAddCurrentTaskToDelayedList+0x98>)
 800c4d8:	f7fe fb7d 	bl	800abd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4dc:	e026      	b.n	800c52c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4e6:	4b14      	ldr	r3, [pc, #80]	@ (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d209      	bcs.n	800c50a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4f6:	4b12      	ldr	r3, [pc, #72]	@ (800c540 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3304      	adds	r3, #4
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f7fe fb8b 	bl	800ac1e <vListInsert>
}
 800c508:	e010      	b.n	800c52c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c50a:	4b0e      	ldr	r3, [pc, #56]	@ (800c544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	4b0a      	ldr	r3, [pc, #40]	@ (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f7fe fb81 	bl	800ac1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c51c:	4b0a      	ldr	r3, [pc, #40]	@ (800c548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	429a      	cmp	r2, r3
 800c524:	d202      	bcs.n	800c52c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c526:	4a08      	ldr	r2, [pc, #32]	@ (800c548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	6013      	str	r3, [r2, #0]
}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	20001764 	.word	0x20001764
 800c538:	2000128c 	.word	0x2000128c
 800c53c:	2000174c 	.word	0x2000174c
 800c540:	2000171c 	.word	0x2000171c
 800c544:	20001718 	.word	0x20001718
 800c548:	20001780 	.word	0x20001780

0800c54c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	@ 0x28
 800c550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c556:	f000 fb13 	bl	800cb80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c55a:	4b1d      	ldr	r3, [pc, #116]	@ (800c5d0 <xTimerCreateTimerTask+0x84>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d021      	beq.n	800c5a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c562:	2300      	movs	r3, #0
 800c564:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c566:	2300      	movs	r3, #0
 800c568:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c56a:	1d3a      	adds	r2, r7, #4
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	f107 030c 	add.w	r3, r7, #12
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe fae7 	bl	800ab48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	9202      	str	r2, [sp, #8]
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	2302      	movs	r3, #2
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	2300      	movs	r3, #0
 800c58a:	460a      	mov	r2, r1
 800c58c:	4911      	ldr	r1, [pc, #68]	@ (800c5d4 <xTimerCreateTimerTask+0x88>)
 800c58e:	4812      	ldr	r0, [pc, #72]	@ (800c5d8 <xTimerCreateTimerTask+0x8c>)
 800c590:	f7ff f8a2 	bl	800b6d8 <xTaskCreateStatic>
 800c594:	4603      	mov	r3, r0
 800c596:	4a11      	ldr	r2, [pc, #68]	@ (800c5dc <xTimerCreateTimerTask+0x90>)
 800c598:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c59a:	4b10      	ldr	r3, [pc, #64]	@ (800c5dc <xTimerCreateTimerTask+0x90>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10b      	bne.n	800c5c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	613b      	str	r3, [r7, #16]
}
 800c5be:	bf00      	nop
 800c5c0:	bf00      	nop
 800c5c2:	e7fd      	b.n	800c5c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5c4:	697b      	ldr	r3, [r7, #20]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3718      	adds	r7, #24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	200017bc 	.word	0x200017bc
 800c5d4:	0800ff90 	.word	0x0800ff90
 800c5d8:	0800c719 	.word	0x0800c719
 800c5dc:	200017c0 	.word	0x200017c0

0800c5e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08a      	sub	sp, #40	@ 0x28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10b      	bne.n	800c610 <xTimerGenericCommand+0x30>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	623b      	str	r3, [r7, #32]
}
 800c60a:	bf00      	nop
 800c60c:	bf00      	nop
 800c60e:	e7fd      	b.n	800c60c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c610:	4b19      	ldr	r3, [pc, #100]	@ (800c678 <xTimerGenericCommand+0x98>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d02a      	beq.n	800c66e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b05      	cmp	r3, #5
 800c628:	dc18      	bgt.n	800c65c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c62a:	f7ff fead 	bl	800c388 <xTaskGetSchedulerState>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b02      	cmp	r3, #2
 800c632:	d109      	bne.n	800c648 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c634:	4b10      	ldr	r3, [pc, #64]	@ (800c678 <xTimerGenericCommand+0x98>)
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	f107 0110 	add.w	r1, r7, #16
 800c63c:	2300      	movs	r3, #0
 800c63e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c640:	f7fe fc5a 	bl	800aef8 <xQueueGenericSend>
 800c644:	6278      	str	r0, [r7, #36]	@ 0x24
 800c646:	e012      	b.n	800c66e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c648:	4b0b      	ldr	r3, [pc, #44]	@ (800c678 <xTimerGenericCommand+0x98>)
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	f107 0110 	add.w	r1, r7, #16
 800c650:	2300      	movs	r3, #0
 800c652:	2200      	movs	r2, #0
 800c654:	f7fe fc50 	bl	800aef8 <xQueueGenericSend>
 800c658:	6278      	str	r0, [r7, #36]	@ 0x24
 800c65a:	e008      	b.n	800c66e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c65c:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <xTimerGenericCommand+0x98>)
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	f107 0110 	add.w	r1, r7, #16
 800c664:	2300      	movs	r3, #0
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	f7fe fd48 	bl	800b0fc <xQueueGenericSendFromISR>
 800c66c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c670:	4618      	mov	r0, r3
 800c672:	3728      	adds	r7, #40	@ 0x28
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	200017bc 	.word	0x200017bc

0800c67c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af02      	add	r7, sp, #8
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c686:	4b23      	ldr	r3, [pc, #140]	@ (800c714 <prvProcessExpiredTimer+0x98>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	3304      	adds	r3, #4
 800c694:	4618      	mov	r0, r3
 800c696:	f7fe fafb 	bl	800ac90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d023      	beq.n	800c6f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	699a      	ldr	r2, [r3, #24]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	18d1      	adds	r1, r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	6978      	ldr	r0, [r7, #20]
 800c6b6:	f000 f8d5 	bl	800c864 <prvInsertTimerInActiveList>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d020      	beq.n	800c702 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6978      	ldr	r0, [r7, #20]
 800c6cc:	f7ff ff88 	bl	800c5e0 <xTimerGenericCommand>
 800c6d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d114      	bne.n	800c702 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	60fb      	str	r3, [r7, #12]
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	e7fd      	b.n	800c6ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6f6:	f023 0301 	bic.w	r3, r3, #1
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	6978      	ldr	r0, [r7, #20]
 800c708:	4798      	blx	r3
}
 800c70a:	bf00      	nop
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	200017b4 	.word	0x200017b4

0800c718 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c720:	f107 0308 	add.w	r3, r7, #8
 800c724:	4618      	mov	r0, r3
 800c726:	f000 f859 	bl	800c7dc <prvGetNextExpireTime>
 800c72a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	4619      	mov	r1, r3
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f000 f805 	bl	800c740 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c736:	f000 f8d7 	bl	800c8e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c73a:	bf00      	nop
 800c73c:	e7f0      	b.n	800c720 <prvTimerTask+0x8>
	...

0800c740 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c74a:	f7ff fa29 	bl	800bba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c74e:	f107 0308 	add.w	r3, r7, #8
 800c752:	4618      	mov	r0, r3
 800c754:	f000 f866 	bl	800c824 <prvSampleTimeNow>
 800c758:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d130      	bne.n	800c7c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10a      	bne.n	800c77c <prvProcessTimerOrBlockTask+0x3c>
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d806      	bhi.n	800c77c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c76e:	f7ff fa25 	bl	800bbbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c772:	68f9      	ldr	r1, [r7, #12]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff ff81 	bl	800c67c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c77a:	e024      	b.n	800c7c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d008      	beq.n	800c794 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c782:	4b13      	ldr	r3, [pc, #76]	@ (800c7d0 <prvProcessTimerOrBlockTask+0x90>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <prvProcessTimerOrBlockTask+0x50>
 800c78c:	2301      	movs	r3, #1
 800c78e:	e000      	b.n	800c792 <prvProcessTimerOrBlockTask+0x52>
 800c790:	2300      	movs	r3, #0
 800c792:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c794:	4b0f      	ldr	r3, [pc, #60]	@ (800c7d4 <prvProcessTimerOrBlockTask+0x94>)
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	f7fe ff65 	bl	800b670 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c7a6:	f7ff fa09 	bl	800bbbc <xTaskResumeAll>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10a      	bne.n	800c7c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c7b0:	4b09      	ldr	r3, [pc, #36]	@ (800c7d8 <prvProcessTimerOrBlockTask+0x98>)
 800c7b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	f3bf 8f6f 	isb	sy
}
 800c7c0:	e001      	b.n	800c7c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c7c2:	f7ff f9fb 	bl	800bbbc <xTaskResumeAll>
}
 800c7c6:	bf00      	nop
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	200017b8 	.word	0x200017b8
 800c7d4:	200017bc 	.word	0x200017bc
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c820 <prvGetNextExpireTime+0x44>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <prvGetNextExpireTime+0x16>
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	e000      	b.n	800c7f4 <prvGetNextExpireTime+0x18>
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d105      	bne.n	800c80c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c800:	4b07      	ldr	r3, [pc, #28]	@ (800c820 <prvGetNextExpireTime+0x44>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	e001      	b.n	800c810 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c80c:	2300      	movs	r3, #0
 800c80e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c810:	68fb      	ldr	r3, [r7, #12]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	200017b4 	.word	0x200017b4

0800c824 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c82c:	f7ff fa64 	bl	800bcf8 <xTaskGetTickCount>
 800c830:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c832:	4b0b      	ldr	r3, [pc, #44]	@ (800c860 <prvSampleTimeNow+0x3c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d205      	bcs.n	800c848 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c83c:	f000 f93a 	bl	800cab4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	601a      	str	r2, [r3, #0]
 800c846:	e002      	b.n	800c84e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c84e:	4a04      	ldr	r2, [pc, #16]	@ (800c860 <prvSampleTimeNow+0x3c>)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c854:	68fb      	ldr	r3, [r7, #12]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	200017c4 	.word	0x200017c4

0800c864 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c872:	2300      	movs	r3, #0
 800c874:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	429a      	cmp	r2, r3
 800c888:	d812      	bhi.n	800c8b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	429a      	cmp	r2, r3
 800c896:	d302      	bcc.n	800c89e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c898:	2301      	movs	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	e01b      	b.n	800c8d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c89e:	4b10      	ldr	r3, [pc, #64]	@ (800c8e0 <prvInsertTimerInActiveList+0x7c>)
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	f7fe f9b8 	bl	800ac1e <vListInsert>
 800c8ae:	e012      	b.n	800c8d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d206      	bcs.n	800c8c6 <prvInsertTimerInActiveList+0x62>
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d302      	bcc.n	800c8c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	617b      	str	r3, [r7, #20]
 800c8c4:	e007      	b.n	800c8d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8c6:	4b07      	ldr	r3, [pc, #28]	@ (800c8e4 <prvInsertTimerInActiveList+0x80>)
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f7fe f9a4 	bl	800ac1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c8d6:	697b      	ldr	r3, [r7, #20]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3718      	adds	r7, #24
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	200017b8 	.word	0x200017b8
 800c8e4:	200017b4 	.word	0x200017b4

0800c8e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08e      	sub	sp, #56	@ 0x38
 800c8ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8ee:	e0ce      	b.n	800ca8e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	da19      	bge.n	800c92a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8f6:	1d3b      	adds	r3, r7, #4
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10b      	bne.n	800c91a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	61fb      	str	r3, [r7, #28]
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop
 800c918:	e7fd      	b.n	800c916 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c920:	6850      	ldr	r0, [r2, #4]
 800c922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c924:	6892      	ldr	r2, [r2, #8]
 800c926:	4611      	mov	r1, r2
 800c928:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f2c0 80ae 	blt.w	800ca8e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d004      	beq.n	800c948 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c940:	3304      	adds	r3, #4
 800c942:	4618      	mov	r0, r3
 800c944:	f7fe f9a4 	bl	800ac90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c948:	463b      	mov	r3, r7
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff ff6a 	bl	800c824 <prvSampleTimeNow>
 800c950:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b09      	cmp	r3, #9
 800c956:	f200 8097 	bhi.w	800ca88 <prvProcessReceivedCommands+0x1a0>
 800c95a:	a201      	add	r2, pc, #4	@ (adr r2, 800c960 <prvProcessReceivedCommands+0x78>)
 800c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c960:	0800c989 	.word	0x0800c989
 800c964:	0800c989 	.word	0x0800c989
 800c968:	0800c989 	.word	0x0800c989
 800c96c:	0800c9ff 	.word	0x0800c9ff
 800c970:	0800ca13 	.word	0x0800ca13
 800c974:	0800ca5f 	.word	0x0800ca5f
 800c978:	0800c989 	.word	0x0800c989
 800c97c:	0800c989 	.word	0x0800c989
 800c980:	0800c9ff 	.word	0x0800c9ff
 800c984:	0800ca13 	.word	0x0800ca13
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c98e:	f043 0301 	orr.w	r3, r3, #1
 800c992:	b2da      	uxtb	r2, r3
 800c994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c996:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	18d1      	adds	r1, r2, r3
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9a8:	f7ff ff5c 	bl	800c864 <prvInsertTimerInActiveList>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d06c      	beq.n	800ca8c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b4:	6a1b      	ldr	r3, [r3, #32]
 800c9b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9c0:	f003 0304 	and.w	r3, r3, #4
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d061      	beq.n	800ca8c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	441a      	add	r2, r3
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9da:	f7ff fe01 	bl	800c5e0 <xTimerGenericCommand>
 800c9de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d152      	bne.n	800ca8c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	61bb      	str	r3, [r7, #24]
}
 800c9f8:	bf00      	nop
 800c9fa:	bf00      	nop
 800c9fc:	e7fd      	b.n	800c9fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca04:	f023 0301 	bic.w	r3, r3, #1
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca10:	e03d      	b.n	800ca8e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca18:	f043 0301 	orr.w	r3, r3, #1
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10b      	bne.n	800ca4a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	617b      	str	r3, [r7, #20]
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop
 800ca48:	e7fd      	b.n	800ca46 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca4c:	699a      	ldr	r2, [r3, #24]
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca50:	18d1      	adds	r1, r2, r3
 800ca52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca58:	f7ff ff04 	bl	800c864 <prvInsertTimerInActiveList>
					break;
 800ca5c:	e017      	b.n	800ca8e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca64:	f003 0302 	and.w	r3, r3, #2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d103      	bne.n	800ca74 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ca6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca6e:	f000 fbeb 	bl	800d248 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca72:	e00c      	b.n	800ca8e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca7a:	f023 0301 	bic.w	r3, r3, #1
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca86:	e002      	b.n	800ca8e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ca88:	bf00      	nop
 800ca8a:	e000      	b.n	800ca8e <prvProcessReceivedCommands+0x1a6>
					break;
 800ca8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca8e:	4b08      	ldr	r3, [pc, #32]	@ (800cab0 <prvProcessReceivedCommands+0x1c8>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	1d39      	adds	r1, r7, #4
 800ca94:	2200      	movs	r2, #0
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fbce 	bl	800b238 <xQueueReceive>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f47f af26 	bne.w	800c8f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop
 800caa8:	3730      	adds	r7, #48	@ 0x30
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	200017bc 	.word	0x200017bc

0800cab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800caba:	e049      	b.n	800cb50 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cabc:	4b2e      	ldr	r3, [pc, #184]	@ (800cb78 <prvSwitchTimerLists+0xc4>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac6:	4b2c      	ldr	r3, [pc, #176]	@ (800cb78 <prvSwitchTimerLists+0xc4>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3304      	adds	r3, #4
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe f8db 	bl	800ac90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cae8:	f003 0304 	and.w	r3, r3, #4
 800caec:	2b00      	cmp	r3, #0
 800caee:	d02f      	beq.n	800cb50 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	699b      	ldr	r3, [r3, #24]
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	4413      	add	r3, r2
 800caf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d90e      	bls.n	800cb20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb0e:	4b1a      	ldr	r3, [pc, #104]	@ (800cb78 <prvSwitchTimerLists+0xc4>)
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3304      	adds	r3, #4
 800cb16:	4619      	mov	r1, r3
 800cb18:	4610      	mov	r0, r2
 800cb1a:	f7fe f880 	bl	800ac1e <vListInsert>
 800cb1e:	e017      	b.n	800cb50 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb20:	2300      	movs	r3, #0
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	2300      	movs	r3, #0
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	2100      	movs	r1, #0
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f7ff fd58 	bl	800c5e0 <xTimerGenericCommand>
 800cb30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10b      	bne.n	800cb50 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	603b      	str	r3, [r7, #0]
}
 800cb4a:	bf00      	nop
 800cb4c:	bf00      	nop
 800cb4e:	e7fd      	b.n	800cb4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb50:	4b09      	ldr	r3, [pc, #36]	@ (800cb78 <prvSwitchTimerLists+0xc4>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1b0      	bne.n	800cabc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb5a:	4b07      	ldr	r3, [pc, #28]	@ (800cb78 <prvSwitchTimerLists+0xc4>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb60:	4b06      	ldr	r3, [pc, #24]	@ (800cb7c <prvSwitchTimerLists+0xc8>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a04      	ldr	r2, [pc, #16]	@ (800cb78 <prvSwitchTimerLists+0xc4>)
 800cb66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb68:	4a04      	ldr	r2, [pc, #16]	@ (800cb7c <prvSwitchTimerLists+0xc8>)
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	6013      	str	r3, [r2, #0]
}
 800cb6e:	bf00      	nop
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	200017b4 	.word	0x200017b4
 800cb7c:	200017b8 	.word	0x200017b8

0800cb80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb86:	f000 f96f 	bl	800ce68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb8a:	4b15      	ldr	r3, [pc, #84]	@ (800cbe0 <prvCheckForValidListAndQueue+0x60>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d120      	bne.n	800cbd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb92:	4814      	ldr	r0, [pc, #80]	@ (800cbe4 <prvCheckForValidListAndQueue+0x64>)
 800cb94:	f7fd fff2 	bl	800ab7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb98:	4813      	ldr	r0, [pc, #76]	@ (800cbe8 <prvCheckForValidListAndQueue+0x68>)
 800cb9a:	f7fd ffef 	bl	800ab7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb9e:	4b13      	ldr	r3, [pc, #76]	@ (800cbec <prvCheckForValidListAndQueue+0x6c>)
 800cba0:	4a10      	ldr	r2, [pc, #64]	@ (800cbe4 <prvCheckForValidListAndQueue+0x64>)
 800cba2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cba4:	4b12      	ldr	r3, [pc, #72]	@ (800cbf0 <prvCheckForValidListAndQueue+0x70>)
 800cba6:	4a10      	ldr	r2, [pc, #64]	@ (800cbe8 <prvCheckForValidListAndQueue+0x68>)
 800cba8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbaa:	2300      	movs	r3, #0
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	4b11      	ldr	r3, [pc, #68]	@ (800cbf4 <prvCheckForValidListAndQueue+0x74>)
 800cbb0:	4a11      	ldr	r2, [pc, #68]	@ (800cbf8 <prvCheckForValidListAndQueue+0x78>)
 800cbb2:	2110      	movs	r1, #16
 800cbb4:	200a      	movs	r0, #10
 800cbb6:	f7fe f8ff 	bl	800adb8 <xQueueGenericCreateStatic>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	4a08      	ldr	r2, [pc, #32]	@ (800cbe0 <prvCheckForValidListAndQueue+0x60>)
 800cbbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cbc0:	4b07      	ldr	r3, [pc, #28]	@ (800cbe0 <prvCheckForValidListAndQueue+0x60>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d005      	beq.n	800cbd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cbc8:	4b05      	ldr	r3, [pc, #20]	@ (800cbe0 <prvCheckForValidListAndQueue+0x60>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	490b      	ldr	r1, [pc, #44]	@ (800cbfc <prvCheckForValidListAndQueue+0x7c>)
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fd24 	bl	800b61c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbd4:	f000 f97a 	bl	800cecc <vPortExitCritical>
}
 800cbd8:	bf00      	nop
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	200017bc 	.word	0x200017bc
 800cbe4:	2000178c 	.word	0x2000178c
 800cbe8:	200017a0 	.word	0x200017a0
 800cbec:	200017b4 	.word	0x200017b4
 800cbf0:	200017b8 	.word	0x200017b8
 800cbf4:	20001868 	.word	0x20001868
 800cbf8:	200017c8 	.word	0x200017c8
 800cbfc:	0800ff98 	.word	0x0800ff98

0800cc00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	3b04      	subs	r3, #4
 800cc10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cc18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3b04      	subs	r3, #4
 800cc1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	f023 0201 	bic.w	r2, r3, #1
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3b04      	subs	r3, #4
 800cc2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc30:	4a0c      	ldr	r2, [pc, #48]	@ (800cc64 <pxPortInitialiseStack+0x64>)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3b14      	subs	r3, #20
 800cc3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3b04      	subs	r3, #4
 800cc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f06f 0202 	mvn.w	r2, #2
 800cc4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3b20      	subs	r3, #32
 800cc54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc56:	68fb      	ldr	r3, [r7, #12]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3714      	adds	r7, #20
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr
 800cc64:	0800cc69 	.word	0x0800cc69

0800cc68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc72:	4b13      	ldr	r3, [pc, #76]	@ (800ccc0 <prvTaskExitError+0x58>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc7a:	d00b      	beq.n	800cc94 <prvTaskExitError+0x2c>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	60fb      	str	r3, [r7, #12]
}
 800cc8e:	bf00      	nop
 800cc90:	bf00      	nop
 800cc92:	e7fd      	b.n	800cc90 <prvTaskExitError+0x28>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	60bb      	str	r3, [r7, #8]
}
 800cca6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cca8:	bf00      	nop
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d0fc      	beq.n	800ccaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	20000018 	.word	0x20000018
	...

0800ccd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ccd0:	4b07      	ldr	r3, [pc, #28]	@ (800ccf0 <pxCurrentTCBConst2>)
 800ccd2:	6819      	ldr	r1, [r3, #0]
 800ccd4:	6808      	ldr	r0, [r1, #0]
 800ccd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccda:	f380 8809 	msr	PSP, r0
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f04f 0000 	mov.w	r0, #0
 800cce6:	f380 8811 	msr	BASEPRI, r0
 800ccea:	4770      	bx	lr
 800ccec:	f3af 8000 	nop.w

0800ccf0 <pxCurrentTCBConst2>:
 800ccf0:	2000128c 	.word	0x2000128c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ccf4:	bf00      	nop
 800ccf6:	bf00      	nop

0800ccf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ccf8:	4808      	ldr	r0, [pc, #32]	@ (800cd1c <prvPortStartFirstTask+0x24>)
 800ccfa:	6800      	ldr	r0, [r0, #0]
 800ccfc:	6800      	ldr	r0, [r0, #0]
 800ccfe:	f380 8808 	msr	MSP, r0
 800cd02:	f04f 0000 	mov.w	r0, #0
 800cd06:	f380 8814 	msr	CONTROL, r0
 800cd0a:	b662      	cpsie	i
 800cd0c:	b661      	cpsie	f
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	df00      	svc	0
 800cd18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd1a:	bf00      	nop
 800cd1c:	e000ed08 	.word	0xe000ed08

0800cd20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd26:	4b47      	ldr	r3, [pc, #284]	@ (800ce44 <xPortStartScheduler+0x124>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a47      	ldr	r2, [pc, #284]	@ (800ce48 <xPortStartScheduler+0x128>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d10b      	bne.n	800cd48 <xPortStartScheduler+0x28>
	__asm volatile
 800cd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	613b      	str	r3, [r7, #16]
}
 800cd42:	bf00      	nop
 800cd44:	bf00      	nop
 800cd46:	e7fd      	b.n	800cd44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd48:	4b3e      	ldr	r3, [pc, #248]	@ (800ce44 <xPortStartScheduler+0x124>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a3f      	ldr	r2, [pc, #252]	@ (800ce4c <xPortStartScheduler+0x12c>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d10b      	bne.n	800cd6a <xPortStartScheduler+0x4a>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	60fb      	str	r3, [r7, #12]
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop
 800cd68:	e7fd      	b.n	800cd66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd6a:	4b39      	ldr	r3, [pc, #228]	@ (800ce50 <xPortStartScheduler+0x130>)
 800cd6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	22ff      	movs	r2, #255	@ 0xff
 800cd7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	4b31      	ldr	r3, [pc, #196]	@ (800ce54 <xPortStartScheduler+0x134>)
 800cd90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd92:	4b31      	ldr	r3, [pc, #196]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cd94:	2207      	movs	r2, #7
 800cd96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd98:	e009      	b.n	800cdae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cd9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	4a2d      	ldr	r2, [pc, #180]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cda2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cda4:	78fb      	ldrb	r3, [r7, #3]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdae:	78fb      	ldrb	r3, [r7, #3]
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdb6:	2b80      	cmp	r3, #128	@ 0x80
 800cdb8:	d0ef      	beq.n	800cd9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdba:	4b27      	ldr	r3, [pc, #156]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f1c3 0307 	rsb	r3, r3, #7
 800cdc2:	2b04      	cmp	r3, #4
 800cdc4:	d00b      	beq.n	800cdde <xPortStartScheduler+0xbe>
	__asm volatile
 800cdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	60bb      	str	r3, [r7, #8]
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	e7fd      	b.n	800cdda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cdde:	4b1e      	ldr	r3, [pc, #120]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	4a1c      	ldr	r2, [pc, #112]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cde6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cde8:	4b1b      	ldr	r3, [pc, #108]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cdf0:	4a19      	ldr	r2, [pc, #100]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cdf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cdfc:	4b17      	ldr	r3, [pc, #92]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a16      	ldr	r2, [pc, #88]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800ce02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce08:	4b14      	ldr	r3, [pc, #80]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a13      	ldr	r2, [pc, #76]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800ce0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce14:	f000 f8da 	bl	800cfcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce18:	4b11      	ldr	r3, [pc, #68]	@ (800ce60 <xPortStartScheduler+0x140>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce1e:	f000 f8f9 	bl	800d014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce22:	4b10      	ldr	r3, [pc, #64]	@ (800ce64 <xPortStartScheduler+0x144>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a0f      	ldr	r2, [pc, #60]	@ (800ce64 <xPortStartScheduler+0x144>)
 800ce28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ce2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce2e:	f7ff ff63 	bl	800ccf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce32:	f7ff f82b 	bl	800be8c <vTaskSwitchContext>
	prvTaskExitError();
 800ce36:	f7ff ff17 	bl	800cc68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	e000ed00 	.word	0xe000ed00
 800ce48:	410fc271 	.word	0x410fc271
 800ce4c:	410fc270 	.word	0x410fc270
 800ce50:	e000e400 	.word	0xe000e400
 800ce54:	200018b8 	.word	0x200018b8
 800ce58:	200018bc 	.word	0x200018bc
 800ce5c:	e000ed20 	.word	0xe000ed20
 800ce60:	20000018 	.word	0x20000018
 800ce64:	e000ef34 	.word	0xe000ef34

0800ce68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce82:	4b10      	ldr	r3, [pc, #64]	@ (800cec4 <vPortEnterCritical+0x5c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3301      	adds	r3, #1
 800ce88:	4a0e      	ldr	r2, [pc, #56]	@ (800cec4 <vPortEnterCritical+0x5c>)
 800ce8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce8c:	4b0d      	ldr	r3, [pc, #52]	@ (800cec4 <vPortEnterCritical+0x5c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d110      	bne.n	800ceb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce94:	4b0c      	ldr	r3, [pc, #48]	@ (800cec8 <vPortEnterCritical+0x60>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00b      	beq.n	800ceb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	603b      	str	r3, [r7, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	bf00      	nop
 800ceb4:	e7fd      	b.n	800ceb2 <vPortEnterCritical+0x4a>
	}
}
 800ceb6:	bf00      	nop
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	20000018 	.word	0x20000018
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ced2:	4b12      	ldr	r3, [pc, #72]	@ (800cf1c <vPortExitCritical+0x50>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <vPortExitCritical+0x26>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	607b      	str	r3, [r7, #4]
}
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
 800cef0:	e7fd      	b.n	800ceee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cef2:	4b0a      	ldr	r3, [pc, #40]	@ (800cf1c <vPortExitCritical+0x50>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	4a08      	ldr	r2, [pc, #32]	@ (800cf1c <vPortExitCritical+0x50>)
 800cefa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cefc:	4b07      	ldr	r3, [pc, #28]	@ (800cf1c <vPortExitCritical+0x50>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d105      	bne.n	800cf10 <vPortExitCritical+0x44>
 800cf04:	2300      	movs	r3, #0
 800cf06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f383 8811 	msr	BASEPRI, r3
}
 800cf0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	20000018 	.word	0x20000018

0800cf20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf20:	f3ef 8009 	mrs	r0, PSP
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	4b15      	ldr	r3, [pc, #84]	@ (800cf80 <pxCurrentTCBConst>)
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	f01e 0f10 	tst.w	lr, #16
 800cf30:	bf08      	it	eq
 800cf32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3a:	6010      	str	r0, [r2, #0]
 800cf3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cf44:	f380 8811 	msr	BASEPRI, r0
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f7fe ff9c 	bl	800be8c <vTaskSwitchContext>
 800cf54:	f04f 0000 	mov.w	r0, #0
 800cf58:	f380 8811 	msr	BASEPRI, r0
 800cf5c:	bc09      	pop	{r0, r3}
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	6808      	ldr	r0, [r1, #0]
 800cf62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf66:	f01e 0f10 	tst.w	lr, #16
 800cf6a:	bf08      	it	eq
 800cf6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf70:	f380 8809 	msr	PSP, r0
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	f3af 8000 	nop.w

0800cf80 <pxCurrentTCBConst>:
 800cf80:	2000128c 	.word	0x2000128c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop

0800cf88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	607b      	str	r3, [r7, #4]
}
 800cfa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfa2:	f7fe feb9 	bl	800bd18 <xTaskIncrementTick>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfac:	4b06      	ldr	r3, [pc, #24]	@ (800cfc8 <xPortSysTickHandler+0x40>)
 800cfae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	f383 8811 	msr	BASEPRI, r3
}
 800cfbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	e000ed04 	.word	0xe000ed04

0800cfcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800d000 <vPortSetupTimerInterrupt+0x34>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfd6:	4b0b      	ldr	r3, [pc, #44]	@ (800d004 <vPortSetupTimerInterrupt+0x38>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	@ (800d008 <vPortSetupTimerInterrupt+0x3c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a0a      	ldr	r2, [pc, #40]	@ (800d00c <vPortSetupTimerInterrupt+0x40>)
 800cfe2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe6:	099b      	lsrs	r3, r3, #6
 800cfe8:	4a09      	ldr	r2, [pc, #36]	@ (800d010 <vPortSetupTimerInterrupt+0x44>)
 800cfea:	3b01      	subs	r3, #1
 800cfec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfee:	4b04      	ldr	r3, [pc, #16]	@ (800d000 <vPortSetupTimerInterrupt+0x34>)
 800cff0:	2207      	movs	r2, #7
 800cff2:	601a      	str	r2, [r3, #0]
}
 800cff4:	bf00      	nop
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	e000e010 	.word	0xe000e010
 800d004:	e000e018 	.word	0xe000e018
 800d008:	2000000c 	.word	0x2000000c
 800d00c:	10624dd3 	.word	0x10624dd3
 800d010:	e000e014 	.word	0xe000e014

0800d014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d024 <vPortEnableVFP+0x10>
 800d018:	6801      	ldr	r1, [r0, #0]
 800d01a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d01e:	6001      	str	r1, [r0, #0]
 800d020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d022:	bf00      	nop
 800d024:	e000ed88 	.word	0xe000ed88

0800d028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d02e:	f3ef 8305 	mrs	r3, IPSR
 800d032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b0f      	cmp	r3, #15
 800d038:	d915      	bls.n	800d066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d03a:	4a18      	ldr	r2, [pc, #96]	@ (800d09c <vPortValidateInterruptPriority+0x74>)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4413      	add	r3, r2
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d044:	4b16      	ldr	r3, [pc, #88]	@ (800d0a0 <vPortValidateInterruptPriority+0x78>)
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	7afa      	ldrb	r2, [r7, #11]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d20b      	bcs.n	800d066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	607b      	str	r3, [r7, #4]
}
 800d060:	bf00      	nop
 800d062:	bf00      	nop
 800d064:	e7fd      	b.n	800d062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d066:	4b0f      	ldr	r3, [pc, #60]	@ (800d0a4 <vPortValidateInterruptPriority+0x7c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d06e:	4b0e      	ldr	r3, [pc, #56]	@ (800d0a8 <vPortValidateInterruptPriority+0x80>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	429a      	cmp	r2, r3
 800d074:	d90b      	bls.n	800d08e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	603b      	str	r3, [r7, #0]
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <vPortValidateInterruptPriority+0x62>
	}
 800d08e:	bf00      	nop
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	e000e3f0 	.word	0xe000e3f0
 800d0a0:	200018b8 	.word	0x200018b8
 800d0a4:	e000ed0c 	.word	0xe000ed0c
 800d0a8:	200018bc 	.word	0x200018bc

0800d0ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08a      	sub	sp, #40	@ 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0b8:	f7fe fd72 	bl	800bba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800d230 <pvPortMalloc+0x184>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0c4:	f000 f924 	bl	800d310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0c8:	4b5a      	ldr	r3, [pc, #360]	@ (800d234 <pvPortMalloc+0x188>)
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4013      	ands	r3, r2
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f040 8095 	bne.w	800d200 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d01e      	beq.n	800d11a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d0dc:	2208      	movs	r2, #8
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d015      	beq.n	800d11a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f023 0307 	bic.w	r3, r3, #7
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f003 0307 	and.w	r3, r3, #7
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00b      	beq.n	800d11a <pvPortMalloc+0x6e>
	__asm volatile
 800d102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	617b      	str	r3, [r7, #20]
}
 800d114:	bf00      	nop
 800d116:	bf00      	nop
 800d118:	e7fd      	b.n	800d116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d06f      	beq.n	800d200 <pvPortMalloc+0x154>
 800d120:	4b45      	ldr	r3, [pc, #276]	@ (800d238 <pvPortMalloc+0x18c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	429a      	cmp	r2, r3
 800d128:	d86a      	bhi.n	800d200 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d12a:	4b44      	ldr	r3, [pc, #272]	@ (800d23c <pvPortMalloc+0x190>)
 800d12c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d12e:	4b43      	ldr	r3, [pc, #268]	@ (800d23c <pvPortMalloc+0x190>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d134:	e004      	b.n	800d140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	429a      	cmp	r2, r3
 800d148:	d903      	bls.n	800d152 <pvPortMalloc+0xa6>
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1f1      	bne.n	800d136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d152:	4b37      	ldr	r3, [pc, #220]	@ (800d230 <pvPortMalloc+0x184>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d158:	429a      	cmp	r2, r3
 800d15a:	d051      	beq.n	800d200 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d15c:	6a3b      	ldr	r3, [r7, #32]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2208      	movs	r2, #8
 800d162:	4413      	add	r3, r2
 800d164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	1ad2      	subs	r2, r2, r3
 800d176:	2308      	movs	r3, #8
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d920      	bls.n	800d1c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4413      	add	r3, r2
 800d184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	f003 0307 	and.w	r3, r3, #7
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00b      	beq.n	800d1a8 <pvPortMalloc+0xfc>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	613b      	str	r3, [r7, #16]
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	e7fd      	b.n	800d1a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	1ad2      	subs	r2, r2, r3
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1ba:	69b8      	ldr	r0, [r7, #24]
 800d1bc:	f000 f90a 	bl	800d3d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800d238 <pvPortMalloc+0x18c>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d238 <pvPortMalloc+0x18c>)
 800d1cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d238 <pvPortMalloc+0x18c>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d240 <pvPortMalloc+0x194>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d203      	bcs.n	800d1e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1da:	4b17      	ldr	r3, [pc, #92]	@ (800d238 <pvPortMalloc+0x18c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a18      	ldr	r2, [pc, #96]	@ (800d240 <pvPortMalloc+0x194>)
 800d1e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	4b13      	ldr	r3, [pc, #76]	@ (800d234 <pvPortMalloc+0x188>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	431a      	orrs	r2, r3
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1f6:	4b13      	ldr	r3, [pc, #76]	@ (800d244 <pvPortMalloc+0x198>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	4a11      	ldr	r2, [pc, #68]	@ (800d244 <pvPortMalloc+0x198>)
 800d1fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d200:	f7fe fcdc 	bl	800bbbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	f003 0307 	and.w	r3, r3, #7
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00b      	beq.n	800d226 <pvPortMalloc+0x17a>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	60fb      	str	r3, [r7, #12]
}
 800d220:	bf00      	nop
 800d222:	bf00      	nop
 800d224:	e7fd      	b.n	800d222 <pvPortMalloc+0x176>
	return pvReturn;
 800d226:	69fb      	ldr	r3, [r7, #28]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3728      	adds	r7, #40	@ 0x28
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	200095c8 	.word	0x200095c8
 800d234:	200095dc 	.word	0x200095dc
 800d238:	200095cc 	.word	0x200095cc
 800d23c:	200095c0 	.word	0x200095c0
 800d240:	200095d0 	.word	0x200095d0
 800d244:	200095d4 	.word	0x200095d4

0800d248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d04f      	beq.n	800d2fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d25a:	2308      	movs	r3, #8
 800d25c:	425b      	negs	r3, r3
 800d25e:	697a      	ldr	r2, [r7, #20]
 800d260:	4413      	add	r3, r2
 800d262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	685a      	ldr	r2, [r3, #4]
 800d26c:	4b25      	ldr	r3, [pc, #148]	@ (800d304 <vPortFree+0xbc>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4013      	ands	r3, r2
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10b      	bne.n	800d28e <vPortFree+0x46>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	60fb      	str	r3, [r7, #12]
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	e7fd      	b.n	800d28a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00b      	beq.n	800d2ae <vPortFree+0x66>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	60bb      	str	r3, [r7, #8]
}
 800d2a8:	bf00      	nop
 800d2aa:	bf00      	nop
 800d2ac:	e7fd      	b.n	800d2aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	685a      	ldr	r2, [r3, #4]
 800d2b2:	4b14      	ldr	r3, [pc, #80]	@ (800d304 <vPortFree+0xbc>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01e      	beq.n	800d2fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d11a      	bne.n	800d2fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d304 <vPortFree+0xbc>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	43db      	mvns	r3, r3
 800d2ce:	401a      	ands	r2, r3
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2d4:	f7fe fc64 	bl	800bba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d308 <vPortFree+0xc0>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	4a09      	ldr	r2, [pc, #36]	@ (800d308 <vPortFree+0xc0>)
 800d2e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2e6:	6938      	ldr	r0, [r7, #16]
 800d2e8:	f000 f874 	bl	800d3d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2ec:	4b07      	ldr	r3, [pc, #28]	@ (800d30c <vPortFree+0xc4>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	4a06      	ldr	r2, [pc, #24]	@ (800d30c <vPortFree+0xc4>)
 800d2f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2f6:	f7fe fc61 	bl	800bbbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2fa:	bf00      	nop
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	200095dc 	.word	0x200095dc
 800d308:	200095cc 	.word	0x200095cc
 800d30c:	200095d8 	.word	0x200095d8

0800d310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d316:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d31a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d31c:	4b27      	ldr	r3, [pc, #156]	@ (800d3bc <prvHeapInit+0xac>)
 800d31e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f003 0307 	and.w	r3, r3, #7
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00c      	beq.n	800d344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3307      	adds	r3, #7
 800d32e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f023 0307 	bic.w	r3, r3, #7
 800d336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	4a1f      	ldr	r2, [pc, #124]	@ (800d3bc <prvHeapInit+0xac>)
 800d340:	4413      	add	r3, r2
 800d342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d348:	4a1d      	ldr	r2, [pc, #116]	@ (800d3c0 <prvHeapInit+0xb0>)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d34e:	4b1c      	ldr	r3, [pc, #112]	@ (800d3c0 <prvHeapInit+0xb0>)
 800d350:	2200      	movs	r2, #0
 800d352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	4413      	add	r3, r2
 800d35a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d35c:	2208      	movs	r2, #8
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	1a9b      	subs	r3, r3, r2
 800d362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f023 0307 	bic.w	r3, r3, #7
 800d36a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	4a15      	ldr	r2, [pc, #84]	@ (800d3c4 <prvHeapInit+0xb4>)
 800d370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d372:	4b14      	ldr	r3, [pc, #80]	@ (800d3c4 <prvHeapInit+0xb4>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2200      	movs	r2, #0
 800d378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d37a:	4b12      	ldr	r3, [pc, #72]	@ (800d3c4 <prvHeapInit+0xb4>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	1ad2      	subs	r2, r2, r3
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d390:	4b0c      	ldr	r3, [pc, #48]	@ (800d3c4 <prvHeapInit+0xb4>)
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	4a0a      	ldr	r2, [pc, #40]	@ (800d3c8 <prvHeapInit+0xb8>)
 800d39e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	4a09      	ldr	r2, [pc, #36]	@ (800d3cc <prvHeapInit+0xbc>)
 800d3a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3a8:	4b09      	ldr	r3, [pc, #36]	@ (800d3d0 <prvHeapInit+0xc0>)
 800d3aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d3ae:	601a      	str	r2, [r3, #0]
}
 800d3b0:	bf00      	nop
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	200018c0 	.word	0x200018c0
 800d3c0:	200095c0 	.word	0x200095c0
 800d3c4:	200095c8 	.word	0x200095c8
 800d3c8:	200095d0 	.word	0x200095d0
 800d3cc:	200095cc 	.word	0x200095cc
 800d3d0:	200095dc 	.word	0x200095dc

0800d3d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3dc:	4b28      	ldr	r3, [pc, #160]	@ (800d480 <prvInsertBlockIntoFreeList+0xac>)
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	e002      	b.n	800d3e8 <prvInsertBlockIntoFreeList+0x14>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	60fb      	str	r3, [r7, #12]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d8f7      	bhi.n	800d3e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d108      	bne.n	800d416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	685a      	ldr	r2, [r3, #4]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	441a      	add	r2, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	441a      	add	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	429a      	cmp	r2, r3
 800d428:	d118      	bne.n	800d45c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	4b15      	ldr	r3, [pc, #84]	@ (800d484 <prvInsertBlockIntoFreeList+0xb0>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d00d      	beq.n	800d452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685a      	ldr	r2, [r3, #4]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	441a      	add	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	e008      	b.n	800d464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d452:	4b0c      	ldr	r3, [pc, #48]	@ (800d484 <prvInsertBlockIntoFreeList+0xb0>)
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	601a      	str	r2, [r3, #0]
 800d45a:	e003      	b.n	800d464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d002      	beq.n	800d472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d472:	bf00      	nop
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	200095c0 	.word	0x200095c0
 800d484:	200095c8 	.word	0x200095c8

0800d488 <__cvt>:
 800d488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d48c:	ec57 6b10 	vmov	r6, r7, d0
 800d490:	2f00      	cmp	r7, #0
 800d492:	460c      	mov	r4, r1
 800d494:	4619      	mov	r1, r3
 800d496:	463b      	mov	r3, r7
 800d498:	bfbb      	ittet	lt
 800d49a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d49e:	461f      	movlt	r7, r3
 800d4a0:	2300      	movge	r3, #0
 800d4a2:	232d      	movlt	r3, #45	@ 0x2d
 800d4a4:	700b      	strb	r3, [r1, #0]
 800d4a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d4ac:	4691      	mov	r9, r2
 800d4ae:	f023 0820 	bic.w	r8, r3, #32
 800d4b2:	bfbc      	itt	lt
 800d4b4:	4632      	movlt	r2, r6
 800d4b6:	4616      	movlt	r6, r2
 800d4b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4bc:	d005      	beq.n	800d4ca <__cvt+0x42>
 800d4be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d4c2:	d100      	bne.n	800d4c6 <__cvt+0x3e>
 800d4c4:	3401      	adds	r4, #1
 800d4c6:	2102      	movs	r1, #2
 800d4c8:	e000      	b.n	800d4cc <__cvt+0x44>
 800d4ca:	2103      	movs	r1, #3
 800d4cc:	ab03      	add	r3, sp, #12
 800d4ce:	9301      	str	r3, [sp, #4]
 800d4d0:	ab02      	add	r3, sp, #8
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	ec47 6b10 	vmov	d0, r6, r7
 800d4d8:	4653      	mov	r3, sl
 800d4da:	4622      	mov	r2, r4
 800d4dc:	f000 fe28 	bl	800e130 <_dtoa_r>
 800d4e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	d119      	bne.n	800d51c <__cvt+0x94>
 800d4e8:	f019 0f01 	tst.w	r9, #1
 800d4ec:	d00e      	beq.n	800d50c <__cvt+0x84>
 800d4ee:	eb00 0904 	add.w	r9, r0, r4
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	f7f3 fabd 	bl	8000a78 <__aeabi_dcmpeq>
 800d4fe:	b108      	cbz	r0, 800d504 <__cvt+0x7c>
 800d500:	f8cd 900c 	str.w	r9, [sp, #12]
 800d504:	2230      	movs	r2, #48	@ 0x30
 800d506:	9b03      	ldr	r3, [sp, #12]
 800d508:	454b      	cmp	r3, r9
 800d50a:	d31e      	bcc.n	800d54a <__cvt+0xc2>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d510:	1b5b      	subs	r3, r3, r5
 800d512:	4628      	mov	r0, r5
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	b004      	add	sp, #16
 800d518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d520:	eb00 0904 	add.w	r9, r0, r4
 800d524:	d1e5      	bne.n	800d4f2 <__cvt+0x6a>
 800d526:	7803      	ldrb	r3, [r0, #0]
 800d528:	2b30      	cmp	r3, #48	@ 0x30
 800d52a:	d10a      	bne.n	800d542 <__cvt+0xba>
 800d52c:	2200      	movs	r2, #0
 800d52e:	2300      	movs	r3, #0
 800d530:	4630      	mov	r0, r6
 800d532:	4639      	mov	r1, r7
 800d534:	f7f3 faa0 	bl	8000a78 <__aeabi_dcmpeq>
 800d538:	b918      	cbnz	r0, 800d542 <__cvt+0xba>
 800d53a:	f1c4 0401 	rsb	r4, r4, #1
 800d53e:	f8ca 4000 	str.w	r4, [sl]
 800d542:	f8da 3000 	ldr.w	r3, [sl]
 800d546:	4499      	add	r9, r3
 800d548:	e7d3      	b.n	800d4f2 <__cvt+0x6a>
 800d54a:	1c59      	adds	r1, r3, #1
 800d54c:	9103      	str	r1, [sp, #12]
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e7d9      	b.n	800d506 <__cvt+0x7e>

0800d552 <__exponent>:
 800d552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d554:	2900      	cmp	r1, #0
 800d556:	bfba      	itte	lt
 800d558:	4249      	neglt	r1, r1
 800d55a:	232d      	movlt	r3, #45	@ 0x2d
 800d55c:	232b      	movge	r3, #43	@ 0x2b
 800d55e:	2909      	cmp	r1, #9
 800d560:	7002      	strb	r2, [r0, #0]
 800d562:	7043      	strb	r3, [r0, #1]
 800d564:	dd29      	ble.n	800d5ba <__exponent+0x68>
 800d566:	f10d 0307 	add.w	r3, sp, #7
 800d56a:	461d      	mov	r5, r3
 800d56c:	270a      	movs	r7, #10
 800d56e:	461a      	mov	r2, r3
 800d570:	fbb1 f6f7 	udiv	r6, r1, r7
 800d574:	fb07 1416 	mls	r4, r7, r6, r1
 800d578:	3430      	adds	r4, #48	@ 0x30
 800d57a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d57e:	460c      	mov	r4, r1
 800d580:	2c63      	cmp	r4, #99	@ 0x63
 800d582:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d586:	4631      	mov	r1, r6
 800d588:	dcf1      	bgt.n	800d56e <__exponent+0x1c>
 800d58a:	3130      	adds	r1, #48	@ 0x30
 800d58c:	1e94      	subs	r4, r2, #2
 800d58e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d592:	1c41      	adds	r1, r0, #1
 800d594:	4623      	mov	r3, r4
 800d596:	42ab      	cmp	r3, r5
 800d598:	d30a      	bcc.n	800d5b0 <__exponent+0x5e>
 800d59a:	f10d 0309 	add.w	r3, sp, #9
 800d59e:	1a9b      	subs	r3, r3, r2
 800d5a0:	42ac      	cmp	r4, r5
 800d5a2:	bf88      	it	hi
 800d5a4:	2300      	movhi	r3, #0
 800d5a6:	3302      	adds	r3, #2
 800d5a8:	4403      	add	r3, r0
 800d5aa:	1a18      	subs	r0, r3, r0
 800d5ac:	b003      	add	sp, #12
 800d5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d5b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d5b8:	e7ed      	b.n	800d596 <__exponent+0x44>
 800d5ba:	2330      	movs	r3, #48	@ 0x30
 800d5bc:	3130      	adds	r1, #48	@ 0x30
 800d5be:	7083      	strb	r3, [r0, #2]
 800d5c0:	70c1      	strb	r1, [r0, #3]
 800d5c2:	1d03      	adds	r3, r0, #4
 800d5c4:	e7f1      	b.n	800d5aa <__exponent+0x58>
	...

0800d5c8 <_printf_float>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	b08d      	sub	sp, #52	@ 0x34
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d5d4:	4616      	mov	r6, r2
 800d5d6:	461f      	mov	r7, r3
 800d5d8:	4605      	mov	r5, r0
 800d5da:	f000 fc89 	bl	800def0 <_localeconv_r>
 800d5de:	6803      	ldr	r3, [r0, #0]
 800d5e0:	9304      	str	r3, [sp, #16]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f2 fe1c 	bl	8000220 <strlen>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d5f0:	9005      	str	r0, [sp, #20]
 800d5f2:	3307      	adds	r3, #7
 800d5f4:	f023 0307 	bic.w	r3, r3, #7
 800d5f8:	f103 0208 	add.w	r2, r3, #8
 800d5fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d600:	f8d4 b000 	ldr.w	fp, [r4]
 800d604:	f8c8 2000 	str.w	r2, [r8]
 800d608:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d60c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d610:	9307      	str	r3, [sp, #28]
 800d612:	f8cd 8018 	str.w	r8, [sp, #24]
 800d616:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d61a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d61e:	4b9c      	ldr	r3, [pc, #624]	@ (800d890 <_printf_float+0x2c8>)
 800d620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d624:	f7f3 fa5a 	bl	8000adc <__aeabi_dcmpun>
 800d628:	bb70      	cbnz	r0, 800d688 <_printf_float+0xc0>
 800d62a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d62e:	4b98      	ldr	r3, [pc, #608]	@ (800d890 <_printf_float+0x2c8>)
 800d630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d634:	f7f3 fa34 	bl	8000aa0 <__aeabi_dcmple>
 800d638:	bb30      	cbnz	r0, 800d688 <_printf_float+0xc0>
 800d63a:	2200      	movs	r2, #0
 800d63c:	2300      	movs	r3, #0
 800d63e:	4640      	mov	r0, r8
 800d640:	4649      	mov	r1, r9
 800d642:	f7f3 fa23 	bl	8000a8c <__aeabi_dcmplt>
 800d646:	b110      	cbz	r0, 800d64e <_printf_float+0x86>
 800d648:	232d      	movs	r3, #45	@ 0x2d
 800d64a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d64e:	4a91      	ldr	r2, [pc, #580]	@ (800d894 <_printf_float+0x2cc>)
 800d650:	4b91      	ldr	r3, [pc, #580]	@ (800d898 <_printf_float+0x2d0>)
 800d652:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d656:	bf94      	ite	ls
 800d658:	4690      	movls	r8, r2
 800d65a:	4698      	movhi	r8, r3
 800d65c:	2303      	movs	r3, #3
 800d65e:	6123      	str	r3, [r4, #16]
 800d660:	f02b 0304 	bic.w	r3, fp, #4
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	f04f 0900 	mov.w	r9, #0
 800d66a:	9700      	str	r7, [sp, #0]
 800d66c:	4633      	mov	r3, r6
 800d66e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d670:	4621      	mov	r1, r4
 800d672:	4628      	mov	r0, r5
 800d674:	f000 f9d2 	bl	800da1c <_printf_common>
 800d678:	3001      	adds	r0, #1
 800d67a:	f040 808d 	bne.w	800d798 <_printf_float+0x1d0>
 800d67e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d682:	b00d      	add	sp, #52	@ 0x34
 800d684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d688:	4642      	mov	r2, r8
 800d68a:	464b      	mov	r3, r9
 800d68c:	4640      	mov	r0, r8
 800d68e:	4649      	mov	r1, r9
 800d690:	f7f3 fa24 	bl	8000adc <__aeabi_dcmpun>
 800d694:	b140      	cbz	r0, 800d6a8 <_printf_float+0xe0>
 800d696:	464b      	mov	r3, r9
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bfbc      	itt	lt
 800d69c:	232d      	movlt	r3, #45	@ 0x2d
 800d69e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6a2:	4a7e      	ldr	r2, [pc, #504]	@ (800d89c <_printf_float+0x2d4>)
 800d6a4:	4b7e      	ldr	r3, [pc, #504]	@ (800d8a0 <_printf_float+0x2d8>)
 800d6a6:	e7d4      	b.n	800d652 <_printf_float+0x8a>
 800d6a8:	6863      	ldr	r3, [r4, #4]
 800d6aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d6ae:	9206      	str	r2, [sp, #24]
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	d13b      	bne.n	800d72c <_printf_float+0x164>
 800d6b4:	2306      	movs	r3, #6
 800d6b6:	6063      	str	r3, [r4, #4]
 800d6b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d6bc:	2300      	movs	r3, #0
 800d6be:	6022      	str	r2, [r4, #0]
 800d6c0:	9303      	str	r3, [sp, #12]
 800d6c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d6c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d6c8:	ab09      	add	r3, sp, #36	@ 0x24
 800d6ca:	9300      	str	r3, [sp, #0]
 800d6cc:	6861      	ldr	r1, [r4, #4]
 800d6ce:	ec49 8b10 	vmov	d0, r8, r9
 800d6d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	f7ff fed6 	bl	800d488 <__cvt>
 800d6dc:	9b06      	ldr	r3, [sp, #24]
 800d6de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6e0:	2b47      	cmp	r3, #71	@ 0x47
 800d6e2:	4680      	mov	r8, r0
 800d6e4:	d129      	bne.n	800d73a <_printf_float+0x172>
 800d6e6:	1cc8      	adds	r0, r1, #3
 800d6e8:	db02      	blt.n	800d6f0 <_printf_float+0x128>
 800d6ea:	6863      	ldr	r3, [r4, #4]
 800d6ec:	4299      	cmp	r1, r3
 800d6ee:	dd41      	ble.n	800d774 <_printf_float+0x1ac>
 800d6f0:	f1aa 0a02 	sub.w	sl, sl, #2
 800d6f4:	fa5f fa8a 	uxtb.w	sl, sl
 800d6f8:	3901      	subs	r1, #1
 800d6fa:	4652      	mov	r2, sl
 800d6fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d700:	9109      	str	r1, [sp, #36]	@ 0x24
 800d702:	f7ff ff26 	bl	800d552 <__exponent>
 800d706:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d708:	1813      	adds	r3, r2, r0
 800d70a:	2a01      	cmp	r2, #1
 800d70c:	4681      	mov	r9, r0
 800d70e:	6123      	str	r3, [r4, #16]
 800d710:	dc02      	bgt.n	800d718 <_printf_float+0x150>
 800d712:	6822      	ldr	r2, [r4, #0]
 800d714:	07d2      	lsls	r2, r2, #31
 800d716:	d501      	bpl.n	800d71c <_printf_float+0x154>
 800d718:	3301      	adds	r3, #1
 800d71a:	6123      	str	r3, [r4, #16]
 800d71c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0a2      	beq.n	800d66a <_printf_float+0xa2>
 800d724:	232d      	movs	r3, #45	@ 0x2d
 800d726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d72a:	e79e      	b.n	800d66a <_printf_float+0xa2>
 800d72c:	9a06      	ldr	r2, [sp, #24]
 800d72e:	2a47      	cmp	r2, #71	@ 0x47
 800d730:	d1c2      	bne.n	800d6b8 <_printf_float+0xf0>
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1c0      	bne.n	800d6b8 <_printf_float+0xf0>
 800d736:	2301      	movs	r3, #1
 800d738:	e7bd      	b.n	800d6b6 <_printf_float+0xee>
 800d73a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d73e:	d9db      	bls.n	800d6f8 <_printf_float+0x130>
 800d740:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d744:	d118      	bne.n	800d778 <_printf_float+0x1b0>
 800d746:	2900      	cmp	r1, #0
 800d748:	6863      	ldr	r3, [r4, #4]
 800d74a:	dd0b      	ble.n	800d764 <_printf_float+0x19c>
 800d74c:	6121      	str	r1, [r4, #16]
 800d74e:	b913      	cbnz	r3, 800d756 <_printf_float+0x18e>
 800d750:	6822      	ldr	r2, [r4, #0]
 800d752:	07d0      	lsls	r0, r2, #31
 800d754:	d502      	bpl.n	800d75c <_printf_float+0x194>
 800d756:	3301      	adds	r3, #1
 800d758:	440b      	add	r3, r1
 800d75a:	6123      	str	r3, [r4, #16]
 800d75c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d75e:	f04f 0900 	mov.w	r9, #0
 800d762:	e7db      	b.n	800d71c <_printf_float+0x154>
 800d764:	b913      	cbnz	r3, 800d76c <_printf_float+0x1a4>
 800d766:	6822      	ldr	r2, [r4, #0]
 800d768:	07d2      	lsls	r2, r2, #31
 800d76a:	d501      	bpl.n	800d770 <_printf_float+0x1a8>
 800d76c:	3302      	adds	r3, #2
 800d76e:	e7f4      	b.n	800d75a <_printf_float+0x192>
 800d770:	2301      	movs	r3, #1
 800d772:	e7f2      	b.n	800d75a <_printf_float+0x192>
 800d774:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d77a:	4299      	cmp	r1, r3
 800d77c:	db05      	blt.n	800d78a <_printf_float+0x1c2>
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	6121      	str	r1, [r4, #16]
 800d782:	07d8      	lsls	r0, r3, #31
 800d784:	d5ea      	bpl.n	800d75c <_printf_float+0x194>
 800d786:	1c4b      	adds	r3, r1, #1
 800d788:	e7e7      	b.n	800d75a <_printf_float+0x192>
 800d78a:	2900      	cmp	r1, #0
 800d78c:	bfd4      	ite	le
 800d78e:	f1c1 0202 	rsble	r2, r1, #2
 800d792:	2201      	movgt	r2, #1
 800d794:	4413      	add	r3, r2
 800d796:	e7e0      	b.n	800d75a <_printf_float+0x192>
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	055a      	lsls	r2, r3, #21
 800d79c:	d407      	bmi.n	800d7ae <_printf_float+0x1e6>
 800d79e:	6923      	ldr	r3, [r4, #16]
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	47b8      	blx	r7
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	d12b      	bne.n	800d804 <_printf_float+0x23c>
 800d7ac:	e767      	b.n	800d67e <_printf_float+0xb6>
 800d7ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7b2:	f240 80dd 	bls.w	800d970 <_printf_float+0x3a8>
 800d7b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f7f3 f95b 	bl	8000a78 <__aeabi_dcmpeq>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d033      	beq.n	800d82e <_printf_float+0x266>
 800d7c6:	4a37      	ldr	r2, [pc, #220]	@ (800d8a4 <_printf_float+0x2dc>)
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b8      	blx	r7
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	f43f af54 	beq.w	800d67e <_printf_float+0xb6>
 800d7d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d7da:	4543      	cmp	r3, r8
 800d7dc:	db02      	blt.n	800d7e4 <_printf_float+0x21c>
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	07d8      	lsls	r0, r3, #31
 800d7e2:	d50f      	bpl.n	800d804 <_printf_float+0x23c>
 800d7e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7e8:	4631      	mov	r1, r6
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	47b8      	blx	r7
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	f43f af45 	beq.w	800d67e <_printf_float+0xb6>
 800d7f4:	f04f 0900 	mov.w	r9, #0
 800d7f8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d7fc:	f104 0a1a 	add.w	sl, r4, #26
 800d800:	45c8      	cmp	r8, r9
 800d802:	dc09      	bgt.n	800d818 <_printf_float+0x250>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	079b      	lsls	r3, r3, #30
 800d808:	f100 8103 	bmi.w	800da12 <_printf_float+0x44a>
 800d80c:	68e0      	ldr	r0, [r4, #12]
 800d80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d810:	4298      	cmp	r0, r3
 800d812:	bfb8      	it	lt
 800d814:	4618      	movlt	r0, r3
 800d816:	e734      	b.n	800d682 <_printf_float+0xba>
 800d818:	2301      	movs	r3, #1
 800d81a:	4652      	mov	r2, sl
 800d81c:	4631      	mov	r1, r6
 800d81e:	4628      	mov	r0, r5
 800d820:	47b8      	blx	r7
 800d822:	3001      	adds	r0, #1
 800d824:	f43f af2b 	beq.w	800d67e <_printf_float+0xb6>
 800d828:	f109 0901 	add.w	r9, r9, #1
 800d82c:	e7e8      	b.n	800d800 <_printf_float+0x238>
 800d82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d830:	2b00      	cmp	r3, #0
 800d832:	dc39      	bgt.n	800d8a8 <_printf_float+0x2e0>
 800d834:	4a1b      	ldr	r2, [pc, #108]	@ (800d8a4 <_printf_float+0x2dc>)
 800d836:	2301      	movs	r3, #1
 800d838:	4631      	mov	r1, r6
 800d83a:	4628      	mov	r0, r5
 800d83c:	47b8      	blx	r7
 800d83e:	3001      	adds	r0, #1
 800d840:	f43f af1d 	beq.w	800d67e <_printf_float+0xb6>
 800d844:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d848:	ea59 0303 	orrs.w	r3, r9, r3
 800d84c:	d102      	bne.n	800d854 <_printf_float+0x28c>
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	07d9      	lsls	r1, r3, #31
 800d852:	d5d7      	bpl.n	800d804 <_printf_float+0x23c>
 800d854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d858:	4631      	mov	r1, r6
 800d85a:	4628      	mov	r0, r5
 800d85c:	47b8      	blx	r7
 800d85e:	3001      	adds	r0, #1
 800d860:	f43f af0d 	beq.w	800d67e <_printf_float+0xb6>
 800d864:	f04f 0a00 	mov.w	sl, #0
 800d868:	f104 0b1a 	add.w	fp, r4, #26
 800d86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d86e:	425b      	negs	r3, r3
 800d870:	4553      	cmp	r3, sl
 800d872:	dc01      	bgt.n	800d878 <_printf_float+0x2b0>
 800d874:	464b      	mov	r3, r9
 800d876:	e793      	b.n	800d7a0 <_printf_float+0x1d8>
 800d878:	2301      	movs	r3, #1
 800d87a:	465a      	mov	r2, fp
 800d87c:	4631      	mov	r1, r6
 800d87e:	4628      	mov	r0, r5
 800d880:	47b8      	blx	r7
 800d882:	3001      	adds	r0, #1
 800d884:	f43f aefb 	beq.w	800d67e <_printf_float+0xb6>
 800d888:	f10a 0a01 	add.w	sl, sl, #1
 800d88c:	e7ee      	b.n	800d86c <_printf_float+0x2a4>
 800d88e:	bf00      	nop
 800d890:	7fefffff 	.word	0x7fefffff
 800d894:	080100b0 	.word	0x080100b0
 800d898:	080100b4 	.word	0x080100b4
 800d89c:	080100b8 	.word	0x080100b8
 800d8a0:	080100bc 	.word	0x080100bc
 800d8a4:	080100c0 	.word	0x080100c0
 800d8a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8ae:	4553      	cmp	r3, sl
 800d8b0:	bfa8      	it	ge
 800d8b2:	4653      	movge	r3, sl
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	4699      	mov	r9, r3
 800d8b8:	dc36      	bgt.n	800d928 <_printf_float+0x360>
 800d8ba:	f04f 0b00 	mov.w	fp, #0
 800d8be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8c2:	f104 021a 	add.w	r2, r4, #26
 800d8c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8c8:	9306      	str	r3, [sp, #24]
 800d8ca:	eba3 0309 	sub.w	r3, r3, r9
 800d8ce:	455b      	cmp	r3, fp
 800d8d0:	dc31      	bgt.n	800d936 <_printf_float+0x36e>
 800d8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d4:	459a      	cmp	sl, r3
 800d8d6:	dc3a      	bgt.n	800d94e <_printf_float+0x386>
 800d8d8:	6823      	ldr	r3, [r4, #0]
 800d8da:	07da      	lsls	r2, r3, #31
 800d8dc:	d437      	bmi.n	800d94e <_printf_float+0x386>
 800d8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e0:	ebaa 0903 	sub.w	r9, sl, r3
 800d8e4:	9b06      	ldr	r3, [sp, #24]
 800d8e6:	ebaa 0303 	sub.w	r3, sl, r3
 800d8ea:	4599      	cmp	r9, r3
 800d8ec:	bfa8      	it	ge
 800d8ee:	4699      	movge	r9, r3
 800d8f0:	f1b9 0f00 	cmp.w	r9, #0
 800d8f4:	dc33      	bgt.n	800d95e <_printf_float+0x396>
 800d8f6:	f04f 0800 	mov.w	r8, #0
 800d8fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8fe:	f104 0b1a 	add.w	fp, r4, #26
 800d902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d904:	ebaa 0303 	sub.w	r3, sl, r3
 800d908:	eba3 0309 	sub.w	r3, r3, r9
 800d90c:	4543      	cmp	r3, r8
 800d90e:	f77f af79 	ble.w	800d804 <_printf_float+0x23c>
 800d912:	2301      	movs	r3, #1
 800d914:	465a      	mov	r2, fp
 800d916:	4631      	mov	r1, r6
 800d918:	4628      	mov	r0, r5
 800d91a:	47b8      	blx	r7
 800d91c:	3001      	adds	r0, #1
 800d91e:	f43f aeae 	beq.w	800d67e <_printf_float+0xb6>
 800d922:	f108 0801 	add.w	r8, r8, #1
 800d926:	e7ec      	b.n	800d902 <_printf_float+0x33a>
 800d928:	4642      	mov	r2, r8
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	d1c2      	bne.n	800d8ba <_printf_float+0x2f2>
 800d934:	e6a3      	b.n	800d67e <_printf_float+0xb6>
 800d936:	2301      	movs	r3, #1
 800d938:	4631      	mov	r1, r6
 800d93a:	4628      	mov	r0, r5
 800d93c:	9206      	str	r2, [sp, #24]
 800d93e:	47b8      	blx	r7
 800d940:	3001      	adds	r0, #1
 800d942:	f43f ae9c 	beq.w	800d67e <_printf_float+0xb6>
 800d946:	9a06      	ldr	r2, [sp, #24]
 800d948:	f10b 0b01 	add.w	fp, fp, #1
 800d94c:	e7bb      	b.n	800d8c6 <_printf_float+0x2fe>
 800d94e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d952:	4631      	mov	r1, r6
 800d954:	4628      	mov	r0, r5
 800d956:	47b8      	blx	r7
 800d958:	3001      	adds	r0, #1
 800d95a:	d1c0      	bne.n	800d8de <_printf_float+0x316>
 800d95c:	e68f      	b.n	800d67e <_printf_float+0xb6>
 800d95e:	9a06      	ldr	r2, [sp, #24]
 800d960:	464b      	mov	r3, r9
 800d962:	4442      	add	r2, r8
 800d964:	4631      	mov	r1, r6
 800d966:	4628      	mov	r0, r5
 800d968:	47b8      	blx	r7
 800d96a:	3001      	adds	r0, #1
 800d96c:	d1c3      	bne.n	800d8f6 <_printf_float+0x32e>
 800d96e:	e686      	b.n	800d67e <_printf_float+0xb6>
 800d970:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d974:	f1ba 0f01 	cmp.w	sl, #1
 800d978:	dc01      	bgt.n	800d97e <_printf_float+0x3b6>
 800d97a:	07db      	lsls	r3, r3, #31
 800d97c:	d536      	bpl.n	800d9ec <_printf_float+0x424>
 800d97e:	2301      	movs	r3, #1
 800d980:	4642      	mov	r2, r8
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	47b8      	blx	r7
 800d988:	3001      	adds	r0, #1
 800d98a:	f43f ae78 	beq.w	800d67e <_printf_float+0xb6>
 800d98e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d992:	4631      	mov	r1, r6
 800d994:	4628      	mov	r0, r5
 800d996:	47b8      	blx	r7
 800d998:	3001      	adds	r0, #1
 800d99a:	f43f ae70 	beq.w	800d67e <_printf_float+0xb6>
 800d99e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d9aa:	f7f3 f865 	bl	8000a78 <__aeabi_dcmpeq>
 800d9ae:	b9c0      	cbnz	r0, 800d9e2 <_printf_float+0x41a>
 800d9b0:	4653      	mov	r3, sl
 800d9b2:	f108 0201 	add.w	r2, r8, #1
 800d9b6:	4631      	mov	r1, r6
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	47b8      	blx	r7
 800d9bc:	3001      	adds	r0, #1
 800d9be:	d10c      	bne.n	800d9da <_printf_float+0x412>
 800d9c0:	e65d      	b.n	800d67e <_printf_float+0xb6>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	465a      	mov	r2, fp
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	47b8      	blx	r7
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	f43f ae56 	beq.w	800d67e <_printf_float+0xb6>
 800d9d2:	f108 0801 	add.w	r8, r8, #1
 800d9d6:	45d0      	cmp	r8, sl
 800d9d8:	dbf3      	blt.n	800d9c2 <_printf_float+0x3fa>
 800d9da:	464b      	mov	r3, r9
 800d9dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d9e0:	e6df      	b.n	800d7a2 <_printf_float+0x1da>
 800d9e2:	f04f 0800 	mov.w	r8, #0
 800d9e6:	f104 0b1a 	add.w	fp, r4, #26
 800d9ea:	e7f4      	b.n	800d9d6 <_printf_float+0x40e>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	4642      	mov	r2, r8
 800d9f0:	e7e1      	b.n	800d9b6 <_printf_float+0x3ee>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	464a      	mov	r2, r9
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	f43f ae3e 	beq.w	800d67e <_printf_float+0xb6>
 800da02:	f108 0801 	add.w	r8, r8, #1
 800da06:	68e3      	ldr	r3, [r4, #12]
 800da08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da0a:	1a5b      	subs	r3, r3, r1
 800da0c:	4543      	cmp	r3, r8
 800da0e:	dcf0      	bgt.n	800d9f2 <_printf_float+0x42a>
 800da10:	e6fc      	b.n	800d80c <_printf_float+0x244>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	f104 0919 	add.w	r9, r4, #25
 800da1a:	e7f4      	b.n	800da06 <_printf_float+0x43e>

0800da1c <_printf_common>:
 800da1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da20:	4616      	mov	r6, r2
 800da22:	4698      	mov	r8, r3
 800da24:	688a      	ldr	r2, [r1, #8]
 800da26:	690b      	ldr	r3, [r1, #16]
 800da28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da2c:	4293      	cmp	r3, r2
 800da2e:	bfb8      	it	lt
 800da30:	4613      	movlt	r3, r2
 800da32:	6033      	str	r3, [r6, #0]
 800da34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da38:	4607      	mov	r7, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	b10a      	cbz	r2, 800da42 <_printf_common+0x26>
 800da3e:	3301      	adds	r3, #1
 800da40:	6033      	str	r3, [r6, #0]
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	0699      	lsls	r1, r3, #26
 800da46:	bf42      	ittt	mi
 800da48:	6833      	ldrmi	r3, [r6, #0]
 800da4a:	3302      	addmi	r3, #2
 800da4c:	6033      	strmi	r3, [r6, #0]
 800da4e:	6825      	ldr	r5, [r4, #0]
 800da50:	f015 0506 	ands.w	r5, r5, #6
 800da54:	d106      	bne.n	800da64 <_printf_common+0x48>
 800da56:	f104 0a19 	add.w	sl, r4, #25
 800da5a:	68e3      	ldr	r3, [r4, #12]
 800da5c:	6832      	ldr	r2, [r6, #0]
 800da5e:	1a9b      	subs	r3, r3, r2
 800da60:	42ab      	cmp	r3, r5
 800da62:	dc26      	bgt.n	800dab2 <_printf_common+0x96>
 800da64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da68:	6822      	ldr	r2, [r4, #0]
 800da6a:	3b00      	subs	r3, #0
 800da6c:	bf18      	it	ne
 800da6e:	2301      	movne	r3, #1
 800da70:	0692      	lsls	r2, r2, #26
 800da72:	d42b      	bmi.n	800dacc <_printf_common+0xb0>
 800da74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da78:	4641      	mov	r1, r8
 800da7a:	4638      	mov	r0, r7
 800da7c:	47c8      	blx	r9
 800da7e:	3001      	adds	r0, #1
 800da80:	d01e      	beq.n	800dac0 <_printf_common+0xa4>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	6922      	ldr	r2, [r4, #16]
 800da86:	f003 0306 	and.w	r3, r3, #6
 800da8a:	2b04      	cmp	r3, #4
 800da8c:	bf02      	ittt	eq
 800da8e:	68e5      	ldreq	r5, [r4, #12]
 800da90:	6833      	ldreq	r3, [r6, #0]
 800da92:	1aed      	subeq	r5, r5, r3
 800da94:	68a3      	ldr	r3, [r4, #8]
 800da96:	bf0c      	ite	eq
 800da98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da9c:	2500      	movne	r5, #0
 800da9e:	4293      	cmp	r3, r2
 800daa0:	bfc4      	itt	gt
 800daa2:	1a9b      	subgt	r3, r3, r2
 800daa4:	18ed      	addgt	r5, r5, r3
 800daa6:	2600      	movs	r6, #0
 800daa8:	341a      	adds	r4, #26
 800daaa:	42b5      	cmp	r5, r6
 800daac:	d11a      	bne.n	800dae4 <_printf_common+0xc8>
 800daae:	2000      	movs	r0, #0
 800dab0:	e008      	b.n	800dac4 <_printf_common+0xa8>
 800dab2:	2301      	movs	r3, #1
 800dab4:	4652      	mov	r2, sl
 800dab6:	4641      	mov	r1, r8
 800dab8:	4638      	mov	r0, r7
 800daba:	47c8      	blx	r9
 800dabc:	3001      	adds	r0, #1
 800dabe:	d103      	bne.n	800dac8 <_printf_common+0xac>
 800dac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac8:	3501      	adds	r5, #1
 800daca:	e7c6      	b.n	800da5a <_printf_common+0x3e>
 800dacc:	18e1      	adds	r1, r4, r3
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	2030      	movs	r0, #48	@ 0x30
 800dad2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dad6:	4422      	add	r2, r4
 800dad8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dadc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dae0:	3302      	adds	r3, #2
 800dae2:	e7c7      	b.n	800da74 <_printf_common+0x58>
 800dae4:	2301      	movs	r3, #1
 800dae6:	4622      	mov	r2, r4
 800dae8:	4641      	mov	r1, r8
 800daea:	4638      	mov	r0, r7
 800daec:	47c8      	blx	r9
 800daee:	3001      	adds	r0, #1
 800daf0:	d0e6      	beq.n	800dac0 <_printf_common+0xa4>
 800daf2:	3601      	adds	r6, #1
 800daf4:	e7d9      	b.n	800daaa <_printf_common+0x8e>
	...

0800daf8 <_printf_i>:
 800daf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dafc:	7e0f      	ldrb	r7, [r1, #24]
 800dafe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db00:	2f78      	cmp	r7, #120	@ 0x78
 800db02:	4691      	mov	r9, r2
 800db04:	4680      	mov	r8, r0
 800db06:	460c      	mov	r4, r1
 800db08:	469a      	mov	sl, r3
 800db0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db0e:	d807      	bhi.n	800db20 <_printf_i+0x28>
 800db10:	2f62      	cmp	r7, #98	@ 0x62
 800db12:	d80a      	bhi.n	800db2a <_printf_i+0x32>
 800db14:	2f00      	cmp	r7, #0
 800db16:	f000 80d2 	beq.w	800dcbe <_printf_i+0x1c6>
 800db1a:	2f58      	cmp	r7, #88	@ 0x58
 800db1c:	f000 80b9 	beq.w	800dc92 <_printf_i+0x19a>
 800db20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db28:	e03a      	b.n	800dba0 <_printf_i+0xa8>
 800db2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db2e:	2b15      	cmp	r3, #21
 800db30:	d8f6      	bhi.n	800db20 <_printf_i+0x28>
 800db32:	a101      	add	r1, pc, #4	@ (adr r1, 800db38 <_printf_i+0x40>)
 800db34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db38:	0800db91 	.word	0x0800db91
 800db3c:	0800dba5 	.word	0x0800dba5
 800db40:	0800db21 	.word	0x0800db21
 800db44:	0800db21 	.word	0x0800db21
 800db48:	0800db21 	.word	0x0800db21
 800db4c:	0800db21 	.word	0x0800db21
 800db50:	0800dba5 	.word	0x0800dba5
 800db54:	0800db21 	.word	0x0800db21
 800db58:	0800db21 	.word	0x0800db21
 800db5c:	0800db21 	.word	0x0800db21
 800db60:	0800db21 	.word	0x0800db21
 800db64:	0800dca5 	.word	0x0800dca5
 800db68:	0800dbcf 	.word	0x0800dbcf
 800db6c:	0800dc5f 	.word	0x0800dc5f
 800db70:	0800db21 	.word	0x0800db21
 800db74:	0800db21 	.word	0x0800db21
 800db78:	0800dcc7 	.word	0x0800dcc7
 800db7c:	0800db21 	.word	0x0800db21
 800db80:	0800dbcf 	.word	0x0800dbcf
 800db84:	0800db21 	.word	0x0800db21
 800db88:	0800db21 	.word	0x0800db21
 800db8c:	0800dc67 	.word	0x0800dc67
 800db90:	6833      	ldr	r3, [r6, #0]
 800db92:	1d1a      	adds	r2, r3, #4
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	6032      	str	r2, [r6, #0]
 800db98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dba0:	2301      	movs	r3, #1
 800dba2:	e09d      	b.n	800dce0 <_printf_i+0x1e8>
 800dba4:	6833      	ldr	r3, [r6, #0]
 800dba6:	6820      	ldr	r0, [r4, #0]
 800dba8:	1d19      	adds	r1, r3, #4
 800dbaa:	6031      	str	r1, [r6, #0]
 800dbac:	0606      	lsls	r6, r0, #24
 800dbae:	d501      	bpl.n	800dbb4 <_printf_i+0xbc>
 800dbb0:	681d      	ldr	r5, [r3, #0]
 800dbb2:	e003      	b.n	800dbbc <_printf_i+0xc4>
 800dbb4:	0645      	lsls	r5, r0, #25
 800dbb6:	d5fb      	bpl.n	800dbb0 <_printf_i+0xb8>
 800dbb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbbc:	2d00      	cmp	r5, #0
 800dbbe:	da03      	bge.n	800dbc8 <_printf_i+0xd0>
 800dbc0:	232d      	movs	r3, #45	@ 0x2d
 800dbc2:	426d      	negs	r5, r5
 800dbc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbc8:	4859      	ldr	r0, [pc, #356]	@ (800dd30 <_printf_i+0x238>)
 800dbca:	230a      	movs	r3, #10
 800dbcc:	e011      	b.n	800dbf2 <_printf_i+0xfa>
 800dbce:	6821      	ldr	r1, [r4, #0]
 800dbd0:	6833      	ldr	r3, [r6, #0]
 800dbd2:	0608      	lsls	r0, r1, #24
 800dbd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbd8:	d402      	bmi.n	800dbe0 <_printf_i+0xe8>
 800dbda:	0649      	lsls	r1, r1, #25
 800dbdc:	bf48      	it	mi
 800dbde:	b2ad      	uxthmi	r5, r5
 800dbe0:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbe2:	4853      	ldr	r0, [pc, #332]	@ (800dd30 <_printf_i+0x238>)
 800dbe4:	6033      	str	r3, [r6, #0]
 800dbe6:	bf14      	ite	ne
 800dbe8:	230a      	movne	r3, #10
 800dbea:	2308      	moveq	r3, #8
 800dbec:	2100      	movs	r1, #0
 800dbee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dbf2:	6866      	ldr	r6, [r4, #4]
 800dbf4:	60a6      	str	r6, [r4, #8]
 800dbf6:	2e00      	cmp	r6, #0
 800dbf8:	bfa2      	ittt	ge
 800dbfa:	6821      	ldrge	r1, [r4, #0]
 800dbfc:	f021 0104 	bicge.w	r1, r1, #4
 800dc00:	6021      	strge	r1, [r4, #0]
 800dc02:	b90d      	cbnz	r5, 800dc08 <_printf_i+0x110>
 800dc04:	2e00      	cmp	r6, #0
 800dc06:	d04b      	beq.n	800dca0 <_printf_i+0x1a8>
 800dc08:	4616      	mov	r6, r2
 800dc0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc0e:	fb03 5711 	mls	r7, r3, r1, r5
 800dc12:	5dc7      	ldrb	r7, [r0, r7]
 800dc14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc18:	462f      	mov	r7, r5
 800dc1a:	42bb      	cmp	r3, r7
 800dc1c:	460d      	mov	r5, r1
 800dc1e:	d9f4      	bls.n	800dc0a <_printf_i+0x112>
 800dc20:	2b08      	cmp	r3, #8
 800dc22:	d10b      	bne.n	800dc3c <_printf_i+0x144>
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	07df      	lsls	r7, r3, #31
 800dc28:	d508      	bpl.n	800dc3c <_printf_i+0x144>
 800dc2a:	6923      	ldr	r3, [r4, #16]
 800dc2c:	6861      	ldr	r1, [r4, #4]
 800dc2e:	4299      	cmp	r1, r3
 800dc30:	bfde      	ittt	le
 800dc32:	2330      	movle	r3, #48	@ 0x30
 800dc34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc38:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dc3c:	1b92      	subs	r2, r2, r6
 800dc3e:	6122      	str	r2, [r4, #16]
 800dc40:	f8cd a000 	str.w	sl, [sp]
 800dc44:	464b      	mov	r3, r9
 800dc46:	aa03      	add	r2, sp, #12
 800dc48:	4621      	mov	r1, r4
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	f7ff fee6 	bl	800da1c <_printf_common>
 800dc50:	3001      	adds	r0, #1
 800dc52:	d14a      	bne.n	800dcea <_printf_i+0x1f2>
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc58:	b004      	add	sp, #16
 800dc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	f043 0320 	orr.w	r3, r3, #32
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	4833      	ldr	r0, [pc, #204]	@ (800dd34 <_printf_i+0x23c>)
 800dc68:	2778      	movs	r7, #120	@ 0x78
 800dc6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc6e:	6823      	ldr	r3, [r4, #0]
 800dc70:	6831      	ldr	r1, [r6, #0]
 800dc72:	061f      	lsls	r7, r3, #24
 800dc74:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc78:	d402      	bmi.n	800dc80 <_printf_i+0x188>
 800dc7a:	065f      	lsls	r7, r3, #25
 800dc7c:	bf48      	it	mi
 800dc7e:	b2ad      	uxthmi	r5, r5
 800dc80:	6031      	str	r1, [r6, #0]
 800dc82:	07d9      	lsls	r1, r3, #31
 800dc84:	bf44      	itt	mi
 800dc86:	f043 0320 	orrmi.w	r3, r3, #32
 800dc8a:	6023      	strmi	r3, [r4, #0]
 800dc8c:	b11d      	cbz	r5, 800dc96 <_printf_i+0x19e>
 800dc8e:	2310      	movs	r3, #16
 800dc90:	e7ac      	b.n	800dbec <_printf_i+0xf4>
 800dc92:	4827      	ldr	r0, [pc, #156]	@ (800dd30 <_printf_i+0x238>)
 800dc94:	e7e9      	b.n	800dc6a <_printf_i+0x172>
 800dc96:	6823      	ldr	r3, [r4, #0]
 800dc98:	f023 0320 	bic.w	r3, r3, #32
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	e7f6      	b.n	800dc8e <_printf_i+0x196>
 800dca0:	4616      	mov	r6, r2
 800dca2:	e7bd      	b.n	800dc20 <_printf_i+0x128>
 800dca4:	6833      	ldr	r3, [r6, #0]
 800dca6:	6825      	ldr	r5, [r4, #0]
 800dca8:	6961      	ldr	r1, [r4, #20]
 800dcaa:	1d18      	adds	r0, r3, #4
 800dcac:	6030      	str	r0, [r6, #0]
 800dcae:	062e      	lsls	r6, r5, #24
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	d501      	bpl.n	800dcb8 <_printf_i+0x1c0>
 800dcb4:	6019      	str	r1, [r3, #0]
 800dcb6:	e002      	b.n	800dcbe <_printf_i+0x1c6>
 800dcb8:	0668      	lsls	r0, r5, #25
 800dcba:	d5fb      	bpl.n	800dcb4 <_printf_i+0x1bc>
 800dcbc:	8019      	strh	r1, [r3, #0]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	6123      	str	r3, [r4, #16]
 800dcc2:	4616      	mov	r6, r2
 800dcc4:	e7bc      	b.n	800dc40 <_printf_i+0x148>
 800dcc6:	6833      	ldr	r3, [r6, #0]
 800dcc8:	1d1a      	adds	r2, r3, #4
 800dcca:	6032      	str	r2, [r6, #0]
 800dccc:	681e      	ldr	r6, [r3, #0]
 800dcce:	6862      	ldr	r2, [r4, #4]
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f7f2 fa54 	bl	8000180 <memchr>
 800dcd8:	b108      	cbz	r0, 800dcde <_printf_i+0x1e6>
 800dcda:	1b80      	subs	r0, r0, r6
 800dcdc:	6060      	str	r0, [r4, #4]
 800dcde:	6863      	ldr	r3, [r4, #4]
 800dce0:	6123      	str	r3, [r4, #16]
 800dce2:	2300      	movs	r3, #0
 800dce4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dce8:	e7aa      	b.n	800dc40 <_printf_i+0x148>
 800dcea:	6923      	ldr	r3, [r4, #16]
 800dcec:	4632      	mov	r2, r6
 800dcee:	4649      	mov	r1, r9
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	47d0      	blx	sl
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d0ad      	beq.n	800dc54 <_printf_i+0x15c>
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	079b      	lsls	r3, r3, #30
 800dcfc:	d413      	bmi.n	800dd26 <_printf_i+0x22e>
 800dcfe:	68e0      	ldr	r0, [r4, #12]
 800dd00:	9b03      	ldr	r3, [sp, #12]
 800dd02:	4298      	cmp	r0, r3
 800dd04:	bfb8      	it	lt
 800dd06:	4618      	movlt	r0, r3
 800dd08:	e7a6      	b.n	800dc58 <_printf_i+0x160>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	4649      	mov	r1, r9
 800dd10:	4640      	mov	r0, r8
 800dd12:	47d0      	blx	sl
 800dd14:	3001      	adds	r0, #1
 800dd16:	d09d      	beq.n	800dc54 <_printf_i+0x15c>
 800dd18:	3501      	adds	r5, #1
 800dd1a:	68e3      	ldr	r3, [r4, #12]
 800dd1c:	9903      	ldr	r1, [sp, #12]
 800dd1e:	1a5b      	subs	r3, r3, r1
 800dd20:	42ab      	cmp	r3, r5
 800dd22:	dcf2      	bgt.n	800dd0a <_printf_i+0x212>
 800dd24:	e7eb      	b.n	800dcfe <_printf_i+0x206>
 800dd26:	2500      	movs	r5, #0
 800dd28:	f104 0619 	add.w	r6, r4, #25
 800dd2c:	e7f5      	b.n	800dd1a <_printf_i+0x222>
 800dd2e:	bf00      	nop
 800dd30:	080100c2 	.word	0x080100c2
 800dd34:	080100d3 	.word	0x080100d3

0800dd38 <std>:
 800dd38:	2300      	movs	r3, #0
 800dd3a:	b510      	push	{r4, lr}
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd46:	6083      	str	r3, [r0, #8]
 800dd48:	8181      	strh	r1, [r0, #12]
 800dd4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800dd4c:	81c2      	strh	r2, [r0, #14]
 800dd4e:	6183      	str	r3, [r0, #24]
 800dd50:	4619      	mov	r1, r3
 800dd52:	2208      	movs	r2, #8
 800dd54:	305c      	adds	r0, #92	@ 0x5c
 800dd56:	f000 f8c3 	bl	800dee0 <memset>
 800dd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd90 <std+0x58>)
 800dd5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800dd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd94 <std+0x5c>)
 800dd60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd62:	4b0d      	ldr	r3, [pc, #52]	@ (800dd98 <std+0x60>)
 800dd64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd66:	4b0d      	ldr	r3, [pc, #52]	@ (800dd9c <std+0x64>)
 800dd68:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dda0 <std+0x68>)
 800dd6c:	6224      	str	r4, [r4, #32]
 800dd6e:	429c      	cmp	r4, r3
 800dd70:	d006      	beq.n	800dd80 <std+0x48>
 800dd72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dd76:	4294      	cmp	r4, r2
 800dd78:	d002      	beq.n	800dd80 <std+0x48>
 800dd7a:	33d0      	adds	r3, #208	@ 0xd0
 800dd7c:	429c      	cmp	r4, r3
 800dd7e:	d105      	bne.n	800dd8c <std+0x54>
 800dd80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd88:	f000 b936 	b.w	800dff8 <__retarget_lock_init_recursive>
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	bf00      	nop
 800dd90:	0800f999 	.word	0x0800f999
 800dd94:	0800f9bb 	.word	0x0800f9bb
 800dd98:	0800f9f3 	.word	0x0800f9f3
 800dd9c:	0800fa17 	.word	0x0800fa17
 800dda0:	200095e0 	.word	0x200095e0

0800dda4 <stdio_exit_handler>:
 800dda4:	4a02      	ldr	r2, [pc, #8]	@ (800ddb0 <stdio_exit_handler+0xc>)
 800dda6:	4903      	ldr	r1, [pc, #12]	@ (800ddb4 <stdio_exit_handler+0x10>)
 800dda8:	4803      	ldr	r0, [pc, #12]	@ (800ddb8 <stdio_exit_handler+0x14>)
 800ddaa:	f000 b869 	b.w	800de80 <_fwalk_sglue>
 800ddae:	bf00      	nop
 800ddb0:	2000001c 	.word	0x2000001c
 800ddb4:	0800f22d 	.word	0x0800f22d
 800ddb8:	2000002c 	.word	0x2000002c

0800ddbc <cleanup_stdio>:
 800ddbc:	6841      	ldr	r1, [r0, #4]
 800ddbe:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf0 <cleanup_stdio+0x34>)
 800ddc0:	4299      	cmp	r1, r3
 800ddc2:	b510      	push	{r4, lr}
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	d001      	beq.n	800ddcc <cleanup_stdio+0x10>
 800ddc8:	f001 fa30 	bl	800f22c <_fflush_r>
 800ddcc:	68a1      	ldr	r1, [r4, #8]
 800ddce:	4b09      	ldr	r3, [pc, #36]	@ (800ddf4 <cleanup_stdio+0x38>)
 800ddd0:	4299      	cmp	r1, r3
 800ddd2:	d002      	beq.n	800ddda <cleanup_stdio+0x1e>
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f001 fa29 	bl	800f22c <_fflush_r>
 800ddda:	68e1      	ldr	r1, [r4, #12]
 800dddc:	4b06      	ldr	r3, [pc, #24]	@ (800ddf8 <cleanup_stdio+0x3c>)
 800ddde:	4299      	cmp	r1, r3
 800dde0:	d004      	beq.n	800ddec <cleanup_stdio+0x30>
 800dde2:	4620      	mov	r0, r4
 800dde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dde8:	f001 ba20 	b.w	800f22c <_fflush_r>
 800ddec:	bd10      	pop	{r4, pc}
 800ddee:	bf00      	nop
 800ddf0:	200095e0 	.word	0x200095e0
 800ddf4:	20009648 	.word	0x20009648
 800ddf8:	200096b0 	.word	0x200096b0

0800ddfc <global_stdio_init.part.0>:
 800ddfc:	b510      	push	{r4, lr}
 800ddfe:	4b0b      	ldr	r3, [pc, #44]	@ (800de2c <global_stdio_init.part.0+0x30>)
 800de00:	4c0b      	ldr	r4, [pc, #44]	@ (800de30 <global_stdio_init.part.0+0x34>)
 800de02:	4a0c      	ldr	r2, [pc, #48]	@ (800de34 <global_stdio_init.part.0+0x38>)
 800de04:	601a      	str	r2, [r3, #0]
 800de06:	4620      	mov	r0, r4
 800de08:	2200      	movs	r2, #0
 800de0a:	2104      	movs	r1, #4
 800de0c:	f7ff ff94 	bl	800dd38 <std>
 800de10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de14:	2201      	movs	r2, #1
 800de16:	2109      	movs	r1, #9
 800de18:	f7ff ff8e 	bl	800dd38 <std>
 800de1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de20:	2202      	movs	r2, #2
 800de22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de26:	2112      	movs	r1, #18
 800de28:	f7ff bf86 	b.w	800dd38 <std>
 800de2c:	20009718 	.word	0x20009718
 800de30:	200095e0 	.word	0x200095e0
 800de34:	0800dda5 	.word	0x0800dda5

0800de38 <__sfp_lock_acquire>:
 800de38:	4801      	ldr	r0, [pc, #4]	@ (800de40 <__sfp_lock_acquire+0x8>)
 800de3a:	f000 b8de 	b.w	800dffa <__retarget_lock_acquire_recursive>
 800de3e:	bf00      	nop
 800de40:	20009721 	.word	0x20009721

0800de44 <__sfp_lock_release>:
 800de44:	4801      	ldr	r0, [pc, #4]	@ (800de4c <__sfp_lock_release+0x8>)
 800de46:	f000 b8d9 	b.w	800dffc <__retarget_lock_release_recursive>
 800de4a:	bf00      	nop
 800de4c:	20009721 	.word	0x20009721

0800de50 <__sinit>:
 800de50:	b510      	push	{r4, lr}
 800de52:	4604      	mov	r4, r0
 800de54:	f7ff fff0 	bl	800de38 <__sfp_lock_acquire>
 800de58:	6a23      	ldr	r3, [r4, #32]
 800de5a:	b11b      	cbz	r3, 800de64 <__sinit+0x14>
 800de5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de60:	f7ff bff0 	b.w	800de44 <__sfp_lock_release>
 800de64:	4b04      	ldr	r3, [pc, #16]	@ (800de78 <__sinit+0x28>)
 800de66:	6223      	str	r3, [r4, #32]
 800de68:	4b04      	ldr	r3, [pc, #16]	@ (800de7c <__sinit+0x2c>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1f5      	bne.n	800de5c <__sinit+0xc>
 800de70:	f7ff ffc4 	bl	800ddfc <global_stdio_init.part.0>
 800de74:	e7f2      	b.n	800de5c <__sinit+0xc>
 800de76:	bf00      	nop
 800de78:	0800ddbd 	.word	0x0800ddbd
 800de7c:	20009718 	.word	0x20009718

0800de80 <_fwalk_sglue>:
 800de80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de84:	4607      	mov	r7, r0
 800de86:	4688      	mov	r8, r1
 800de88:	4614      	mov	r4, r2
 800de8a:	2600      	movs	r6, #0
 800de8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de90:	f1b9 0901 	subs.w	r9, r9, #1
 800de94:	d505      	bpl.n	800dea2 <_fwalk_sglue+0x22>
 800de96:	6824      	ldr	r4, [r4, #0]
 800de98:	2c00      	cmp	r4, #0
 800de9a:	d1f7      	bne.n	800de8c <_fwalk_sglue+0xc>
 800de9c:	4630      	mov	r0, r6
 800de9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dea2:	89ab      	ldrh	r3, [r5, #12]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d907      	bls.n	800deb8 <_fwalk_sglue+0x38>
 800dea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800deac:	3301      	adds	r3, #1
 800deae:	d003      	beq.n	800deb8 <_fwalk_sglue+0x38>
 800deb0:	4629      	mov	r1, r5
 800deb2:	4638      	mov	r0, r7
 800deb4:	47c0      	blx	r8
 800deb6:	4306      	orrs	r6, r0
 800deb8:	3568      	adds	r5, #104	@ 0x68
 800deba:	e7e9      	b.n	800de90 <_fwalk_sglue+0x10>

0800debc <iprintf>:
 800debc:	b40f      	push	{r0, r1, r2, r3}
 800debe:	b507      	push	{r0, r1, r2, lr}
 800dec0:	4906      	ldr	r1, [pc, #24]	@ (800dedc <iprintf+0x20>)
 800dec2:	ab04      	add	r3, sp, #16
 800dec4:	6808      	ldr	r0, [r1, #0]
 800dec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deca:	6881      	ldr	r1, [r0, #8]
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	f000 ff67 	bl	800eda0 <_vfiprintf_r>
 800ded2:	b003      	add	sp, #12
 800ded4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ded8:	b004      	add	sp, #16
 800deda:	4770      	bx	lr
 800dedc:	20000028 	.word	0x20000028

0800dee0 <memset>:
 800dee0:	4402      	add	r2, r0
 800dee2:	4603      	mov	r3, r0
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d100      	bne.n	800deea <memset+0xa>
 800dee8:	4770      	bx	lr
 800deea:	f803 1b01 	strb.w	r1, [r3], #1
 800deee:	e7f9      	b.n	800dee4 <memset+0x4>

0800def0 <_localeconv_r>:
 800def0:	4800      	ldr	r0, [pc, #0]	@ (800def4 <_localeconv_r+0x4>)
 800def2:	4770      	bx	lr
 800def4:	20000168 	.word	0x20000168

0800def8 <_reclaim_reent>:
 800def8:	4b29      	ldr	r3, [pc, #164]	@ (800dfa0 <_reclaim_reent+0xa8>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4283      	cmp	r3, r0
 800defe:	b570      	push	{r4, r5, r6, lr}
 800df00:	4604      	mov	r4, r0
 800df02:	d04b      	beq.n	800df9c <_reclaim_reent+0xa4>
 800df04:	69c3      	ldr	r3, [r0, #28]
 800df06:	b1ab      	cbz	r3, 800df34 <_reclaim_reent+0x3c>
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	b16b      	cbz	r3, 800df28 <_reclaim_reent+0x30>
 800df0c:	2500      	movs	r5, #0
 800df0e:	69e3      	ldr	r3, [r4, #28]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	5959      	ldr	r1, [r3, r5]
 800df14:	2900      	cmp	r1, #0
 800df16:	d13b      	bne.n	800df90 <_reclaim_reent+0x98>
 800df18:	3504      	adds	r5, #4
 800df1a:	2d80      	cmp	r5, #128	@ 0x80
 800df1c:	d1f7      	bne.n	800df0e <_reclaim_reent+0x16>
 800df1e:	69e3      	ldr	r3, [r4, #28]
 800df20:	4620      	mov	r0, r4
 800df22:	68d9      	ldr	r1, [r3, #12]
 800df24:	f000 fec8 	bl	800ecb8 <_free_r>
 800df28:	69e3      	ldr	r3, [r4, #28]
 800df2a:	6819      	ldr	r1, [r3, #0]
 800df2c:	b111      	cbz	r1, 800df34 <_reclaim_reent+0x3c>
 800df2e:	4620      	mov	r0, r4
 800df30:	f000 fec2 	bl	800ecb8 <_free_r>
 800df34:	6961      	ldr	r1, [r4, #20]
 800df36:	b111      	cbz	r1, 800df3e <_reclaim_reent+0x46>
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 febd 	bl	800ecb8 <_free_r>
 800df3e:	69e1      	ldr	r1, [r4, #28]
 800df40:	b111      	cbz	r1, 800df48 <_reclaim_reent+0x50>
 800df42:	4620      	mov	r0, r4
 800df44:	f000 feb8 	bl	800ecb8 <_free_r>
 800df48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800df4a:	b111      	cbz	r1, 800df52 <_reclaim_reent+0x5a>
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 feb3 	bl	800ecb8 <_free_r>
 800df52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df54:	b111      	cbz	r1, 800df5c <_reclaim_reent+0x64>
 800df56:	4620      	mov	r0, r4
 800df58:	f000 feae 	bl	800ecb8 <_free_r>
 800df5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800df5e:	b111      	cbz	r1, 800df66 <_reclaim_reent+0x6e>
 800df60:	4620      	mov	r0, r4
 800df62:	f000 fea9 	bl	800ecb8 <_free_r>
 800df66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800df68:	b111      	cbz	r1, 800df70 <_reclaim_reent+0x78>
 800df6a:	4620      	mov	r0, r4
 800df6c:	f000 fea4 	bl	800ecb8 <_free_r>
 800df70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800df72:	b111      	cbz	r1, 800df7a <_reclaim_reent+0x82>
 800df74:	4620      	mov	r0, r4
 800df76:	f000 fe9f 	bl	800ecb8 <_free_r>
 800df7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800df7c:	b111      	cbz	r1, 800df84 <_reclaim_reent+0x8c>
 800df7e:	4620      	mov	r0, r4
 800df80:	f000 fe9a 	bl	800ecb8 <_free_r>
 800df84:	6a23      	ldr	r3, [r4, #32]
 800df86:	b14b      	cbz	r3, 800df9c <_reclaim_reent+0xa4>
 800df88:	4620      	mov	r0, r4
 800df8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df8e:	4718      	bx	r3
 800df90:	680e      	ldr	r6, [r1, #0]
 800df92:	4620      	mov	r0, r4
 800df94:	f000 fe90 	bl	800ecb8 <_free_r>
 800df98:	4631      	mov	r1, r6
 800df9a:	e7bb      	b.n	800df14 <_reclaim_reent+0x1c>
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
 800df9e:	bf00      	nop
 800dfa0:	20000028 	.word	0x20000028

0800dfa4 <__errno>:
 800dfa4:	4b01      	ldr	r3, [pc, #4]	@ (800dfac <__errno+0x8>)
 800dfa6:	6818      	ldr	r0, [r3, #0]
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20000028 	.word	0x20000028

0800dfb0 <__libc_init_array>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	4d0d      	ldr	r5, [pc, #52]	@ (800dfe8 <__libc_init_array+0x38>)
 800dfb4:	4c0d      	ldr	r4, [pc, #52]	@ (800dfec <__libc_init_array+0x3c>)
 800dfb6:	1b64      	subs	r4, r4, r5
 800dfb8:	10a4      	asrs	r4, r4, #2
 800dfba:	2600      	movs	r6, #0
 800dfbc:	42a6      	cmp	r6, r4
 800dfbe:	d109      	bne.n	800dfd4 <__libc_init_array+0x24>
 800dfc0:	4d0b      	ldr	r5, [pc, #44]	@ (800dff0 <__libc_init_array+0x40>)
 800dfc2:	4c0c      	ldr	r4, [pc, #48]	@ (800dff4 <__libc_init_array+0x44>)
 800dfc4:	f001 ff48 	bl	800fe58 <_init>
 800dfc8:	1b64      	subs	r4, r4, r5
 800dfca:	10a4      	asrs	r4, r4, #2
 800dfcc:	2600      	movs	r6, #0
 800dfce:	42a6      	cmp	r6, r4
 800dfd0:	d105      	bne.n	800dfde <__libc_init_array+0x2e>
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}
 800dfd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfd8:	4798      	blx	r3
 800dfda:	3601      	adds	r6, #1
 800dfdc:	e7ee      	b.n	800dfbc <__libc_init_array+0xc>
 800dfde:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfe2:	4798      	blx	r3
 800dfe4:	3601      	adds	r6, #1
 800dfe6:	e7f2      	b.n	800dfce <__libc_init_array+0x1e>
 800dfe8:	08010428 	.word	0x08010428
 800dfec:	08010428 	.word	0x08010428
 800dff0:	08010428 	.word	0x08010428
 800dff4:	0801042c 	.word	0x0801042c

0800dff8 <__retarget_lock_init_recursive>:
 800dff8:	4770      	bx	lr

0800dffa <__retarget_lock_acquire_recursive>:
 800dffa:	4770      	bx	lr

0800dffc <__retarget_lock_release_recursive>:
 800dffc:	4770      	bx	lr

0800dffe <memcpy>:
 800dffe:	440a      	add	r2, r1
 800e000:	4291      	cmp	r1, r2
 800e002:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e006:	d100      	bne.n	800e00a <memcpy+0xc>
 800e008:	4770      	bx	lr
 800e00a:	b510      	push	{r4, lr}
 800e00c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e010:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e014:	4291      	cmp	r1, r2
 800e016:	d1f9      	bne.n	800e00c <memcpy+0xe>
 800e018:	bd10      	pop	{r4, pc}

0800e01a <quorem>:
 800e01a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01e:	6903      	ldr	r3, [r0, #16]
 800e020:	690c      	ldr	r4, [r1, #16]
 800e022:	42a3      	cmp	r3, r4
 800e024:	4607      	mov	r7, r0
 800e026:	db7e      	blt.n	800e126 <quorem+0x10c>
 800e028:	3c01      	subs	r4, #1
 800e02a:	f101 0814 	add.w	r8, r1, #20
 800e02e:	00a3      	lsls	r3, r4, #2
 800e030:	f100 0514 	add.w	r5, r0, #20
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e03a:	9301      	str	r3, [sp, #4]
 800e03c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e044:	3301      	adds	r3, #1
 800e046:	429a      	cmp	r2, r3
 800e048:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e04c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e050:	d32e      	bcc.n	800e0b0 <quorem+0x96>
 800e052:	f04f 0a00 	mov.w	sl, #0
 800e056:	46c4      	mov	ip, r8
 800e058:	46ae      	mov	lr, r5
 800e05a:	46d3      	mov	fp, sl
 800e05c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e060:	b298      	uxth	r0, r3
 800e062:	fb06 a000 	mla	r0, r6, r0, sl
 800e066:	0c02      	lsrs	r2, r0, #16
 800e068:	0c1b      	lsrs	r3, r3, #16
 800e06a:	fb06 2303 	mla	r3, r6, r3, r2
 800e06e:	f8de 2000 	ldr.w	r2, [lr]
 800e072:	b280      	uxth	r0, r0
 800e074:	b292      	uxth	r2, r2
 800e076:	1a12      	subs	r2, r2, r0
 800e078:	445a      	add	r2, fp
 800e07a:	f8de 0000 	ldr.w	r0, [lr]
 800e07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e082:	b29b      	uxth	r3, r3
 800e084:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e088:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e08c:	b292      	uxth	r2, r2
 800e08e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e092:	45e1      	cmp	r9, ip
 800e094:	f84e 2b04 	str.w	r2, [lr], #4
 800e098:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e09c:	d2de      	bcs.n	800e05c <quorem+0x42>
 800e09e:	9b00      	ldr	r3, [sp, #0]
 800e0a0:	58eb      	ldr	r3, [r5, r3]
 800e0a2:	b92b      	cbnz	r3, 800e0b0 <quorem+0x96>
 800e0a4:	9b01      	ldr	r3, [sp, #4]
 800e0a6:	3b04      	subs	r3, #4
 800e0a8:	429d      	cmp	r5, r3
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	d32f      	bcc.n	800e10e <quorem+0xf4>
 800e0ae:	613c      	str	r4, [r7, #16]
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f001 fb69 	bl	800f788 <__mcmp>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	db25      	blt.n	800e106 <quorem+0xec>
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	2000      	movs	r0, #0
 800e0be:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0c2:	f8d1 c000 	ldr.w	ip, [r1]
 800e0c6:	fa1f fe82 	uxth.w	lr, r2
 800e0ca:	fa1f f38c 	uxth.w	r3, ip
 800e0ce:	eba3 030e 	sub.w	r3, r3, lr
 800e0d2:	4403      	add	r3, r0
 800e0d4:	0c12      	lsrs	r2, r2, #16
 800e0d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e0da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0e4:	45c1      	cmp	r9, r8
 800e0e6:	f841 3b04 	str.w	r3, [r1], #4
 800e0ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e0ee:	d2e6      	bcs.n	800e0be <quorem+0xa4>
 800e0f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0f8:	b922      	cbnz	r2, 800e104 <quorem+0xea>
 800e0fa:	3b04      	subs	r3, #4
 800e0fc:	429d      	cmp	r5, r3
 800e0fe:	461a      	mov	r2, r3
 800e100:	d30b      	bcc.n	800e11a <quorem+0x100>
 800e102:	613c      	str	r4, [r7, #16]
 800e104:	3601      	adds	r6, #1
 800e106:	4630      	mov	r0, r6
 800e108:	b003      	add	sp, #12
 800e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10e:	6812      	ldr	r2, [r2, #0]
 800e110:	3b04      	subs	r3, #4
 800e112:	2a00      	cmp	r2, #0
 800e114:	d1cb      	bne.n	800e0ae <quorem+0x94>
 800e116:	3c01      	subs	r4, #1
 800e118:	e7c6      	b.n	800e0a8 <quorem+0x8e>
 800e11a:	6812      	ldr	r2, [r2, #0]
 800e11c:	3b04      	subs	r3, #4
 800e11e:	2a00      	cmp	r2, #0
 800e120:	d1ef      	bne.n	800e102 <quorem+0xe8>
 800e122:	3c01      	subs	r4, #1
 800e124:	e7ea      	b.n	800e0fc <quorem+0xe2>
 800e126:	2000      	movs	r0, #0
 800e128:	e7ee      	b.n	800e108 <quorem+0xee>
 800e12a:	0000      	movs	r0, r0
 800e12c:	0000      	movs	r0, r0
	...

0800e130 <_dtoa_r>:
 800e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	69c7      	ldr	r7, [r0, #28]
 800e136:	b099      	sub	sp, #100	@ 0x64
 800e138:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e13c:	ec55 4b10 	vmov	r4, r5, d0
 800e140:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e142:	9109      	str	r1, [sp, #36]	@ 0x24
 800e144:	4683      	mov	fp, r0
 800e146:	920e      	str	r2, [sp, #56]	@ 0x38
 800e148:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e14a:	b97f      	cbnz	r7, 800e16c <_dtoa_r+0x3c>
 800e14c:	2010      	movs	r0, #16
 800e14e:	f000 ff3f 	bl	800efd0 <malloc>
 800e152:	4602      	mov	r2, r0
 800e154:	f8cb 001c 	str.w	r0, [fp, #28]
 800e158:	b920      	cbnz	r0, 800e164 <_dtoa_r+0x34>
 800e15a:	4ba7      	ldr	r3, [pc, #668]	@ (800e3f8 <_dtoa_r+0x2c8>)
 800e15c:	21ef      	movs	r1, #239	@ 0xef
 800e15e:	48a7      	ldr	r0, [pc, #668]	@ (800e3fc <_dtoa_r+0x2cc>)
 800e160:	f001 fdcc 	bl	800fcfc <__assert_func>
 800e164:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e168:	6007      	str	r7, [r0, #0]
 800e16a:	60c7      	str	r7, [r0, #12]
 800e16c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e170:	6819      	ldr	r1, [r3, #0]
 800e172:	b159      	cbz	r1, 800e18c <_dtoa_r+0x5c>
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	604a      	str	r2, [r1, #4]
 800e178:	2301      	movs	r3, #1
 800e17a:	4093      	lsls	r3, r2
 800e17c:	608b      	str	r3, [r1, #8]
 800e17e:	4658      	mov	r0, fp
 800e180:	f001 f8c8 	bl	800f314 <_Bfree>
 800e184:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	1e2b      	subs	r3, r5, #0
 800e18e:	bfb9      	ittee	lt
 800e190:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e194:	9303      	strlt	r3, [sp, #12]
 800e196:	2300      	movge	r3, #0
 800e198:	6033      	strge	r3, [r6, #0]
 800e19a:	9f03      	ldr	r7, [sp, #12]
 800e19c:	4b98      	ldr	r3, [pc, #608]	@ (800e400 <_dtoa_r+0x2d0>)
 800e19e:	bfbc      	itt	lt
 800e1a0:	2201      	movlt	r2, #1
 800e1a2:	6032      	strlt	r2, [r6, #0]
 800e1a4:	43bb      	bics	r3, r7
 800e1a6:	d112      	bne.n	800e1ce <_dtoa_r+0x9e>
 800e1a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e1aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1b4:	4323      	orrs	r3, r4
 800e1b6:	f000 854d 	beq.w	800ec54 <_dtoa_r+0xb24>
 800e1ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e414 <_dtoa_r+0x2e4>
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f000 854f 	beq.w	800ec64 <_dtoa_r+0xb34>
 800e1c6:	f10a 0303 	add.w	r3, sl, #3
 800e1ca:	f000 bd49 	b.w	800ec60 <_dtoa_r+0xb30>
 800e1ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	ec51 0b17 	vmov	r0, r1, d7
 800e1d8:	2300      	movs	r3, #0
 800e1da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e1de:	f7f2 fc4b 	bl	8000a78 <__aeabi_dcmpeq>
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	b158      	cbz	r0, 800e1fe <_dtoa_r+0xce>
 800e1e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1ee:	b113      	cbz	r3, 800e1f6 <_dtoa_r+0xc6>
 800e1f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e1f2:	4b84      	ldr	r3, [pc, #528]	@ (800e404 <_dtoa_r+0x2d4>)
 800e1f4:	6013      	str	r3, [r2, #0]
 800e1f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e418 <_dtoa_r+0x2e8>
 800e1fa:	f000 bd33 	b.w	800ec64 <_dtoa_r+0xb34>
 800e1fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e202:	aa16      	add	r2, sp, #88	@ 0x58
 800e204:	a917      	add	r1, sp, #92	@ 0x5c
 800e206:	4658      	mov	r0, fp
 800e208:	f001 fb6e 	bl	800f8e8 <__d2b>
 800e20c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e210:	4681      	mov	r9, r0
 800e212:	2e00      	cmp	r6, #0
 800e214:	d077      	beq.n	800e306 <_dtoa_r+0x1d6>
 800e216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e218:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e21c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e224:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e228:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e22c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e230:	4619      	mov	r1, r3
 800e232:	2200      	movs	r2, #0
 800e234:	4b74      	ldr	r3, [pc, #464]	@ (800e408 <_dtoa_r+0x2d8>)
 800e236:	f7f1 ffff 	bl	8000238 <__aeabi_dsub>
 800e23a:	a369      	add	r3, pc, #420	@ (adr r3, 800e3e0 <_dtoa_r+0x2b0>)
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	f7f2 f9b2 	bl	80005a8 <__aeabi_dmul>
 800e244:	a368      	add	r3, pc, #416	@ (adr r3, 800e3e8 <_dtoa_r+0x2b8>)
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	f7f1 fff7 	bl	800023c <__adddf3>
 800e24e:	4604      	mov	r4, r0
 800e250:	4630      	mov	r0, r6
 800e252:	460d      	mov	r5, r1
 800e254:	f7f2 f93e 	bl	80004d4 <__aeabi_i2d>
 800e258:	a365      	add	r3, pc, #404	@ (adr r3, 800e3f0 <_dtoa_r+0x2c0>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 f9a3 	bl	80005a8 <__aeabi_dmul>
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	4620      	mov	r0, r4
 800e268:	4629      	mov	r1, r5
 800e26a:	f7f1 ffe7 	bl	800023c <__adddf3>
 800e26e:	4604      	mov	r4, r0
 800e270:	460d      	mov	r5, r1
 800e272:	f7f2 fc49 	bl	8000b08 <__aeabi_d2iz>
 800e276:	2200      	movs	r2, #0
 800e278:	4607      	mov	r7, r0
 800e27a:	2300      	movs	r3, #0
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 fc04 	bl	8000a8c <__aeabi_dcmplt>
 800e284:	b140      	cbz	r0, 800e298 <_dtoa_r+0x168>
 800e286:	4638      	mov	r0, r7
 800e288:	f7f2 f924 	bl	80004d4 <__aeabi_i2d>
 800e28c:	4622      	mov	r2, r4
 800e28e:	462b      	mov	r3, r5
 800e290:	f7f2 fbf2 	bl	8000a78 <__aeabi_dcmpeq>
 800e294:	b900      	cbnz	r0, 800e298 <_dtoa_r+0x168>
 800e296:	3f01      	subs	r7, #1
 800e298:	2f16      	cmp	r7, #22
 800e29a:	d851      	bhi.n	800e340 <_dtoa_r+0x210>
 800e29c:	4b5b      	ldr	r3, [pc, #364]	@ (800e40c <_dtoa_r+0x2dc>)
 800e29e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2aa:	f7f2 fbef 	bl	8000a8c <__aeabi_dcmplt>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d048      	beq.n	800e344 <_dtoa_r+0x214>
 800e2b2:	3f01      	subs	r7, #1
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e2b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e2ba:	1b9b      	subs	r3, r3, r6
 800e2bc:	1e5a      	subs	r2, r3, #1
 800e2be:	bf44      	itt	mi
 800e2c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e2c4:	2300      	movmi	r3, #0
 800e2c6:	9208      	str	r2, [sp, #32]
 800e2c8:	bf54      	ite	pl
 800e2ca:	f04f 0800 	movpl.w	r8, #0
 800e2ce:	9308      	strmi	r3, [sp, #32]
 800e2d0:	2f00      	cmp	r7, #0
 800e2d2:	db39      	blt.n	800e348 <_dtoa_r+0x218>
 800e2d4:	9b08      	ldr	r3, [sp, #32]
 800e2d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e2d8:	443b      	add	r3, r7
 800e2da:	9308      	str	r3, [sp, #32]
 800e2dc:	2300      	movs	r3, #0
 800e2de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e2:	2b09      	cmp	r3, #9
 800e2e4:	d864      	bhi.n	800e3b0 <_dtoa_r+0x280>
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	bfc4      	itt	gt
 800e2ea:	3b04      	subgt	r3, #4
 800e2ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2f0:	f1a3 0302 	sub.w	r3, r3, #2
 800e2f4:	bfcc      	ite	gt
 800e2f6:	2400      	movgt	r4, #0
 800e2f8:	2401      	movle	r4, #1
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d863      	bhi.n	800e3c6 <_dtoa_r+0x296>
 800e2fe:	e8df f003 	tbb	[pc, r3]
 800e302:	372a      	.short	0x372a
 800e304:	5535      	.short	0x5535
 800e306:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e30a:	441e      	add	r6, r3
 800e30c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e310:	2b20      	cmp	r3, #32
 800e312:	bfc1      	itttt	gt
 800e314:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e318:	409f      	lslgt	r7, r3
 800e31a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e31e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e322:	bfd6      	itet	le
 800e324:	f1c3 0320 	rsble	r3, r3, #32
 800e328:	ea47 0003 	orrgt.w	r0, r7, r3
 800e32c:	fa04 f003 	lslle.w	r0, r4, r3
 800e330:	f7f2 f8c0 	bl	80004b4 <__aeabi_ui2d>
 800e334:	2201      	movs	r2, #1
 800e336:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e33a:	3e01      	subs	r6, #1
 800e33c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e33e:	e777      	b.n	800e230 <_dtoa_r+0x100>
 800e340:	2301      	movs	r3, #1
 800e342:	e7b8      	b.n	800e2b6 <_dtoa_r+0x186>
 800e344:	9012      	str	r0, [sp, #72]	@ 0x48
 800e346:	e7b7      	b.n	800e2b8 <_dtoa_r+0x188>
 800e348:	427b      	negs	r3, r7
 800e34a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e34c:	2300      	movs	r3, #0
 800e34e:	eba8 0807 	sub.w	r8, r8, r7
 800e352:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e354:	e7c4      	b.n	800e2e0 <_dtoa_r+0x1b0>
 800e356:	2300      	movs	r3, #0
 800e358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e35a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	dc35      	bgt.n	800e3cc <_dtoa_r+0x29c>
 800e360:	2301      	movs	r3, #1
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	9307      	str	r3, [sp, #28]
 800e366:	461a      	mov	r2, r3
 800e368:	920e      	str	r2, [sp, #56]	@ 0x38
 800e36a:	e00b      	b.n	800e384 <_dtoa_r+0x254>
 800e36c:	2301      	movs	r3, #1
 800e36e:	e7f3      	b.n	800e358 <_dtoa_r+0x228>
 800e370:	2300      	movs	r3, #0
 800e372:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e376:	18fb      	adds	r3, r7, r3
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	3301      	adds	r3, #1
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	9307      	str	r3, [sp, #28]
 800e380:	bfb8      	it	lt
 800e382:	2301      	movlt	r3, #1
 800e384:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e388:	2100      	movs	r1, #0
 800e38a:	2204      	movs	r2, #4
 800e38c:	f102 0514 	add.w	r5, r2, #20
 800e390:	429d      	cmp	r5, r3
 800e392:	d91f      	bls.n	800e3d4 <_dtoa_r+0x2a4>
 800e394:	6041      	str	r1, [r0, #4]
 800e396:	4658      	mov	r0, fp
 800e398:	f000 ff7c 	bl	800f294 <_Balloc>
 800e39c:	4682      	mov	sl, r0
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d13c      	bne.n	800e41c <_dtoa_r+0x2ec>
 800e3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e410 <_dtoa_r+0x2e0>)
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e3aa:	e6d8      	b.n	800e15e <_dtoa_r+0x2e>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e7e0      	b.n	800e372 <_dtoa_r+0x242>
 800e3b0:	2401      	movs	r4, #1
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e3b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	9307      	str	r3, [sp, #28]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2312      	movs	r3, #18
 800e3c4:	e7d0      	b.n	800e368 <_dtoa_r+0x238>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3ca:	e7f5      	b.n	800e3b8 <_dtoa_r+0x288>
 800e3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	9307      	str	r3, [sp, #28]
 800e3d2:	e7d7      	b.n	800e384 <_dtoa_r+0x254>
 800e3d4:	3101      	adds	r1, #1
 800e3d6:	0052      	lsls	r2, r2, #1
 800e3d8:	e7d8      	b.n	800e38c <_dtoa_r+0x25c>
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	636f4361 	.word	0x636f4361
 800e3e4:	3fd287a7 	.word	0x3fd287a7
 800e3e8:	8b60c8b3 	.word	0x8b60c8b3
 800e3ec:	3fc68a28 	.word	0x3fc68a28
 800e3f0:	509f79fb 	.word	0x509f79fb
 800e3f4:	3fd34413 	.word	0x3fd34413
 800e3f8:	080100f1 	.word	0x080100f1
 800e3fc:	08010108 	.word	0x08010108
 800e400:	7ff00000 	.word	0x7ff00000
 800e404:	080100c1 	.word	0x080100c1
 800e408:	3ff80000 	.word	0x3ff80000
 800e40c:	08010210 	.word	0x08010210
 800e410:	08010160 	.word	0x08010160
 800e414:	080100ed 	.word	0x080100ed
 800e418:	080100c0 	.word	0x080100c0
 800e41c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e420:	6018      	str	r0, [r3, #0]
 800e422:	9b07      	ldr	r3, [sp, #28]
 800e424:	2b0e      	cmp	r3, #14
 800e426:	f200 80a4 	bhi.w	800e572 <_dtoa_r+0x442>
 800e42a:	2c00      	cmp	r4, #0
 800e42c:	f000 80a1 	beq.w	800e572 <_dtoa_r+0x442>
 800e430:	2f00      	cmp	r7, #0
 800e432:	dd33      	ble.n	800e49c <_dtoa_r+0x36c>
 800e434:	4bad      	ldr	r3, [pc, #692]	@ (800e6ec <_dtoa_r+0x5bc>)
 800e436:	f007 020f 	and.w	r2, r7, #15
 800e43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e43e:	ed93 7b00 	vldr	d7, [r3]
 800e442:	05f8      	lsls	r0, r7, #23
 800e444:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e448:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e44c:	d516      	bpl.n	800e47c <_dtoa_r+0x34c>
 800e44e:	4ba8      	ldr	r3, [pc, #672]	@ (800e6f0 <_dtoa_r+0x5c0>)
 800e450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e458:	f7f2 f9d0 	bl	80007fc <__aeabi_ddiv>
 800e45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e460:	f004 040f 	and.w	r4, r4, #15
 800e464:	2603      	movs	r6, #3
 800e466:	4da2      	ldr	r5, [pc, #648]	@ (800e6f0 <_dtoa_r+0x5c0>)
 800e468:	b954      	cbnz	r4, 800e480 <_dtoa_r+0x350>
 800e46a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e472:	f7f2 f9c3 	bl	80007fc <__aeabi_ddiv>
 800e476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e47a:	e028      	b.n	800e4ce <_dtoa_r+0x39e>
 800e47c:	2602      	movs	r6, #2
 800e47e:	e7f2      	b.n	800e466 <_dtoa_r+0x336>
 800e480:	07e1      	lsls	r1, r4, #31
 800e482:	d508      	bpl.n	800e496 <_dtoa_r+0x366>
 800e484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e488:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e48c:	f7f2 f88c 	bl	80005a8 <__aeabi_dmul>
 800e490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e494:	3601      	adds	r6, #1
 800e496:	1064      	asrs	r4, r4, #1
 800e498:	3508      	adds	r5, #8
 800e49a:	e7e5      	b.n	800e468 <_dtoa_r+0x338>
 800e49c:	f000 80d2 	beq.w	800e644 <_dtoa_r+0x514>
 800e4a0:	427c      	negs	r4, r7
 800e4a2:	4b92      	ldr	r3, [pc, #584]	@ (800e6ec <_dtoa_r+0x5bc>)
 800e4a4:	4d92      	ldr	r5, [pc, #584]	@ (800e6f0 <_dtoa_r+0x5c0>)
 800e4a6:	f004 020f 	and.w	r2, r4, #15
 800e4aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4b6:	f7f2 f877 	bl	80005a8 <__aeabi_dmul>
 800e4ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4be:	1124      	asrs	r4, r4, #4
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	2602      	movs	r6, #2
 800e4c4:	2c00      	cmp	r4, #0
 800e4c6:	f040 80b2 	bne.w	800e62e <_dtoa_r+0x4fe>
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1d3      	bne.n	800e476 <_dtoa_r+0x346>
 800e4ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e4d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 80b7 	beq.w	800e648 <_dtoa_r+0x518>
 800e4da:	4b86      	ldr	r3, [pc, #536]	@ (800e6f4 <_dtoa_r+0x5c4>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	4620      	mov	r0, r4
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	f7f2 fad3 	bl	8000a8c <__aeabi_dcmplt>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	f000 80ae 	beq.w	800e648 <_dtoa_r+0x518>
 800e4ec:	9b07      	ldr	r3, [sp, #28]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 80aa 	beq.w	800e648 <_dtoa_r+0x518>
 800e4f4:	9b00      	ldr	r3, [sp, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	dd37      	ble.n	800e56a <_dtoa_r+0x43a>
 800e4fa:	1e7b      	subs	r3, r7, #1
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	4620      	mov	r0, r4
 800e500:	4b7d      	ldr	r3, [pc, #500]	@ (800e6f8 <_dtoa_r+0x5c8>)
 800e502:	2200      	movs	r2, #0
 800e504:	4629      	mov	r1, r5
 800e506:	f7f2 f84f 	bl	80005a8 <__aeabi_dmul>
 800e50a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e50e:	9c00      	ldr	r4, [sp, #0]
 800e510:	3601      	adds	r6, #1
 800e512:	4630      	mov	r0, r6
 800e514:	f7f1 ffde 	bl	80004d4 <__aeabi_i2d>
 800e518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e51c:	f7f2 f844 	bl	80005a8 <__aeabi_dmul>
 800e520:	4b76      	ldr	r3, [pc, #472]	@ (800e6fc <_dtoa_r+0x5cc>)
 800e522:	2200      	movs	r2, #0
 800e524:	f7f1 fe8a 	bl	800023c <__adddf3>
 800e528:	4605      	mov	r5, r0
 800e52a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e52e:	2c00      	cmp	r4, #0
 800e530:	f040 808d 	bne.w	800e64e <_dtoa_r+0x51e>
 800e534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e538:	4b71      	ldr	r3, [pc, #452]	@ (800e700 <_dtoa_r+0x5d0>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	f7f1 fe7c 	bl	8000238 <__aeabi_dsub>
 800e540:	4602      	mov	r2, r0
 800e542:	460b      	mov	r3, r1
 800e544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e548:	462a      	mov	r2, r5
 800e54a:	4633      	mov	r3, r6
 800e54c:	f7f2 fabc 	bl	8000ac8 <__aeabi_dcmpgt>
 800e550:	2800      	cmp	r0, #0
 800e552:	f040 828b 	bne.w	800ea6c <_dtoa_r+0x93c>
 800e556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e55a:	462a      	mov	r2, r5
 800e55c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e560:	f7f2 fa94 	bl	8000a8c <__aeabi_dcmplt>
 800e564:	2800      	cmp	r0, #0
 800e566:	f040 8128 	bne.w	800e7ba <_dtoa_r+0x68a>
 800e56a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e56e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e572:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e574:	2b00      	cmp	r3, #0
 800e576:	f2c0 815a 	blt.w	800e82e <_dtoa_r+0x6fe>
 800e57a:	2f0e      	cmp	r7, #14
 800e57c:	f300 8157 	bgt.w	800e82e <_dtoa_r+0x6fe>
 800e580:	4b5a      	ldr	r3, [pc, #360]	@ (800e6ec <_dtoa_r+0x5bc>)
 800e582:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e586:	ed93 7b00 	vldr	d7, [r3]
 800e58a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	ed8d 7b00 	vstr	d7, [sp]
 800e592:	da03      	bge.n	800e59c <_dtoa_r+0x46c>
 800e594:	9b07      	ldr	r3, [sp, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	f340 8101 	ble.w	800e79e <_dtoa_r+0x66e>
 800e59c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e5a0:	4656      	mov	r6, sl
 800e5a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	f7f2 f927 	bl	80007fc <__aeabi_ddiv>
 800e5ae:	f7f2 faab 	bl	8000b08 <__aeabi_d2iz>
 800e5b2:	4680      	mov	r8, r0
 800e5b4:	f7f1 ff8e 	bl	80004d4 <__aeabi_i2d>
 800e5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5bc:	f7f1 fff4 	bl	80005a8 <__aeabi_dmul>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e5cc:	f7f1 fe34 	bl	8000238 <__aeabi_dsub>
 800e5d0:	f806 4b01 	strb.w	r4, [r6], #1
 800e5d4:	9d07      	ldr	r5, [sp, #28]
 800e5d6:	eba6 040a 	sub.w	r4, r6, sl
 800e5da:	42a5      	cmp	r5, r4
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	f040 8117 	bne.w	800e812 <_dtoa_r+0x6e2>
 800e5e4:	f7f1 fe2a 	bl	800023c <__adddf3>
 800e5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	f7f2 fa6a 	bl	8000ac8 <__aeabi_dcmpgt>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	f040 80f9 	bne.w	800e7ec <_dtoa_r+0x6bc>
 800e5fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5fe:	4620      	mov	r0, r4
 800e600:	4629      	mov	r1, r5
 800e602:	f7f2 fa39 	bl	8000a78 <__aeabi_dcmpeq>
 800e606:	b118      	cbz	r0, 800e610 <_dtoa_r+0x4e0>
 800e608:	f018 0f01 	tst.w	r8, #1
 800e60c:	f040 80ee 	bne.w	800e7ec <_dtoa_r+0x6bc>
 800e610:	4649      	mov	r1, r9
 800e612:	4658      	mov	r0, fp
 800e614:	f000 fe7e 	bl	800f314 <_Bfree>
 800e618:	2300      	movs	r3, #0
 800e61a:	7033      	strb	r3, [r6, #0]
 800e61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e61e:	3701      	adds	r7, #1
 800e620:	601f      	str	r7, [r3, #0]
 800e622:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 831d 	beq.w	800ec64 <_dtoa_r+0xb34>
 800e62a:	601e      	str	r6, [r3, #0]
 800e62c:	e31a      	b.n	800ec64 <_dtoa_r+0xb34>
 800e62e:	07e2      	lsls	r2, r4, #31
 800e630:	d505      	bpl.n	800e63e <_dtoa_r+0x50e>
 800e632:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e636:	f7f1 ffb7 	bl	80005a8 <__aeabi_dmul>
 800e63a:	3601      	adds	r6, #1
 800e63c:	2301      	movs	r3, #1
 800e63e:	1064      	asrs	r4, r4, #1
 800e640:	3508      	adds	r5, #8
 800e642:	e73f      	b.n	800e4c4 <_dtoa_r+0x394>
 800e644:	2602      	movs	r6, #2
 800e646:	e742      	b.n	800e4ce <_dtoa_r+0x39e>
 800e648:	9c07      	ldr	r4, [sp, #28]
 800e64a:	9704      	str	r7, [sp, #16]
 800e64c:	e761      	b.n	800e512 <_dtoa_r+0x3e2>
 800e64e:	4b27      	ldr	r3, [pc, #156]	@ (800e6ec <_dtoa_r+0x5bc>)
 800e650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e656:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e65a:	4454      	add	r4, sl
 800e65c:	2900      	cmp	r1, #0
 800e65e:	d053      	beq.n	800e708 <_dtoa_r+0x5d8>
 800e660:	4928      	ldr	r1, [pc, #160]	@ (800e704 <_dtoa_r+0x5d4>)
 800e662:	2000      	movs	r0, #0
 800e664:	f7f2 f8ca 	bl	80007fc <__aeabi_ddiv>
 800e668:	4633      	mov	r3, r6
 800e66a:	462a      	mov	r2, r5
 800e66c:	f7f1 fde4 	bl	8000238 <__aeabi_dsub>
 800e670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e674:	4656      	mov	r6, sl
 800e676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e67a:	f7f2 fa45 	bl	8000b08 <__aeabi_d2iz>
 800e67e:	4605      	mov	r5, r0
 800e680:	f7f1 ff28 	bl	80004d4 <__aeabi_i2d>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e68c:	f7f1 fdd4 	bl	8000238 <__aeabi_dsub>
 800e690:	3530      	adds	r5, #48	@ 0x30
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e69a:	f806 5b01 	strb.w	r5, [r6], #1
 800e69e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6a2:	f7f2 f9f3 	bl	8000a8c <__aeabi_dcmplt>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d171      	bne.n	800e78e <_dtoa_r+0x65e>
 800e6aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6ae:	4911      	ldr	r1, [pc, #68]	@ (800e6f4 <_dtoa_r+0x5c4>)
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	f7f1 fdc1 	bl	8000238 <__aeabi_dsub>
 800e6b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6ba:	f7f2 f9e7 	bl	8000a8c <__aeabi_dcmplt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f040 8095 	bne.w	800e7ee <_dtoa_r+0x6be>
 800e6c4:	42a6      	cmp	r6, r4
 800e6c6:	f43f af50 	beq.w	800e56a <_dtoa_r+0x43a>
 800e6ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e6f8 <_dtoa_r+0x5c8>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f7f1 ff69 	bl	80005a8 <__aeabi_dmul>
 800e6d6:	4b08      	ldr	r3, [pc, #32]	@ (800e6f8 <_dtoa_r+0x5c8>)
 800e6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e6dc:	2200      	movs	r2, #0
 800e6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6e2:	f7f1 ff61 	bl	80005a8 <__aeabi_dmul>
 800e6e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6ea:	e7c4      	b.n	800e676 <_dtoa_r+0x546>
 800e6ec:	08010210 	.word	0x08010210
 800e6f0:	080101e8 	.word	0x080101e8
 800e6f4:	3ff00000 	.word	0x3ff00000
 800e6f8:	40240000 	.word	0x40240000
 800e6fc:	401c0000 	.word	0x401c0000
 800e700:	40140000 	.word	0x40140000
 800e704:	3fe00000 	.word	0x3fe00000
 800e708:	4631      	mov	r1, r6
 800e70a:	4628      	mov	r0, r5
 800e70c:	f7f1 ff4c 	bl	80005a8 <__aeabi_dmul>
 800e710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e714:	9415      	str	r4, [sp, #84]	@ 0x54
 800e716:	4656      	mov	r6, sl
 800e718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e71c:	f7f2 f9f4 	bl	8000b08 <__aeabi_d2iz>
 800e720:	4605      	mov	r5, r0
 800e722:	f7f1 fed7 	bl	80004d4 <__aeabi_i2d>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e72e:	f7f1 fd83 	bl	8000238 <__aeabi_dsub>
 800e732:	3530      	adds	r5, #48	@ 0x30
 800e734:	f806 5b01 	strb.w	r5, [r6], #1
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	42a6      	cmp	r6, r4
 800e73e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e742:	f04f 0200 	mov.w	r2, #0
 800e746:	d124      	bne.n	800e792 <_dtoa_r+0x662>
 800e748:	4bac      	ldr	r3, [pc, #688]	@ (800e9fc <_dtoa_r+0x8cc>)
 800e74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e74e:	f7f1 fd75 	bl	800023c <__adddf3>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e75a:	f7f2 f9b5 	bl	8000ac8 <__aeabi_dcmpgt>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d145      	bne.n	800e7ee <_dtoa_r+0x6be>
 800e762:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e766:	49a5      	ldr	r1, [pc, #660]	@ (800e9fc <_dtoa_r+0x8cc>)
 800e768:	2000      	movs	r0, #0
 800e76a:	f7f1 fd65 	bl	8000238 <__aeabi_dsub>
 800e76e:	4602      	mov	r2, r0
 800e770:	460b      	mov	r3, r1
 800e772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e776:	f7f2 f989 	bl	8000a8c <__aeabi_dcmplt>
 800e77a:	2800      	cmp	r0, #0
 800e77c:	f43f aef5 	beq.w	800e56a <_dtoa_r+0x43a>
 800e780:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e782:	1e73      	subs	r3, r6, #1
 800e784:	9315      	str	r3, [sp, #84]	@ 0x54
 800e786:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e78a:	2b30      	cmp	r3, #48	@ 0x30
 800e78c:	d0f8      	beq.n	800e780 <_dtoa_r+0x650>
 800e78e:	9f04      	ldr	r7, [sp, #16]
 800e790:	e73e      	b.n	800e610 <_dtoa_r+0x4e0>
 800e792:	4b9b      	ldr	r3, [pc, #620]	@ (800ea00 <_dtoa_r+0x8d0>)
 800e794:	f7f1 ff08 	bl	80005a8 <__aeabi_dmul>
 800e798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e79c:	e7bc      	b.n	800e718 <_dtoa_r+0x5e8>
 800e79e:	d10c      	bne.n	800e7ba <_dtoa_r+0x68a>
 800e7a0:	4b98      	ldr	r3, [pc, #608]	@ (800ea04 <_dtoa_r+0x8d4>)
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7a8:	f7f1 fefe 	bl	80005a8 <__aeabi_dmul>
 800e7ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7b0:	f7f2 f980 	bl	8000ab4 <__aeabi_dcmpge>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f000 8157 	beq.w	800ea68 <_dtoa_r+0x938>
 800e7ba:	2400      	movs	r4, #0
 800e7bc:	4625      	mov	r5, r4
 800e7be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7c0:	43db      	mvns	r3, r3
 800e7c2:	9304      	str	r3, [sp, #16]
 800e7c4:	4656      	mov	r6, sl
 800e7c6:	2700      	movs	r7, #0
 800e7c8:	4621      	mov	r1, r4
 800e7ca:	4658      	mov	r0, fp
 800e7cc:	f000 fda2 	bl	800f314 <_Bfree>
 800e7d0:	2d00      	cmp	r5, #0
 800e7d2:	d0dc      	beq.n	800e78e <_dtoa_r+0x65e>
 800e7d4:	b12f      	cbz	r7, 800e7e2 <_dtoa_r+0x6b2>
 800e7d6:	42af      	cmp	r7, r5
 800e7d8:	d003      	beq.n	800e7e2 <_dtoa_r+0x6b2>
 800e7da:	4639      	mov	r1, r7
 800e7dc:	4658      	mov	r0, fp
 800e7de:	f000 fd99 	bl	800f314 <_Bfree>
 800e7e2:	4629      	mov	r1, r5
 800e7e4:	4658      	mov	r0, fp
 800e7e6:	f000 fd95 	bl	800f314 <_Bfree>
 800e7ea:	e7d0      	b.n	800e78e <_dtoa_r+0x65e>
 800e7ec:	9704      	str	r7, [sp, #16]
 800e7ee:	4633      	mov	r3, r6
 800e7f0:	461e      	mov	r6, r3
 800e7f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7f6:	2a39      	cmp	r2, #57	@ 0x39
 800e7f8:	d107      	bne.n	800e80a <_dtoa_r+0x6da>
 800e7fa:	459a      	cmp	sl, r3
 800e7fc:	d1f8      	bne.n	800e7f0 <_dtoa_r+0x6c0>
 800e7fe:	9a04      	ldr	r2, [sp, #16]
 800e800:	3201      	adds	r2, #1
 800e802:	9204      	str	r2, [sp, #16]
 800e804:	2230      	movs	r2, #48	@ 0x30
 800e806:	f88a 2000 	strb.w	r2, [sl]
 800e80a:	781a      	ldrb	r2, [r3, #0]
 800e80c:	3201      	adds	r2, #1
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	e7bd      	b.n	800e78e <_dtoa_r+0x65e>
 800e812:	4b7b      	ldr	r3, [pc, #492]	@ (800ea00 <_dtoa_r+0x8d0>)
 800e814:	2200      	movs	r2, #0
 800e816:	f7f1 fec7 	bl	80005a8 <__aeabi_dmul>
 800e81a:	2200      	movs	r2, #0
 800e81c:	2300      	movs	r3, #0
 800e81e:	4604      	mov	r4, r0
 800e820:	460d      	mov	r5, r1
 800e822:	f7f2 f929 	bl	8000a78 <__aeabi_dcmpeq>
 800e826:	2800      	cmp	r0, #0
 800e828:	f43f aebb 	beq.w	800e5a2 <_dtoa_r+0x472>
 800e82c:	e6f0      	b.n	800e610 <_dtoa_r+0x4e0>
 800e82e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e830:	2a00      	cmp	r2, #0
 800e832:	f000 80db 	beq.w	800e9ec <_dtoa_r+0x8bc>
 800e836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e838:	2a01      	cmp	r2, #1
 800e83a:	f300 80bf 	bgt.w	800e9bc <_dtoa_r+0x88c>
 800e83e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e840:	2a00      	cmp	r2, #0
 800e842:	f000 80b7 	beq.w	800e9b4 <_dtoa_r+0x884>
 800e846:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e84a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e84c:	4646      	mov	r6, r8
 800e84e:	9a08      	ldr	r2, [sp, #32]
 800e850:	2101      	movs	r1, #1
 800e852:	441a      	add	r2, r3
 800e854:	4658      	mov	r0, fp
 800e856:	4498      	add	r8, r3
 800e858:	9208      	str	r2, [sp, #32]
 800e85a:	f000 fe0f 	bl	800f47c <__i2b>
 800e85e:	4605      	mov	r5, r0
 800e860:	b15e      	cbz	r6, 800e87a <_dtoa_r+0x74a>
 800e862:	9b08      	ldr	r3, [sp, #32]
 800e864:	2b00      	cmp	r3, #0
 800e866:	dd08      	ble.n	800e87a <_dtoa_r+0x74a>
 800e868:	42b3      	cmp	r3, r6
 800e86a:	9a08      	ldr	r2, [sp, #32]
 800e86c:	bfa8      	it	ge
 800e86e:	4633      	movge	r3, r6
 800e870:	eba8 0803 	sub.w	r8, r8, r3
 800e874:	1af6      	subs	r6, r6, r3
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	9308      	str	r3, [sp, #32]
 800e87a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e87c:	b1f3      	cbz	r3, 800e8bc <_dtoa_r+0x78c>
 800e87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 80b7 	beq.w	800e9f4 <_dtoa_r+0x8c4>
 800e886:	b18c      	cbz	r4, 800e8ac <_dtoa_r+0x77c>
 800e888:	4629      	mov	r1, r5
 800e88a:	4622      	mov	r2, r4
 800e88c:	4658      	mov	r0, fp
 800e88e:	f000 feb5 	bl	800f5fc <__pow5mult>
 800e892:	464a      	mov	r2, r9
 800e894:	4601      	mov	r1, r0
 800e896:	4605      	mov	r5, r0
 800e898:	4658      	mov	r0, fp
 800e89a:	f000 fe05 	bl	800f4a8 <__multiply>
 800e89e:	4649      	mov	r1, r9
 800e8a0:	9004      	str	r0, [sp, #16]
 800e8a2:	4658      	mov	r0, fp
 800e8a4:	f000 fd36 	bl	800f314 <_Bfree>
 800e8a8:	9b04      	ldr	r3, [sp, #16]
 800e8aa:	4699      	mov	r9, r3
 800e8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8ae:	1b1a      	subs	r2, r3, r4
 800e8b0:	d004      	beq.n	800e8bc <_dtoa_r+0x78c>
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	4658      	mov	r0, fp
 800e8b6:	f000 fea1 	bl	800f5fc <__pow5mult>
 800e8ba:	4681      	mov	r9, r0
 800e8bc:	2101      	movs	r1, #1
 800e8be:	4658      	mov	r0, fp
 800e8c0:	f000 fddc 	bl	800f47c <__i2b>
 800e8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f000 81cf 	beq.w	800ec6c <_dtoa_r+0xb3c>
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	4601      	mov	r1, r0
 800e8d2:	4658      	mov	r0, fp
 800e8d4:	f000 fe92 	bl	800f5fc <__pow5mult>
 800e8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	4604      	mov	r4, r0
 800e8de:	f300 8095 	bgt.w	800ea0c <_dtoa_r+0x8dc>
 800e8e2:	9b02      	ldr	r3, [sp, #8]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f040 8087 	bne.w	800e9f8 <_dtoa_r+0x8c8>
 800e8ea:	9b03      	ldr	r3, [sp, #12]
 800e8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f040 8089 	bne.w	800ea08 <_dtoa_r+0x8d8>
 800e8f6:	9b03      	ldr	r3, [sp, #12]
 800e8f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e8fc:	0d1b      	lsrs	r3, r3, #20
 800e8fe:	051b      	lsls	r3, r3, #20
 800e900:	b12b      	cbz	r3, 800e90e <_dtoa_r+0x7de>
 800e902:	9b08      	ldr	r3, [sp, #32]
 800e904:	3301      	adds	r3, #1
 800e906:	9308      	str	r3, [sp, #32]
 800e908:	f108 0801 	add.w	r8, r8, #1
 800e90c:	2301      	movs	r3, #1
 800e90e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 81b0 	beq.w	800ec78 <_dtoa_r+0xb48>
 800e918:	6923      	ldr	r3, [r4, #16]
 800e91a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e91e:	6918      	ldr	r0, [r3, #16]
 800e920:	f000 fd60 	bl	800f3e4 <__hi0bits>
 800e924:	f1c0 0020 	rsb	r0, r0, #32
 800e928:	9b08      	ldr	r3, [sp, #32]
 800e92a:	4418      	add	r0, r3
 800e92c:	f010 001f 	ands.w	r0, r0, #31
 800e930:	d077      	beq.n	800ea22 <_dtoa_r+0x8f2>
 800e932:	f1c0 0320 	rsb	r3, r0, #32
 800e936:	2b04      	cmp	r3, #4
 800e938:	dd6b      	ble.n	800ea12 <_dtoa_r+0x8e2>
 800e93a:	9b08      	ldr	r3, [sp, #32]
 800e93c:	f1c0 001c 	rsb	r0, r0, #28
 800e940:	4403      	add	r3, r0
 800e942:	4480      	add	r8, r0
 800e944:	4406      	add	r6, r0
 800e946:	9308      	str	r3, [sp, #32]
 800e948:	f1b8 0f00 	cmp.w	r8, #0
 800e94c:	dd05      	ble.n	800e95a <_dtoa_r+0x82a>
 800e94e:	4649      	mov	r1, r9
 800e950:	4642      	mov	r2, r8
 800e952:	4658      	mov	r0, fp
 800e954:	f000 feac 	bl	800f6b0 <__lshift>
 800e958:	4681      	mov	r9, r0
 800e95a:	9b08      	ldr	r3, [sp, #32]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dd05      	ble.n	800e96c <_dtoa_r+0x83c>
 800e960:	4621      	mov	r1, r4
 800e962:	461a      	mov	r2, r3
 800e964:	4658      	mov	r0, fp
 800e966:	f000 fea3 	bl	800f6b0 <__lshift>
 800e96a:	4604      	mov	r4, r0
 800e96c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d059      	beq.n	800ea26 <_dtoa_r+0x8f6>
 800e972:	4621      	mov	r1, r4
 800e974:	4648      	mov	r0, r9
 800e976:	f000 ff07 	bl	800f788 <__mcmp>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	da53      	bge.n	800ea26 <_dtoa_r+0x8f6>
 800e97e:	1e7b      	subs	r3, r7, #1
 800e980:	9304      	str	r3, [sp, #16]
 800e982:	4649      	mov	r1, r9
 800e984:	2300      	movs	r3, #0
 800e986:	220a      	movs	r2, #10
 800e988:	4658      	mov	r0, fp
 800e98a:	f000 fce5 	bl	800f358 <__multadd>
 800e98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e990:	4681      	mov	r9, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 8172 	beq.w	800ec7c <_dtoa_r+0xb4c>
 800e998:	2300      	movs	r3, #0
 800e99a:	4629      	mov	r1, r5
 800e99c:	220a      	movs	r2, #10
 800e99e:	4658      	mov	r0, fp
 800e9a0:	f000 fcda 	bl	800f358 <__multadd>
 800e9a4:	9b00      	ldr	r3, [sp, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	dc67      	bgt.n	800ea7c <_dtoa_r+0x94c>
 800e9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	dc41      	bgt.n	800ea36 <_dtoa_r+0x906>
 800e9b2:	e063      	b.n	800ea7c <_dtoa_r+0x94c>
 800e9b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e9b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e9ba:	e746      	b.n	800e84a <_dtoa_r+0x71a>
 800e9bc:	9b07      	ldr	r3, [sp, #28]
 800e9be:	1e5c      	subs	r4, r3, #1
 800e9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9c2:	42a3      	cmp	r3, r4
 800e9c4:	bfbf      	itttt	lt
 800e9c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e9c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e9ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e9cc:	1ae3      	sublt	r3, r4, r3
 800e9ce:	bfb4      	ite	lt
 800e9d0:	18d2      	addlt	r2, r2, r3
 800e9d2:	1b1c      	subge	r4, r3, r4
 800e9d4:	9b07      	ldr	r3, [sp, #28]
 800e9d6:	bfbc      	itt	lt
 800e9d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e9da:	2400      	movlt	r4, #0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	bfb5      	itete	lt
 800e9e0:	eba8 0603 	sublt.w	r6, r8, r3
 800e9e4:	9b07      	ldrge	r3, [sp, #28]
 800e9e6:	2300      	movlt	r3, #0
 800e9e8:	4646      	movge	r6, r8
 800e9ea:	e730      	b.n	800e84e <_dtoa_r+0x71e>
 800e9ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e9ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e9f0:	4646      	mov	r6, r8
 800e9f2:	e735      	b.n	800e860 <_dtoa_r+0x730>
 800e9f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e9f6:	e75c      	b.n	800e8b2 <_dtoa_r+0x782>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	e788      	b.n	800e90e <_dtoa_r+0x7de>
 800e9fc:	3fe00000 	.word	0x3fe00000
 800ea00:	40240000 	.word	0x40240000
 800ea04:	40140000 	.word	0x40140000
 800ea08:	9b02      	ldr	r3, [sp, #8]
 800ea0a:	e780      	b.n	800e90e <_dtoa_r+0x7de>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea10:	e782      	b.n	800e918 <_dtoa_r+0x7e8>
 800ea12:	d099      	beq.n	800e948 <_dtoa_r+0x818>
 800ea14:	9a08      	ldr	r2, [sp, #32]
 800ea16:	331c      	adds	r3, #28
 800ea18:	441a      	add	r2, r3
 800ea1a:	4498      	add	r8, r3
 800ea1c:	441e      	add	r6, r3
 800ea1e:	9208      	str	r2, [sp, #32]
 800ea20:	e792      	b.n	800e948 <_dtoa_r+0x818>
 800ea22:	4603      	mov	r3, r0
 800ea24:	e7f6      	b.n	800ea14 <_dtoa_r+0x8e4>
 800ea26:	9b07      	ldr	r3, [sp, #28]
 800ea28:	9704      	str	r7, [sp, #16]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	dc20      	bgt.n	800ea70 <_dtoa_r+0x940>
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	dd1e      	ble.n	800ea74 <_dtoa_r+0x944>
 800ea36:	9b00      	ldr	r3, [sp, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f47f aec0 	bne.w	800e7be <_dtoa_r+0x68e>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	2205      	movs	r2, #5
 800ea42:	4658      	mov	r0, fp
 800ea44:	f000 fc88 	bl	800f358 <__multadd>
 800ea48:	4601      	mov	r1, r0
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4648      	mov	r0, r9
 800ea4e:	f000 fe9b 	bl	800f788 <__mcmp>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	f77f aeb3 	ble.w	800e7be <_dtoa_r+0x68e>
 800ea58:	4656      	mov	r6, sl
 800ea5a:	2331      	movs	r3, #49	@ 0x31
 800ea5c:	f806 3b01 	strb.w	r3, [r6], #1
 800ea60:	9b04      	ldr	r3, [sp, #16]
 800ea62:	3301      	adds	r3, #1
 800ea64:	9304      	str	r3, [sp, #16]
 800ea66:	e6ae      	b.n	800e7c6 <_dtoa_r+0x696>
 800ea68:	9c07      	ldr	r4, [sp, #28]
 800ea6a:	9704      	str	r7, [sp, #16]
 800ea6c:	4625      	mov	r5, r4
 800ea6e:	e7f3      	b.n	800ea58 <_dtoa_r+0x928>
 800ea70:	9b07      	ldr	r3, [sp, #28]
 800ea72:	9300      	str	r3, [sp, #0]
 800ea74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f000 8104 	beq.w	800ec84 <_dtoa_r+0xb54>
 800ea7c:	2e00      	cmp	r6, #0
 800ea7e:	dd05      	ble.n	800ea8c <_dtoa_r+0x95c>
 800ea80:	4629      	mov	r1, r5
 800ea82:	4632      	mov	r2, r6
 800ea84:	4658      	mov	r0, fp
 800ea86:	f000 fe13 	bl	800f6b0 <__lshift>
 800ea8a:	4605      	mov	r5, r0
 800ea8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d05a      	beq.n	800eb48 <_dtoa_r+0xa18>
 800ea92:	6869      	ldr	r1, [r5, #4]
 800ea94:	4658      	mov	r0, fp
 800ea96:	f000 fbfd 	bl	800f294 <_Balloc>
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	b928      	cbnz	r0, 800eaaa <_dtoa_r+0x97a>
 800ea9e:	4b84      	ldr	r3, [pc, #528]	@ (800ecb0 <_dtoa_r+0xb80>)
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eaa6:	f7ff bb5a 	b.w	800e15e <_dtoa_r+0x2e>
 800eaaa:	692a      	ldr	r2, [r5, #16]
 800eaac:	3202      	adds	r2, #2
 800eaae:	0092      	lsls	r2, r2, #2
 800eab0:	f105 010c 	add.w	r1, r5, #12
 800eab4:	300c      	adds	r0, #12
 800eab6:	f7ff faa2 	bl	800dffe <memcpy>
 800eaba:	2201      	movs	r2, #1
 800eabc:	4631      	mov	r1, r6
 800eabe:	4658      	mov	r0, fp
 800eac0:	f000 fdf6 	bl	800f6b0 <__lshift>
 800eac4:	f10a 0301 	add.w	r3, sl, #1
 800eac8:	9307      	str	r3, [sp, #28]
 800eaca:	9b00      	ldr	r3, [sp, #0]
 800eacc:	4453      	add	r3, sl
 800eace:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ead0:	9b02      	ldr	r3, [sp, #8]
 800ead2:	f003 0301 	and.w	r3, r3, #1
 800ead6:	462f      	mov	r7, r5
 800ead8:	930a      	str	r3, [sp, #40]	@ 0x28
 800eada:	4605      	mov	r5, r0
 800eadc:	9b07      	ldr	r3, [sp, #28]
 800eade:	4621      	mov	r1, r4
 800eae0:	3b01      	subs	r3, #1
 800eae2:	4648      	mov	r0, r9
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	f7ff fa98 	bl	800e01a <quorem>
 800eaea:	4639      	mov	r1, r7
 800eaec:	9002      	str	r0, [sp, #8]
 800eaee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eaf2:	4648      	mov	r0, r9
 800eaf4:	f000 fe48 	bl	800f788 <__mcmp>
 800eaf8:	462a      	mov	r2, r5
 800eafa:	9008      	str	r0, [sp, #32]
 800eafc:	4621      	mov	r1, r4
 800eafe:	4658      	mov	r0, fp
 800eb00:	f000 fe5e 	bl	800f7c0 <__mdiff>
 800eb04:	68c2      	ldr	r2, [r0, #12]
 800eb06:	4606      	mov	r6, r0
 800eb08:	bb02      	cbnz	r2, 800eb4c <_dtoa_r+0xa1c>
 800eb0a:	4601      	mov	r1, r0
 800eb0c:	4648      	mov	r0, r9
 800eb0e:	f000 fe3b 	bl	800f788 <__mcmp>
 800eb12:	4602      	mov	r2, r0
 800eb14:	4631      	mov	r1, r6
 800eb16:	4658      	mov	r0, fp
 800eb18:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb1a:	f000 fbfb 	bl	800f314 <_Bfree>
 800eb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb22:	9e07      	ldr	r6, [sp, #28]
 800eb24:	ea43 0102 	orr.w	r1, r3, r2
 800eb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb2a:	4319      	orrs	r1, r3
 800eb2c:	d110      	bne.n	800eb50 <_dtoa_r+0xa20>
 800eb2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb32:	d029      	beq.n	800eb88 <_dtoa_r+0xa58>
 800eb34:	9b08      	ldr	r3, [sp, #32]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	dd02      	ble.n	800eb40 <_dtoa_r+0xa10>
 800eb3a:	9b02      	ldr	r3, [sp, #8]
 800eb3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eb40:	9b00      	ldr	r3, [sp, #0]
 800eb42:	f883 8000 	strb.w	r8, [r3]
 800eb46:	e63f      	b.n	800e7c8 <_dtoa_r+0x698>
 800eb48:	4628      	mov	r0, r5
 800eb4a:	e7bb      	b.n	800eac4 <_dtoa_r+0x994>
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	e7e1      	b.n	800eb14 <_dtoa_r+0x9e4>
 800eb50:	9b08      	ldr	r3, [sp, #32]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	db04      	blt.n	800eb60 <_dtoa_r+0xa30>
 800eb56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb58:	430b      	orrs	r3, r1
 800eb5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	d120      	bne.n	800eba2 <_dtoa_r+0xa72>
 800eb60:	2a00      	cmp	r2, #0
 800eb62:	dded      	ble.n	800eb40 <_dtoa_r+0xa10>
 800eb64:	4649      	mov	r1, r9
 800eb66:	2201      	movs	r2, #1
 800eb68:	4658      	mov	r0, fp
 800eb6a:	f000 fda1 	bl	800f6b0 <__lshift>
 800eb6e:	4621      	mov	r1, r4
 800eb70:	4681      	mov	r9, r0
 800eb72:	f000 fe09 	bl	800f788 <__mcmp>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	dc03      	bgt.n	800eb82 <_dtoa_r+0xa52>
 800eb7a:	d1e1      	bne.n	800eb40 <_dtoa_r+0xa10>
 800eb7c:	f018 0f01 	tst.w	r8, #1
 800eb80:	d0de      	beq.n	800eb40 <_dtoa_r+0xa10>
 800eb82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb86:	d1d8      	bne.n	800eb3a <_dtoa_r+0xa0a>
 800eb88:	9a00      	ldr	r2, [sp, #0]
 800eb8a:	2339      	movs	r3, #57	@ 0x39
 800eb8c:	7013      	strb	r3, [r2, #0]
 800eb8e:	4633      	mov	r3, r6
 800eb90:	461e      	mov	r6, r3
 800eb92:	3b01      	subs	r3, #1
 800eb94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eb98:	2a39      	cmp	r2, #57	@ 0x39
 800eb9a:	d052      	beq.n	800ec42 <_dtoa_r+0xb12>
 800eb9c:	3201      	adds	r2, #1
 800eb9e:	701a      	strb	r2, [r3, #0]
 800eba0:	e612      	b.n	800e7c8 <_dtoa_r+0x698>
 800eba2:	2a00      	cmp	r2, #0
 800eba4:	dd07      	ble.n	800ebb6 <_dtoa_r+0xa86>
 800eba6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebaa:	d0ed      	beq.n	800eb88 <_dtoa_r+0xa58>
 800ebac:	9a00      	ldr	r2, [sp, #0]
 800ebae:	f108 0301 	add.w	r3, r8, #1
 800ebb2:	7013      	strb	r3, [r2, #0]
 800ebb4:	e608      	b.n	800e7c8 <_dtoa_r+0x698>
 800ebb6:	9b07      	ldr	r3, [sp, #28]
 800ebb8:	9a07      	ldr	r2, [sp, #28]
 800ebba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ebbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d028      	beq.n	800ec16 <_dtoa_r+0xae6>
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	220a      	movs	r2, #10
 800ebca:	4658      	mov	r0, fp
 800ebcc:	f000 fbc4 	bl	800f358 <__multadd>
 800ebd0:	42af      	cmp	r7, r5
 800ebd2:	4681      	mov	r9, r0
 800ebd4:	f04f 0300 	mov.w	r3, #0
 800ebd8:	f04f 020a 	mov.w	r2, #10
 800ebdc:	4639      	mov	r1, r7
 800ebde:	4658      	mov	r0, fp
 800ebe0:	d107      	bne.n	800ebf2 <_dtoa_r+0xac2>
 800ebe2:	f000 fbb9 	bl	800f358 <__multadd>
 800ebe6:	4607      	mov	r7, r0
 800ebe8:	4605      	mov	r5, r0
 800ebea:	9b07      	ldr	r3, [sp, #28]
 800ebec:	3301      	adds	r3, #1
 800ebee:	9307      	str	r3, [sp, #28]
 800ebf0:	e774      	b.n	800eadc <_dtoa_r+0x9ac>
 800ebf2:	f000 fbb1 	bl	800f358 <__multadd>
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	4607      	mov	r7, r0
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	220a      	movs	r2, #10
 800ebfe:	4658      	mov	r0, fp
 800ec00:	f000 fbaa 	bl	800f358 <__multadd>
 800ec04:	4605      	mov	r5, r0
 800ec06:	e7f0      	b.n	800ebea <_dtoa_r+0xaba>
 800ec08:	9b00      	ldr	r3, [sp, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	bfcc      	ite	gt
 800ec0e:	461e      	movgt	r6, r3
 800ec10:	2601      	movle	r6, #1
 800ec12:	4456      	add	r6, sl
 800ec14:	2700      	movs	r7, #0
 800ec16:	4649      	mov	r1, r9
 800ec18:	2201      	movs	r2, #1
 800ec1a:	4658      	mov	r0, fp
 800ec1c:	f000 fd48 	bl	800f6b0 <__lshift>
 800ec20:	4621      	mov	r1, r4
 800ec22:	4681      	mov	r9, r0
 800ec24:	f000 fdb0 	bl	800f788 <__mcmp>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	dcb0      	bgt.n	800eb8e <_dtoa_r+0xa5e>
 800ec2c:	d102      	bne.n	800ec34 <_dtoa_r+0xb04>
 800ec2e:	f018 0f01 	tst.w	r8, #1
 800ec32:	d1ac      	bne.n	800eb8e <_dtoa_r+0xa5e>
 800ec34:	4633      	mov	r3, r6
 800ec36:	461e      	mov	r6, r3
 800ec38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec3c:	2a30      	cmp	r2, #48	@ 0x30
 800ec3e:	d0fa      	beq.n	800ec36 <_dtoa_r+0xb06>
 800ec40:	e5c2      	b.n	800e7c8 <_dtoa_r+0x698>
 800ec42:	459a      	cmp	sl, r3
 800ec44:	d1a4      	bne.n	800eb90 <_dtoa_r+0xa60>
 800ec46:	9b04      	ldr	r3, [sp, #16]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	2331      	movs	r3, #49	@ 0x31
 800ec4e:	f88a 3000 	strb.w	r3, [sl]
 800ec52:	e5b9      	b.n	800e7c8 <_dtoa_r+0x698>
 800ec54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ec56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ecb4 <_dtoa_r+0xb84>
 800ec5a:	b11b      	cbz	r3, 800ec64 <_dtoa_r+0xb34>
 800ec5c:	f10a 0308 	add.w	r3, sl, #8
 800ec60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ec62:	6013      	str	r3, [r2, #0]
 800ec64:	4650      	mov	r0, sl
 800ec66:	b019      	add	sp, #100	@ 0x64
 800ec68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	f77f ae37 	ble.w	800e8e2 <_dtoa_r+0x7b2>
 800ec74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec78:	2001      	movs	r0, #1
 800ec7a:	e655      	b.n	800e928 <_dtoa_r+0x7f8>
 800ec7c:	9b00      	ldr	r3, [sp, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f77f aed6 	ble.w	800ea30 <_dtoa_r+0x900>
 800ec84:	4656      	mov	r6, sl
 800ec86:	4621      	mov	r1, r4
 800ec88:	4648      	mov	r0, r9
 800ec8a:	f7ff f9c6 	bl	800e01a <quorem>
 800ec8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec92:	f806 8b01 	strb.w	r8, [r6], #1
 800ec96:	9b00      	ldr	r3, [sp, #0]
 800ec98:	eba6 020a 	sub.w	r2, r6, sl
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	ddb3      	ble.n	800ec08 <_dtoa_r+0xad8>
 800eca0:	4649      	mov	r1, r9
 800eca2:	2300      	movs	r3, #0
 800eca4:	220a      	movs	r2, #10
 800eca6:	4658      	mov	r0, fp
 800eca8:	f000 fb56 	bl	800f358 <__multadd>
 800ecac:	4681      	mov	r9, r0
 800ecae:	e7ea      	b.n	800ec86 <_dtoa_r+0xb56>
 800ecb0:	08010160 	.word	0x08010160
 800ecb4:	080100e4 	.word	0x080100e4

0800ecb8 <_free_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4605      	mov	r5, r0
 800ecbc:	2900      	cmp	r1, #0
 800ecbe:	d041      	beq.n	800ed44 <_free_r+0x8c>
 800ecc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc4:	1f0c      	subs	r4, r1, #4
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	bfb8      	it	lt
 800ecca:	18e4      	addlt	r4, r4, r3
 800eccc:	f000 fad6 	bl	800f27c <__malloc_lock>
 800ecd0:	4a1d      	ldr	r2, [pc, #116]	@ (800ed48 <_free_r+0x90>)
 800ecd2:	6813      	ldr	r3, [r2, #0]
 800ecd4:	b933      	cbnz	r3, 800ece4 <_free_r+0x2c>
 800ecd6:	6063      	str	r3, [r4, #4]
 800ecd8:	6014      	str	r4, [r2, #0]
 800ecda:	4628      	mov	r0, r5
 800ecdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ece0:	f000 bad2 	b.w	800f288 <__malloc_unlock>
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	d908      	bls.n	800ecfa <_free_r+0x42>
 800ece8:	6820      	ldr	r0, [r4, #0]
 800ecea:	1821      	adds	r1, r4, r0
 800ecec:	428b      	cmp	r3, r1
 800ecee:	bf01      	itttt	eq
 800ecf0:	6819      	ldreq	r1, [r3, #0]
 800ecf2:	685b      	ldreq	r3, [r3, #4]
 800ecf4:	1809      	addeq	r1, r1, r0
 800ecf6:	6021      	streq	r1, [r4, #0]
 800ecf8:	e7ed      	b.n	800ecd6 <_free_r+0x1e>
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	b10b      	cbz	r3, 800ed04 <_free_r+0x4c>
 800ed00:	42a3      	cmp	r3, r4
 800ed02:	d9fa      	bls.n	800ecfa <_free_r+0x42>
 800ed04:	6811      	ldr	r1, [r2, #0]
 800ed06:	1850      	adds	r0, r2, r1
 800ed08:	42a0      	cmp	r0, r4
 800ed0a:	d10b      	bne.n	800ed24 <_free_r+0x6c>
 800ed0c:	6820      	ldr	r0, [r4, #0]
 800ed0e:	4401      	add	r1, r0
 800ed10:	1850      	adds	r0, r2, r1
 800ed12:	4283      	cmp	r3, r0
 800ed14:	6011      	str	r1, [r2, #0]
 800ed16:	d1e0      	bne.n	800ecda <_free_r+0x22>
 800ed18:	6818      	ldr	r0, [r3, #0]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	6053      	str	r3, [r2, #4]
 800ed1e:	4408      	add	r0, r1
 800ed20:	6010      	str	r0, [r2, #0]
 800ed22:	e7da      	b.n	800ecda <_free_r+0x22>
 800ed24:	d902      	bls.n	800ed2c <_free_r+0x74>
 800ed26:	230c      	movs	r3, #12
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	e7d6      	b.n	800ecda <_free_r+0x22>
 800ed2c:	6820      	ldr	r0, [r4, #0]
 800ed2e:	1821      	adds	r1, r4, r0
 800ed30:	428b      	cmp	r3, r1
 800ed32:	bf04      	itt	eq
 800ed34:	6819      	ldreq	r1, [r3, #0]
 800ed36:	685b      	ldreq	r3, [r3, #4]
 800ed38:	6063      	str	r3, [r4, #4]
 800ed3a:	bf04      	itt	eq
 800ed3c:	1809      	addeq	r1, r1, r0
 800ed3e:	6021      	streq	r1, [r4, #0]
 800ed40:	6054      	str	r4, [r2, #4]
 800ed42:	e7ca      	b.n	800ecda <_free_r+0x22>
 800ed44:	bd38      	pop	{r3, r4, r5, pc}
 800ed46:	bf00      	nop
 800ed48:	20009728 	.word	0x20009728

0800ed4c <__sfputc_r>:
 800ed4c:	6893      	ldr	r3, [r2, #8]
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	b410      	push	{r4}
 800ed54:	6093      	str	r3, [r2, #8]
 800ed56:	da08      	bge.n	800ed6a <__sfputc_r+0x1e>
 800ed58:	6994      	ldr	r4, [r2, #24]
 800ed5a:	42a3      	cmp	r3, r4
 800ed5c:	db01      	blt.n	800ed62 <__sfputc_r+0x16>
 800ed5e:	290a      	cmp	r1, #10
 800ed60:	d103      	bne.n	800ed6a <__sfputc_r+0x1e>
 800ed62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed66:	f000 be5a 	b.w	800fa1e <__swbuf_r>
 800ed6a:	6813      	ldr	r3, [r2, #0]
 800ed6c:	1c58      	adds	r0, r3, #1
 800ed6e:	6010      	str	r0, [r2, #0]
 800ed70:	7019      	strb	r1, [r3, #0]
 800ed72:	4608      	mov	r0, r1
 800ed74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed78:	4770      	bx	lr

0800ed7a <__sfputs_r>:
 800ed7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7c:	4606      	mov	r6, r0
 800ed7e:	460f      	mov	r7, r1
 800ed80:	4614      	mov	r4, r2
 800ed82:	18d5      	adds	r5, r2, r3
 800ed84:	42ac      	cmp	r4, r5
 800ed86:	d101      	bne.n	800ed8c <__sfputs_r+0x12>
 800ed88:	2000      	movs	r0, #0
 800ed8a:	e007      	b.n	800ed9c <__sfputs_r+0x22>
 800ed8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed90:	463a      	mov	r2, r7
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7ff ffda 	bl	800ed4c <__sfputc_r>
 800ed98:	1c43      	adds	r3, r0, #1
 800ed9a:	d1f3      	bne.n	800ed84 <__sfputs_r+0xa>
 800ed9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eda0 <_vfiprintf_r>:
 800eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	460d      	mov	r5, r1
 800eda6:	b09d      	sub	sp, #116	@ 0x74
 800eda8:	4614      	mov	r4, r2
 800edaa:	4698      	mov	r8, r3
 800edac:	4606      	mov	r6, r0
 800edae:	b118      	cbz	r0, 800edb8 <_vfiprintf_r+0x18>
 800edb0:	6a03      	ldr	r3, [r0, #32]
 800edb2:	b90b      	cbnz	r3, 800edb8 <_vfiprintf_r+0x18>
 800edb4:	f7ff f84c 	bl	800de50 <__sinit>
 800edb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edba:	07d9      	lsls	r1, r3, #31
 800edbc:	d405      	bmi.n	800edca <_vfiprintf_r+0x2a>
 800edbe:	89ab      	ldrh	r3, [r5, #12]
 800edc0:	059a      	lsls	r2, r3, #22
 800edc2:	d402      	bmi.n	800edca <_vfiprintf_r+0x2a>
 800edc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edc6:	f7ff f918 	bl	800dffa <__retarget_lock_acquire_recursive>
 800edca:	89ab      	ldrh	r3, [r5, #12]
 800edcc:	071b      	lsls	r3, r3, #28
 800edce:	d501      	bpl.n	800edd4 <_vfiprintf_r+0x34>
 800edd0:	692b      	ldr	r3, [r5, #16]
 800edd2:	b99b      	cbnz	r3, 800edfc <_vfiprintf_r+0x5c>
 800edd4:	4629      	mov	r1, r5
 800edd6:	4630      	mov	r0, r6
 800edd8:	f000 fe60 	bl	800fa9c <__swsetup_r>
 800eddc:	b170      	cbz	r0, 800edfc <_vfiprintf_r+0x5c>
 800edde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ede0:	07dc      	lsls	r4, r3, #31
 800ede2:	d504      	bpl.n	800edee <_vfiprintf_r+0x4e>
 800ede4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ede8:	b01d      	add	sp, #116	@ 0x74
 800edea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edee:	89ab      	ldrh	r3, [r5, #12]
 800edf0:	0598      	lsls	r0, r3, #22
 800edf2:	d4f7      	bmi.n	800ede4 <_vfiprintf_r+0x44>
 800edf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edf6:	f7ff f901 	bl	800dffc <__retarget_lock_release_recursive>
 800edfa:	e7f3      	b.n	800ede4 <_vfiprintf_r+0x44>
 800edfc:	2300      	movs	r3, #0
 800edfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee00:	2320      	movs	r3, #32
 800ee02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee0a:	2330      	movs	r3, #48	@ 0x30
 800ee0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800efbc <_vfiprintf_r+0x21c>
 800ee10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee14:	f04f 0901 	mov.w	r9, #1
 800ee18:	4623      	mov	r3, r4
 800ee1a:	469a      	mov	sl, r3
 800ee1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee20:	b10a      	cbz	r2, 800ee26 <_vfiprintf_r+0x86>
 800ee22:	2a25      	cmp	r2, #37	@ 0x25
 800ee24:	d1f9      	bne.n	800ee1a <_vfiprintf_r+0x7a>
 800ee26:	ebba 0b04 	subs.w	fp, sl, r4
 800ee2a:	d00b      	beq.n	800ee44 <_vfiprintf_r+0xa4>
 800ee2c:	465b      	mov	r3, fp
 800ee2e:	4622      	mov	r2, r4
 800ee30:	4629      	mov	r1, r5
 800ee32:	4630      	mov	r0, r6
 800ee34:	f7ff ffa1 	bl	800ed7a <__sfputs_r>
 800ee38:	3001      	adds	r0, #1
 800ee3a:	f000 80a7 	beq.w	800ef8c <_vfiprintf_r+0x1ec>
 800ee3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee40:	445a      	add	r2, fp
 800ee42:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee44:	f89a 3000 	ldrb.w	r3, [sl]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f000 809f 	beq.w	800ef8c <_vfiprintf_r+0x1ec>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee58:	f10a 0a01 	add.w	sl, sl, #1
 800ee5c:	9304      	str	r3, [sp, #16]
 800ee5e:	9307      	str	r3, [sp, #28]
 800ee60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee64:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee66:	4654      	mov	r4, sl
 800ee68:	2205      	movs	r2, #5
 800ee6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee6e:	4853      	ldr	r0, [pc, #332]	@ (800efbc <_vfiprintf_r+0x21c>)
 800ee70:	f7f1 f986 	bl	8000180 <memchr>
 800ee74:	9a04      	ldr	r2, [sp, #16]
 800ee76:	b9d8      	cbnz	r0, 800eeb0 <_vfiprintf_r+0x110>
 800ee78:	06d1      	lsls	r1, r2, #27
 800ee7a:	bf44      	itt	mi
 800ee7c:	2320      	movmi	r3, #32
 800ee7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee82:	0713      	lsls	r3, r2, #28
 800ee84:	bf44      	itt	mi
 800ee86:	232b      	movmi	r3, #43	@ 0x2b
 800ee88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee92:	d015      	beq.n	800eec0 <_vfiprintf_r+0x120>
 800ee94:	9a07      	ldr	r2, [sp, #28]
 800ee96:	4654      	mov	r4, sl
 800ee98:	2000      	movs	r0, #0
 800ee9a:	f04f 0c0a 	mov.w	ip, #10
 800ee9e:	4621      	mov	r1, r4
 800eea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eea4:	3b30      	subs	r3, #48	@ 0x30
 800eea6:	2b09      	cmp	r3, #9
 800eea8:	d94b      	bls.n	800ef42 <_vfiprintf_r+0x1a2>
 800eeaa:	b1b0      	cbz	r0, 800eeda <_vfiprintf_r+0x13a>
 800eeac:	9207      	str	r2, [sp, #28]
 800eeae:	e014      	b.n	800eeda <_vfiprintf_r+0x13a>
 800eeb0:	eba0 0308 	sub.w	r3, r0, r8
 800eeb4:	fa09 f303 	lsl.w	r3, r9, r3
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	9304      	str	r3, [sp, #16]
 800eebc:	46a2      	mov	sl, r4
 800eebe:	e7d2      	b.n	800ee66 <_vfiprintf_r+0xc6>
 800eec0:	9b03      	ldr	r3, [sp, #12]
 800eec2:	1d19      	adds	r1, r3, #4
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	9103      	str	r1, [sp, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	bfbb      	ittet	lt
 800eecc:	425b      	neglt	r3, r3
 800eece:	f042 0202 	orrlt.w	r2, r2, #2
 800eed2:	9307      	strge	r3, [sp, #28]
 800eed4:	9307      	strlt	r3, [sp, #28]
 800eed6:	bfb8      	it	lt
 800eed8:	9204      	strlt	r2, [sp, #16]
 800eeda:	7823      	ldrb	r3, [r4, #0]
 800eedc:	2b2e      	cmp	r3, #46	@ 0x2e
 800eede:	d10a      	bne.n	800eef6 <_vfiprintf_r+0x156>
 800eee0:	7863      	ldrb	r3, [r4, #1]
 800eee2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eee4:	d132      	bne.n	800ef4c <_vfiprintf_r+0x1ac>
 800eee6:	9b03      	ldr	r3, [sp, #12]
 800eee8:	1d1a      	adds	r2, r3, #4
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	9203      	str	r2, [sp, #12]
 800eeee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eef2:	3402      	adds	r4, #2
 800eef4:	9305      	str	r3, [sp, #20]
 800eef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800efcc <_vfiprintf_r+0x22c>
 800eefa:	7821      	ldrb	r1, [r4, #0]
 800eefc:	2203      	movs	r2, #3
 800eefe:	4650      	mov	r0, sl
 800ef00:	f7f1 f93e 	bl	8000180 <memchr>
 800ef04:	b138      	cbz	r0, 800ef16 <_vfiprintf_r+0x176>
 800ef06:	9b04      	ldr	r3, [sp, #16]
 800ef08:	eba0 000a 	sub.w	r0, r0, sl
 800ef0c:	2240      	movs	r2, #64	@ 0x40
 800ef0e:	4082      	lsls	r2, r0
 800ef10:	4313      	orrs	r3, r2
 800ef12:	3401      	adds	r4, #1
 800ef14:	9304      	str	r3, [sp, #16]
 800ef16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1a:	4829      	ldr	r0, [pc, #164]	@ (800efc0 <_vfiprintf_r+0x220>)
 800ef1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef20:	2206      	movs	r2, #6
 800ef22:	f7f1 f92d 	bl	8000180 <memchr>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d03f      	beq.n	800efaa <_vfiprintf_r+0x20a>
 800ef2a:	4b26      	ldr	r3, [pc, #152]	@ (800efc4 <_vfiprintf_r+0x224>)
 800ef2c:	bb1b      	cbnz	r3, 800ef76 <_vfiprintf_r+0x1d6>
 800ef2e:	9b03      	ldr	r3, [sp, #12]
 800ef30:	3307      	adds	r3, #7
 800ef32:	f023 0307 	bic.w	r3, r3, #7
 800ef36:	3308      	adds	r3, #8
 800ef38:	9303      	str	r3, [sp, #12]
 800ef3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef3c:	443b      	add	r3, r7
 800ef3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef40:	e76a      	b.n	800ee18 <_vfiprintf_r+0x78>
 800ef42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef46:	460c      	mov	r4, r1
 800ef48:	2001      	movs	r0, #1
 800ef4a:	e7a8      	b.n	800ee9e <_vfiprintf_r+0xfe>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	3401      	adds	r4, #1
 800ef50:	9305      	str	r3, [sp, #20]
 800ef52:	4619      	mov	r1, r3
 800ef54:	f04f 0c0a 	mov.w	ip, #10
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef5e:	3a30      	subs	r2, #48	@ 0x30
 800ef60:	2a09      	cmp	r2, #9
 800ef62:	d903      	bls.n	800ef6c <_vfiprintf_r+0x1cc>
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d0c6      	beq.n	800eef6 <_vfiprintf_r+0x156>
 800ef68:	9105      	str	r1, [sp, #20]
 800ef6a:	e7c4      	b.n	800eef6 <_vfiprintf_r+0x156>
 800ef6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef70:	4604      	mov	r4, r0
 800ef72:	2301      	movs	r3, #1
 800ef74:	e7f0      	b.n	800ef58 <_vfiprintf_r+0x1b8>
 800ef76:	ab03      	add	r3, sp, #12
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	462a      	mov	r2, r5
 800ef7c:	4b12      	ldr	r3, [pc, #72]	@ (800efc8 <_vfiprintf_r+0x228>)
 800ef7e:	a904      	add	r1, sp, #16
 800ef80:	4630      	mov	r0, r6
 800ef82:	f7fe fb21 	bl	800d5c8 <_printf_float>
 800ef86:	4607      	mov	r7, r0
 800ef88:	1c78      	adds	r0, r7, #1
 800ef8a:	d1d6      	bne.n	800ef3a <_vfiprintf_r+0x19a>
 800ef8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef8e:	07d9      	lsls	r1, r3, #31
 800ef90:	d405      	bmi.n	800ef9e <_vfiprintf_r+0x1fe>
 800ef92:	89ab      	ldrh	r3, [r5, #12]
 800ef94:	059a      	lsls	r2, r3, #22
 800ef96:	d402      	bmi.n	800ef9e <_vfiprintf_r+0x1fe>
 800ef98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef9a:	f7ff f82f 	bl	800dffc <__retarget_lock_release_recursive>
 800ef9e:	89ab      	ldrh	r3, [r5, #12]
 800efa0:	065b      	lsls	r3, r3, #25
 800efa2:	f53f af1f 	bmi.w	800ede4 <_vfiprintf_r+0x44>
 800efa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efa8:	e71e      	b.n	800ede8 <_vfiprintf_r+0x48>
 800efaa:	ab03      	add	r3, sp, #12
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	462a      	mov	r2, r5
 800efb0:	4b05      	ldr	r3, [pc, #20]	@ (800efc8 <_vfiprintf_r+0x228>)
 800efb2:	a904      	add	r1, sp, #16
 800efb4:	4630      	mov	r0, r6
 800efb6:	f7fe fd9f 	bl	800daf8 <_printf_i>
 800efba:	e7e4      	b.n	800ef86 <_vfiprintf_r+0x1e6>
 800efbc:	08010171 	.word	0x08010171
 800efc0:	0801017b 	.word	0x0801017b
 800efc4:	0800d5c9 	.word	0x0800d5c9
 800efc8:	0800ed7b 	.word	0x0800ed7b
 800efcc:	08010177 	.word	0x08010177

0800efd0 <malloc>:
 800efd0:	4b02      	ldr	r3, [pc, #8]	@ (800efdc <malloc+0xc>)
 800efd2:	4601      	mov	r1, r0
 800efd4:	6818      	ldr	r0, [r3, #0]
 800efd6:	f000 b825 	b.w	800f024 <_malloc_r>
 800efda:	bf00      	nop
 800efdc:	20000028 	.word	0x20000028

0800efe0 <sbrk_aligned>:
 800efe0:	b570      	push	{r4, r5, r6, lr}
 800efe2:	4e0f      	ldr	r6, [pc, #60]	@ (800f020 <sbrk_aligned+0x40>)
 800efe4:	460c      	mov	r4, r1
 800efe6:	6831      	ldr	r1, [r6, #0]
 800efe8:	4605      	mov	r5, r0
 800efea:	b911      	cbnz	r1, 800eff2 <sbrk_aligned+0x12>
 800efec:	f000 fe64 	bl	800fcb8 <_sbrk_r>
 800eff0:	6030      	str	r0, [r6, #0]
 800eff2:	4621      	mov	r1, r4
 800eff4:	4628      	mov	r0, r5
 800eff6:	f000 fe5f 	bl	800fcb8 <_sbrk_r>
 800effa:	1c43      	adds	r3, r0, #1
 800effc:	d103      	bne.n	800f006 <sbrk_aligned+0x26>
 800effe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f002:	4620      	mov	r0, r4
 800f004:	bd70      	pop	{r4, r5, r6, pc}
 800f006:	1cc4      	adds	r4, r0, #3
 800f008:	f024 0403 	bic.w	r4, r4, #3
 800f00c:	42a0      	cmp	r0, r4
 800f00e:	d0f8      	beq.n	800f002 <sbrk_aligned+0x22>
 800f010:	1a21      	subs	r1, r4, r0
 800f012:	4628      	mov	r0, r5
 800f014:	f000 fe50 	bl	800fcb8 <_sbrk_r>
 800f018:	3001      	adds	r0, #1
 800f01a:	d1f2      	bne.n	800f002 <sbrk_aligned+0x22>
 800f01c:	e7ef      	b.n	800effe <sbrk_aligned+0x1e>
 800f01e:	bf00      	nop
 800f020:	20009724 	.word	0x20009724

0800f024 <_malloc_r>:
 800f024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f028:	1ccd      	adds	r5, r1, #3
 800f02a:	f025 0503 	bic.w	r5, r5, #3
 800f02e:	3508      	adds	r5, #8
 800f030:	2d0c      	cmp	r5, #12
 800f032:	bf38      	it	cc
 800f034:	250c      	movcc	r5, #12
 800f036:	2d00      	cmp	r5, #0
 800f038:	4606      	mov	r6, r0
 800f03a:	db01      	blt.n	800f040 <_malloc_r+0x1c>
 800f03c:	42a9      	cmp	r1, r5
 800f03e:	d904      	bls.n	800f04a <_malloc_r+0x26>
 800f040:	230c      	movs	r3, #12
 800f042:	6033      	str	r3, [r6, #0]
 800f044:	2000      	movs	r0, #0
 800f046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f04a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f120 <_malloc_r+0xfc>
 800f04e:	f000 f915 	bl	800f27c <__malloc_lock>
 800f052:	f8d8 3000 	ldr.w	r3, [r8]
 800f056:	461c      	mov	r4, r3
 800f058:	bb44      	cbnz	r4, 800f0ac <_malloc_r+0x88>
 800f05a:	4629      	mov	r1, r5
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7ff ffbf 	bl	800efe0 <sbrk_aligned>
 800f062:	1c43      	adds	r3, r0, #1
 800f064:	4604      	mov	r4, r0
 800f066:	d158      	bne.n	800f11a <_malloc_r+0xf6>
 800f068:	f8d8 4000 	ldr.w	r4, [r8]
 800f06c:	4627      	mov	r7, r4
 800f06e:	2f00      	cmp	r7, #0
 800f070:	d143      	bne.n	800f0fa <_malloc_r+0xd6>
 800f072:	2c00      	cmp	r4, #0
 800f074:	d04b      	beq.n	800f10e <_malloc_r+0xea>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	4639      	mov	r1, r7
 800f07a:	4630      	mov	r0, r6
 800f07c:	eb04 0903 	add.w	r9, r4, r3
 800f080:	f000 fe1a 	bl	800fcb8 <_sbrk_r>
 800f084:	4581      	cmp	r9, r0
 800f086:	d142      	bne.n	800f10e <_malloc_r+0xea>
 800f088:	6821      	ldr	r1, [r4, #0]
 800f08a:	1a6d      	subs	r5, r5, r1
 800f08c:	4629      	mov	r1, r5
 800f08e:	4630      	mov	r0, r6
 800f090:	f7ff ffa6 	bl	800efe0 <sbrk_aligned>
 800f094:	3001      	adds	r0, #1
 800f096:	d03a      	beq.n	800f10e <_malloc_r+0xea>
 800f098:	6823      	ldr	r3, [r4, #0]
 800f09a:	442b      	add	r3, r5
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	f8d8 3000 	ldr.w	r3, [r8]
 800f0a2:	685a      	ldr	r2, [r3, #4]
 800f0a4:	bb62      	cbnz	r2, 800f100 <_malloc_r+0xdc>
 800f0a6:	f8c8 7000 	str.w	r7, [r8]
 800f0aa:	e00f      	b.n	800f0cc <_malloc_r+0xa8>
 800f0ac:	6822      	ldr	r2, [r4, #0]
 800f0ae:	1b52      	subs	r2, r2, r5
 800f0b0:	d420      	bmi.n	800f0f4 <_malloc_r+0xd0>
 800f0b2:	2a0b      	cmp	r2, #11
 800f0b4:	d917      	bls.n	800f0e6 <_malloc_r+0xc2>
 800f0b6:	1961      	adds	r1, r4, r5
 800f0b8:	42a3      	cmp	r3, r4
 800f0ba:	6025      	str	r5, [r4, #0]
 800f0bc:	bf18      	it	ne
 800f0be:	6059      	strne	r1, [r3, #4]
 800f0c0:	6863      	ldr	r3, [r4, #4]
 800f0c2:	bf08      	it	eq
 800f0c4:	f8c8 1000 	streq.w	r1, [r8]
 800f0c8:	5162      	str	r2, [r4, r5]
 800f0ca:	604b      	str	r3, [r1, #4]
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f000 f8db 	bl	800f288 <__malloc_unlock>
 800f0d2:	f104 000b 	add.w	r0, r4, #11
 800f0d6:	1d23      	adds	r3, r4, #4
 800f0d8:	f020 0007 	bic.w	r0, r0, #7
 800f0dc:	1ac2      	subs	r2, r0, r3
 800f0de:	bf1c      	itt	ne
 800f0e0:	1a1b      	subne	r3, r3, r0
 800f0e2:	50a3      	strne	r3, [r4, r2]
 800f0e4:	e7af      	b.n	800f046 <_malloc_r+0x22>
 800f0e6:	6862      	ldr	r2, [r4, #4]
 800f0e8:	42a3      	cmp	r3, r4
 800f0ea:	bf0c      	ite	eq
 800f0ec:	f8c8 2000 	streq.w	r2, [r8]
 800f0f0:	605a      	strne	r2, [r3, #4]
 800f0f2:	e7eb      	b.n	800f0cc <_malloc_r+0xa8>
 800f0f4:	4623      	mov	r3, r4
 800f0f6:	6864      	ldr	r4, [r4, #4]
 800f0f8:	e7ae      	b.n	800f058 <_malloc_r+0x34>
 800f0fa:	463c      	mov	r4, r7
 800f0fc:	687f      	ldr	r7, [r7, #4]
 800f0fe:	e7b6      	b.n	800f06e <_malloc_r+0x4a>
 800f100:	461a      	mov	r2, r3
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	42a3      	cmp	r3, r4
 800f106:	d1fb      	bne.n	800f100 <_malloc_r+0xdc>
 800f108:	2300      	movs	r3, #0
 800f10a:	6053      	str	r3, [r2, #4]
 800f10c:	e7de      	b.n	800f0cc <_malloc_r+0xa8>
 800f10e:	230c      	movs	r3, #12
 800f110:	6033      	str	r3, [r6, #0]
 800f112:	4630      	mov	r0, r6
 800f114:	f000 f8b8 	bl	800f288 <__malloc_unlock>
 800f118:	e794      	b.n	800f044 <_malloc_r+0x20>
 800f11a:	6005      	str	r5, [r0, #0]
 800f11c:	e7d6      	b.n	800f0cc <_malloc_r+0xa8>
 800f11e:	bf00      	nop
 800f120:	20009728 	.word	0x20009728

0800f124 <__sflush_r>:
 800f124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	0716      	lsls	r6, r2, #28
 800f12e:	4605      	mov	r5, r0
 800f130:	460c      	mov	r4, r1
 800f132:	d454      	bmi.n	800f1de <__sflush_r+0xba>
 800f134:	684b      	ldr	r3, [r1, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	dc02      	bgt.n	800f140 <__sflush_r+0x1c>
 800f13a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	dd48      	ble.n	800f1d2 <__sflush_r+0xae>
 800f140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f142:	2e00      	cmp	r6, #0
 800f144:	d045      	beq.n	800f1d2 <__sflush_r+0xae>
 800f146:	2300      	movs	r3, #0
 800f148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f14c:	682f      	ldr	r7, [r5, #0]
 800f14e:	6a21      	ldr	r1, [r4, #32]
 800f150:	602b      	str	r3, [r5, #0]
 800f152:	d030      	beq.n	800f1b6 <__sflush_r+0x92>
 800f154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	0759      	lsls	r1, r3, #29
 800f15a:	d505      	bpl.n	800f168 <__sflush_r+0x44>
 800f15c:	6863      	ldr	r3, [r4, #4]
 800f15e:	1ad2      	subs	r2, r2, r3
 800f160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f162:	b10b      	cbz	r3, 800f168 <__sflush_r+0x44>
 800f164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f166:	1ad2      	subs	r2, r2, r3
 800f168:	2300      	movs	r3, #0
 800f16a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f16c:	6a21      	ldr	r1, [r4, #32]
 800f16e:	4628      	mov	r0, r5
 800f170:	47b0      	blx	r6
 800f172:	1c43      	adds	r3, r0, #1
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	d106      	bne.n	800f186 <__sflush_r+0x62>
 800f178:	6829      	ldr	r1, [r5, #0]
 800f17a:	291d      	cmp	r1, #29
 800f17c:	d82b      	bhi.n	800f1d6 <__sflush_r+0xb2>
 800f17e:	4a2a      	ldr	r2, [pc, #168]	@ (800f228 <__sflush_r+0x104>)
 800f180:	410a      	asrs	r2, r1
 800f182:	07d6      	lsls	r6, r2, #31
 800f184:	d427      	bmi.n	800f1d6 <__sflush_r+0xb2>
 800f186:	2200      	movs	r2, #0
 800f188:	6062      	str	r2, [r4, #4]
 800f18a:	04d9      	lsls	r1, r3, #19
 800f18c:	6922      	ldr	r2, [r4, #16]
 800f18e:	6022      	str	r2, [r4, #0]
 800f190:	d504      	bpl.n	800f19c <__sflush_r+0x78>
 800f192:	1c42      	adds	r2, r0, #1
 800f194:	d101      	bne.n	800f19a <__sflush_r+0x76>
 800f196:	682b      	ldr	r3, [r5, #0]
 800f198:	b903      	cbnz	r3, 800f19c <__sflush_r+0x78>
 800f19a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f19e:	602f      	str	r7, [r5, #0]
 800f1a0:	b1b9      	cbz	r1, 800f1d2 <__sflush_r+0xae>
 800f1a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1a6:	4299      	cmp	r1, r3
 800f1a8:	d002      	beq.n	800f1b0 <__sflush_r+0x8c>
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	f7ff fd84 	bl	800ecb8 <_free_r>
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1b4:	e00d      	b.n	800f1d2 <__sflush_r+0xae>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	47b0      	blx	r6
 800f1bc:	4602      	mov	r2, r0
 800f1be:	1c50      	adds	r0, r2, #1
 800f1c0:	d1c9      	bne.n	800f156 <__sflush_r+0x32>
 800f1c2:	682b      	ldr	r3, [r5, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d0c6      	beq.n	800f156 <__sflush_r+0x32>
 800f1c8:	2b1d      	cmp	r3, #29
 800f1ca:	d001      	beq.n	800f1d0 <__sflush_r+0xac>
 800f1cc:	2b16      	cmp	r3, #22
 800f1ce:	d11e      	bne.n	800f20e <__sflush_r+0xea>
 800f1d0:	602f      	str	r7, [r5, #0]
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	e022      	b.n	800f21c <__sflush_r+0xf8>
 800f1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1da:	b21b      	sxth	r3, r3
 800f1dc:	e01b      	b.n	800f216 <__sflush_r+0xf2>
 800f1de:	690f      	ldr	r7, [r1, #16]
 800f1e0:	2f00      	cmp	r7, #0
 800f1e2:	d0f6      	beq.n	800f1d2 <__sflush_r+0xae>
 800f1e4:	0793      	lsls	r3, r2, #30
 800f1e6:	680e      	ldr	r6, [r1, #0]
 800f1e8:	bf08      	it	eq
 800f1ea:	694b      	ldreq	r3, [r1, #20]
 800f1ec:	600f      	str	r7, [r1, #0]
 800f1ee:	bf18      	it	ne
 800f1f0:	2300      	movne	r3, #0
 800f1f2:	eba6 0807 	sub.w	r8, r6, r7
 800f1f6:	608b      	str	r3, [r1, #8]
 800f1f8:	f1b8 0f00 	cmp.w	r8, #0
 800f1fc:	dde9      	ble.n	800f1d2 <__sflush_r+0xae>
 800f1fe:	6a21      	ldr	r1, [r4, #32]
 800f200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f202:	4643      	mov	r3, r8
 800f204:	463a      	mov	r2, r7
 800f206:	4628      	mov	r0, r5
 800f208:	47b0      	blx	r6
 800f20a:	2800      	cmp	r0, #0
 800f20c:	dc08      	bgt.n	800f220 <__sflush_r+0xfc>
 800f20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f216:	81a3      	strh	r3, [r4, #12]
 800f218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f220:	4407      	add	r7, r0
 800f222:	eba8 0800 	sub.w	r8, r8, r0
 800f226:	e7e7      	b.n	800f1f8 <__sflush_r+0xd4>
 800f228:	dfbffffe 	.word	0xdfbffffe

0800f22c <_fflush_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	690b      	ldr	r3, [r1, #16]
 800f230:	4605      	mov	r5, r0
 800f232:	460c      	mov	r4, r1
 800f234:	b913      	cbnz	r3, 800f23c <_fflush_r+0x10>
 800f236:	2500      	movs	r5, #0
 800f238:	4628      	mov	r0, r5
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	b118      	cbz	r0, 800f246 <_fflush_r+0x1a>
 800f23e:	6a03      	ldr	r3, [r0, #32]
 800f240:	b90b      	cbnz	r3, 800f246 <_fflush_r+0x1a>
 800f242:	f7fe fe05 	bl	800de50 <__sinit>
 800f246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d0f3      	beq.n	800f236 <_fflush_r+0xa>
 800f24e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f250:	07d0      	lsls	r0, r2, #31
 800f252:	d404      	bmi.n	800f25e <_fflush_r+0x32>
 800f254:	0599      	lsls	r1, r3, #22
 800f256:	d402      	bmi.n	800f25e <_fflush_r+0x32>
 800f258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f25a:	f7fe fece 	bl	800dffa <__retarget_lock_acquire_recursive>
 800f25e:	4628      	mov	r0, r5
 800f260:	4621      	mov	r1, r4
 800f262:	f7ff ff5f 	bl	800f124 <__sflush_r>
 800f266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f268:	07da      	lsls	r2, r3, #31
 800f26a:	4605      	mov	r5, r0
 800f26c:	d4e4      	bmi.n	800f238 <_fflush_r+0xc>
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	059b      	lsls	r3, r3, #22
 800f272:	d4e1      	bmi.n	800f238 <_fflush_r+0xc>
 800f274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f276:	f7fe fec1 	bl	800dffc <__retarget_lock_release_recursive>
 800f27a:	e7dd      	b.n	800f238 <_fflush_r+0xc>

0800f27c <__malloc_lock>:
 800f27c:	4801      	ldr	r0, [pc, #4]	@ (800f284 <__malloc_lock+0x8>)
 800f27e:	f7fe bebc 	b.w	800dffa <__retarget_lock_acquire_recursive>
 800f282:	bf00      	nop
 800f284:	20009720 	.word	0x20009720

0800f288 <__malloc_unlock>:
 800f288:	4801      	ldr	r0, [pc, #4]	@ (800f290 <__malloc_unlock+0x8>)
 800f28a:	f7fe beb7 	b.w	800dffc <__retarget_lock_release_recursive>
 800f28e:	bf00      	nop
 800f290:	20009720 	.word	0x20009720

0800f294 <_Balloc>:
 800f294:	b570      	push	{r4, r5, r6, lr}
 800f296:	69c6      	ldr	r6, [r0, #28]
 800f298:	4604      	mov	r4, r0
 800f29a:	460d      	mov	r5, r1
 800f29c:	b976      	cbnz	r6, 800f2bc <_Balloc+0x28>
 800f29e:	2010      	movs	r0, #16
 800f2a0:	f7ff fe96 	bl	800efd0 <malloc>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	61e0      	str	r0, [r4, #28]
 800f2a8:	b920      	cbnz	r0, 800f2b4 <_Balloc+0x20>
 800f2aa:	4b18      	ldr	r3, [pc, #96]	@ (800f30c <_Balloc+0x78>)
 800f2ac:	4818      	ldr	r0, [pc, #96]	@ (800f310 <_Balloc+0x7c>)
 800f2ae:	216b      	movs	r1, #107	@ 0x6b
 800f2b0:	f000 fd24 	bl	800fcfc <__assert_func>
 800f2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2b8:	6006      	str	r6, [r0, #0]
 800f2ba:	60c6      	str	r6, [r0, #12]
 800f2bc:	69e6      	ldr	r6, [r4, #28]
 800f2be:	68f3      	ldr	r3, [r6, #12]
 800f2c0:	b183      	cbz	r3, 800f2e4 <_Balloc+0x50>
 800f2c2:	69e3      	ldr	r3, [r4, #28]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2ca:	b9b8      	cbnz	r0, 800f2fc <_Balloc+0x68>
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800f2d2:	1d72      	adds	r2, r6, #5
 800f2d4:	0092      	lsls	r2, r2, #2
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 fd2e 	bl	800fd38 <_calloc_r>
 800f2dc:	b160      	cbz	r0, 800f2f8 <_Balloc+0x64>
 800f2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f2e2:	e00e      	b.n	800f302 <_Balloc+0x6e>
 800f2e4:	2221      	movs	r2, #33	@ 0x21
 800f2e6:	2104      	movs	r1, #4
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f000 fd25 	bl	800fd38 <_calloc_r>
 800f2ee:	69e3      	ldr	r3, [r4, #28]
 800f2f0:	60f0      	str	r0, [r6, #12]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1e4      	bne.n	800f2c2 <_Balloc+0x2e>
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	6802      	ldr	r2, [r0, #0]
 800f2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f302:	2300      	movs	r3, #0
 800f304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f308:	e7f7      	b.n	800f2fa <_Balloc+0x66>
 800f30a:	bf00      	nop
 800f30c:	080100f1 	.word	0x080100f1
 800f310:	08010182 	.word	0x08010182

0800f314 <_Bfree>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	69c6      	ldr	r6, [r0, #28]
 800f318:	4605      	mov	r5, r0
 800f31a:	460c      	mov	r4, r1
 800f31c:	b976      	cbnz	r6, 800f33c <_Bfree+0x28>
 800f31e:	2010      	movs	r0, #16
 800f320:	f7ff fe56 	bl	800efd0 <malloc>
 800f324:	4602      	mov	r2, r0
 800f326:	61e8      	str	r0, [r5, #28]
 800f328:	b920      	cbnz	r0, 800f334 <_Bfree+0x20>
 800f32a:	4b09      	ldr	r3, [pc, #36]	@ (800f350 <_Bfree+0x3c>)
 800f32c:	4809      	ldr	r0, [pc, #36]	@ (800f354 <_Bfree+0x40>)
 800f32e:	218f      	movs	r1, #143	@ 0x8f
 800f330:	f000 fce4 	bl	800fcfc <__assert_func>
 800f334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f338:	6006      	str	r6, [r0, #0]
 800f33a:	60c6      	str	r6, [r0, #12]
 800f33c:	b13c      	cbz	r4, 800f34e <_Bfree+0x3a>
 800f33e:	69eb      	ldr	r3, [r5, #28]
 800f340:	6862      	ldr	r2, [r4, #4]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f348:	6021      	str	r1, [r4, #0]
 800f34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	080100f1 	.word	0x080100f1
 800f354:	08010182 	.word	0x08010182

0800f358 <__multadd>:
 800f358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f35c:	690d      	ldr	r5, [r1, #16]
 800f35e:	4607      	mov	r7, r0
 800f360:	460c      	mov	r4, r1
 800f362:	461e      	mov	r6, r3
 800f364:	f101 0c14 	add.w	ip, r1, #20
 800f368:	2000      	movs	r0, #0
 800f36a:	f8dc 3000 	ldr.w	r3, [ip]
 800f36e:	b299      	uxth	r1, r3
 800f370:	fb02 6101 	mla	r1, r2, r1, r6
 800f374:	0c1e      	lsrs	r6, r3, #16
 800f376:	0c0b      	lsrs	r3, r1, #16
 800f378:	fb02 3306 	mla	r3, r2, r6, r3
 800f37c:	b289      	uxth	r1, r1
 800f37e:	3001      	adds	r0, #1
 800f380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f384:	4285      	cmp	r5, r0
 800f386:	f84c 1b04 	str.w	r1, [ip], #4
 800f38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f38e:	dcec      	bgt.n	800f36a <__multadd+0x12>
 800f390:	b30e      	cbz	r6, 800f3d6 <__multadd+0x7e>
 800f392:	68a3      	ldr	r3, [r4, #8]
 800f394:	42ab      	cmp	r3, r5
 800f396:	dc19      	bgt.n	800f3cc <__multadd+0x74>
 800f398:	6861      	ldr	r1, [r4, #4]
 800f39a:	4638      	mov	r0, r7
 800f39c:	3101      	adds	r1, #1
 800f39e:	f7ff ff79 	bl	800f294 <_Balloc>
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	b928      	cbnz	r0, 800f3b2 <__multadd+0x5a>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f3dc <__multadd+0x84>)
 800f3aa:	480d      	ldr	r0, [pc, #52]	@ (800f3e0 <__multadd+0x88>)
 800f3ac:	21ba      	movs	r1, #186	@ 0xba
 800f3ae:	f000 fca5 	bl	800fcfc <__assert_func>
 800f3b2:	6922      	ldr	r2, [r4, #16]
 800f3b4:	3202      	adds	r2, #2
 800f3b6:	f104 010c 	add.w	r1, r4, #12
 800f3ba:	0092      	lsls	r2, r2, #2
 800f3bc:	300c      	adds	r0, #12
 800f3be:	f7fe fe1e 	bl	800dffe <memcpy>
 800f3c2:	4621      	mov	r1, r4
 800f3c4:	4638      	mov	r0, r7
 800f3c6:	f7ff ffa5 	bl	800f314 <_Bfree>
 800f3ca:	4644      	mov	r4, r8
 800f3cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f3d0:	3501      	adds	r5, #1
 800f3d2:	615e      	str	r6, [r3, #20]
 800f3d4:	6125      	str	r5, [r4, #16]
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3dc:	08010160 	.word	0x08010160
 800f3e0:	08010182 	.word	0x08010182

0800f3e4 <__hi0bits>:
 800f3e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	bf36      	itet	cc
 800f3ec:	0403      	lslcc	r3, r0, #16
 800f3ee:	2000      	movcs	r0, #0
 800f3f0:	2010      	movcc	r0, #16
 800f3f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f3f6:	bf3c      	itt	cc
 800f3f8:	021b      	lslcc	r3, r3, #8
 800f3fa:	3008      	addcc	r0, #8
 800f3fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f400:	bf3c      	itt	cc
 800f402:	011b      	lslcc	r3, r3, #4
 800f404:	3004      	addcc	r0, #4
 800f406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f40a:	bf3c      	itt	cc
 800f40c:	009b      	lslcc	r3, r3, #2
 800f40e:	3002      	addcc	r0, #2
 800f410:	2b00      	cmp	r3, #0
 800f412:	db05      	blt.n	800f420 <__hi0bits+0x3c>
 800f414:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f418:	f100 0001 	add.w	r0, r0, #1
 800f41c:	bf08      	it	eq
 800f41e:	2020      	moveq	r0, #32
 800f420:	4770      	bx	lr

0800f422 <__lo0bits>:
 800f422:	6803      	ldr	r3, [r0, #0]
 800f424:	4602      	mov	r2, r0
 800f426:	f013 0007 	ands.w	r0, r3, #7
 800f42a:	d00b      	beq.n	800f444 <__lo0bits+0x22>
 800f42c:	07d9      	lsls	r1, r3, #31
 800f42e:	d421      	bmi.n	800f474 <__lo0bits+0x52>
 800f430:	0798      	lsls	r0, r3, #30
 800f432:	bf49      	itett	mi
 800f434:	085b      	lsrmi	r3, r3, #1
 800f436:	089b      	lsrpl	r3, r3, #2
 800f438:	2001      	movmi	r0, #1
 800f43a:	6013      	strmi	r3, [r2, #0]
 800f43c:	bf5c      	itt	pl
 800f43e:	6013      	strpl	r3, [r2, #0]
 800f440:	2002      	movpl	r0, #2
 800f442:	4770      	bx	lr
 800f444:	b299      	uxth	r1, r3
 800f446:	b909      	cbnz	r1, 800f44c <__lo0bits+0x2a>
 800f448:	0c1b      	lsrs	r3, r3, #16
 800f44a:	2010      	movs	r0, #16
 800f44c:	b2d9      	uxtb	r1, r3
 800f44e:	b909      	cbnz	r1, 800f454 <__lo0bits+0x32>
 800f450:	3008      	adds	r0, #8
 800f452:	0a1b      	lsrs	r3, r3, #8
 800f454:	0719      	lsls	r1, r3, #28
 800f456:	bf04      	itt	eq
 800f458:	091b      	lsreq	r3, r3, #4
 800f45a:	3004      	addeq	r0, #4
 800f45c:	0799      	lsls	r1, r3, #30
 800f45e:	bf04      	itt	eq
 800f460:	089b      	lsreq	r3, r3, #2
 800f462:	3002      	addeq	r0, #2
 800f464:	07d9      	lsls	r1, r3, #31
 800f466:	d403      	bmi.n	800f470 <__lo0bits+0x4e>
 800f468:	085b      	lsrs	r3, r3, #1
 800f46a:	f100 0001 	add.w	r0, r0, #1
 800f46e:	d003      	beq.n	800f478 <__lo0bits+0x56>
 800f470:	6013      	str	r3, [r2, #0]
 800f472:	4770      	bx	lr
 800f474:	2000      	movs	r0, #0
 800f476:	4770      	bx	lr
 800f478:	2020      	movs	r0, #32
 800f47a:	4770      	bx	lr

0800f47c <__i2b>:
 800f47c:	b510      	push	{r4, lr}
 800f47e:	460c      	mov	r4, r1
 800f480:	2101      	movs	r1, #1
 800f482:	f7ff ff07 	bl	800f294 <_Balloc>
 800f486:	4602      	mov	r2, r0
 800f488:	b928      	cbnz	r0, 800f496 <__i2b+0x1a>
 800f48a:	4b05      	ldr	r3, [pc, #20]	@ (800f4a0 <__i2b+0x24>)
 800f48c:	4805      	ldr	r0, [pc, #20]	@ (800f4a4 <__i2b+0x28>)
 800f48e:	f240 1145 	movw	r1, #325	@ 0x145
 800f492:	f000 fc33 	bl	800fcfc <__assert_func>
 800f496:	2301      	movs	r3, #1
 800f498:	6144      	str	r4, [r0, #20]
 800f49a:	6103      	str	r3, [r0, #16]
 800f49c:	bd10      	pop	{r4, pc}
 800f49e:	bf00      	nop
 800f4a0:	08010160 	.word	0x08010160
 800f4a4:	08010182 	.word	0x08010182

0800f4a8 <__multiply>:
 800f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	4614      	mov	r4, r2
 800f4ae:	690a      	ldr	r2, [r1, #16]
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	bfa8      	it	ge
 800f4b6:	4623      	movge	r3, r4
 800f4b8:	460f      	mov	r7, r1
 800f4ba:	bfa4      	itt	ge
 800f4bc:	460c      	movge	r4, r1
 800f4be:	461f      	movge	r7, r3
 800f4c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f4c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f4c8:	68a3      	ldr	r3, [r4, #8]
 800f4ca:	6861      	ldr	r1, [r4, #4]
 800f4cc:	eb0a 0609 	add.w	r6, sl, r9
 800f4d0:	42b3      	cmp	r3, r6
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	bfb8      	it	lt
 800f4d6:	3101      	addlt	r1, #1
 800f4d8:	f7ff fedc 	bl	800f294 <_Balloc>
 800f4dc:	b930      	cbnz	r0, 800f4ec <__multiply+0x44>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	4b44      	ldr	r3, [pc, #272]	@ (800f5f4 <__multiply+0x14c>)
 800f4e2:	4845      	ldr	r0, [pc, #276]	@ (800f5f8 <__multiply+0x150>)
 800f4e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f4e8:	f000 fc08 	bl	800fcfc <__assert_func>
 800f4ec:	f100 0514 	add.w	r5, r0, #20
 800f4f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f4f4:	462b      	mov	r3, r5
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	4543      	cmp	r3, r8
 800f4fa:	d321      	bcc.n	800f540 <__multiply+0x98>
 800f4fc:	f107 0114 	add.w	r1, r7, #20
 800f500:	f104 0214 	add.w	r2, r4, #20
 800f504:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f508:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f50c:	9302      	str	r3, [sp, #8]
 800f50e:	1b13      	subs	r3, r2, r4
 800f510:	3b15      	subs	r3, #21
 800f512:	f023 0303 	bic.w	r3, r3, #3
 800f516:	3304      	adds	r3, #4
 800f518:	f104 0715 	add.w	r7, r4, #21
 800f51c:	42ba      	cmp	r2, r7
 800f51e:	bf38      	it	cc
 800f520:	2304      	movcc	r3, #4
 800f522:	9301      	str	r3, [sp, #4]
 800f524:	9b02      	ldr	r3, [sp, #8]
 800f526:	9103      	str	r1, [sp, #12]
 800f528:	428b      	cmp	r3, r1
 800f52a:	d80c      	bhi.n	800f546 <__multiply+0x9e>
 800f52c:	2e00      	cmp	r6, #0
 800f52e:	dd03      	ble.n	800f538 <__multiply+0x90>
 800f530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f534:	2b00      	cmp	r3, #0
 800f536:	d05b      	beq.n	800f5f0 <__multiply+0x148>
 800f538:	6106      	str	r6, [r0, #16]
 800f53a:	b005      	add	sp, #20
 800f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f540:	f843 2b04 	str.w	r2, [r3], #4
 800f544:	e7d8      	b.n	800f4f8 <__multiply+0x50>
 800f546:	f8b1 a000 	ldrh.w	sl, [r1]
 800f54a:	f1ba 0f00 	cmp.w	sl, #0
 800f54e:	d024      	beq.n	800f59a <__multiply+0xf2>
 800f550:	f104 0e14 	add.w	lr, r4, #20
 800f554:	46a9      	mov	r9, r5
 800f556:	f04f 0c00 	mov.w	ip, #0
 800f55a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f55e:	f8d9 3000 	ldr.w	r3, [r9]
 800f562:	fa1f fb87 	uxth.w	fp, r7
 800f566:	b29b      	uxth	r3, r3
 800f568:	fb0a 330b 	mla	r3, sl, fp, r3
 800f56c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f570:	f8d9 7000 	ldr.w	r7, [r9]
 800f574:	4463      	add	r3, ip
 800f576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f57a:	fb0a c70b 	mla	r7, sl, fp, ip
 800f57e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f582:	b29b      	uxth	r3, r3
 800f584:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f588:	4572      	cmp	r2, lr
 800f58a:	f849 3b04 	str.w	r3, [r9], #4
 800f58e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f592:	d8e2      	bhi.n	800f55a <__multiply+0xb2>
 800f594:	9b01      	ldr	r3, [sp, #4]
 800f596:	f845 c003 	str.w	ip, [r5, r3]
 800f59a:	9b03      	ldr	r3, [sp, #12]
 800f59c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f5a0:	3104      	adds	r1, #4
 800f5a2:	f1b9 0f00 	cmp.w	r9, #0
 800f5a6:	d021      	beq.n	800f5ec <__multiply+0x144>
 800f5a8:	682b      	ldr	r3, [r5, #0]
 800f5aa:	f104 0c14 	add.w	ip, r4, #20
 800f5ae:	46ae      	mov	lr, r5
 800f5b0:	f04f 0a00 	mov.w	sl, #0
 800f5b4:	f8bc b000 	ldrh.w	fp, [ip]
 800f5b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f5bc:	fb09 770b 	mla	r7, r9, fp, r7
 800f5c0:	4457      	add	r7, sl
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f5c8:	f84e 3b04 	str.w	r3, [lr], #4
 800f5cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f5d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5d4:	f8be 3000 	ldrh.w	r3, [lr]
 800f5d8:	fb09 330a 	mla	r3, r9, sl, r3
 800f5dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f5e0:	4562      	cmp	r2, ip
 800f5e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5e6:	d8e5      	bhi.n	800f5b4 <__multiply+0x10c>
 800f5e8:	9f01      	ldr	r7, [sp, #4]
 800f5ea:	51eb      	str	r3, [r5, r7]
 800f5ec:	3504      	adds	r5, #4
 800f5ee:	e799      	b.n	800f524 <__multiply+0x7c>
 800f5f0:	3e01      	subs	r6, #1
 800f5f2:	e79b      	b.n	800f52c <__multiply+0x84>
 800f5f4:	08010160 	.word	0x08010160
 800f5f8:	08010182 	.word	0x08010182

0800f5fc <__pow5mult>:
 800f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f600:	4615      	mov	r5, r2
 800f602:	f012 0203 	ands.w	r2, r2, #3
 800f606:	4607      	mov	r7, r0
 800f608:	460e      	mov	r6, r1
 800f60a:	d007      	beq.n	800f61c <__pow5mult+0x20>
 800f60c:	4c25      	ldr	r4, [pc, #148]	@ (800f6a4 <__pow5mult+0xa8>)
 800f60e:	3a01      	subs	r2, #1
 800f610:	2300      	movs	r3, #0
 800f612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f616:	f7ff fe9f 	bl	800f358 <__multadd>
 800f61a:	4606      	mov	r6, r0
 800f61c:	10ad      	asrs	r5, r5, #2
 800f61e:	d03d      	beq.n	800f69c <__pow5mult+0xa0>
 800f620:	69fc      	ldr	r4, [r7, #28]
 800f622:	b97c      	cbnz	r4, 800f644 <__pow5mult+0x48>
 800f624:	2010      	movs	r0, #16
 800f626:	f7ff fcd3 	bl	800efd0 <malloc>
 800f62a:	4602      	mov	r2, r0
 800f62c:	61f8      	str	r0, [r7, #28]
 800f62e:	b928      	cbnz	r0, 800f63c <__pow5mult+0x40>
 800f630:	4b1d      	ldr	r3, [pc, #116]	@ (800f6a8 <__pow5mult+0xac>)
 800f632:	481e      	ldr	r0, [pc, #120]	@ (800f6ac <__pow5mult+0xb0>)
 800f634:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f638:	f000 fb60 	bl	800fcfc <__assert_func>
 800f63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f640:	6004      	str	r4, [r0, #0]
 800f642:	60c4      	str	r4, [r0, #12]
 800f644:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f64c:	b94c      	cbnz	r4, 800f662 <__pow5mult+0x66>
 800f64e:	f240 2171 	movw	r1, #625	@ 0x271
 800f652:	4638      	mov	r0, r7
 800f654:	f7ff ff12 	bl	800f47c <__i2b>
 800f658:	2300      	movs	r3, #0
 800f65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f65e:	4604      	mov	r4, r0
 800f660:	6003      	str	r3, [r0, #0]
 800f662:	f04f 0900 	mov.w	r9, #0
 800f666:	07eb      	lsls	r3, r5, #31
 800f668:	d50a      	bpl.n	800f680 <__pow5mult+0x84>
 800f66a:	4631      	mov	r1, r6
 800f66c:	4622      	mov	r2, r4
 800f66e:	4638      	mov	r0, r7
 800f670:	f7ff ff1a 	bl	800f4a8 <__multiply>
 800f674:	4631      	mov	r1, r6
 800f676:	4680      	mov	r8, r0
 800f678:	4638      	mov	r0, r7
 800f67a:	f7ff fe4b 	bl	800f314 <_Bfree>
 800f67e:	4646      	mov	r6, r8
 800f680:	106d      	asrs	r5, r5, #1
 800f682:	d00b      	beq.n	800f69c <__pow5mult+0xa0>
 800f684:	6820      	ldr	r0, [r4, #0]
 800f686:	b938      	cbnz	r0, 800f698 <__pow5mult+0x9c>
 800f688:	4622      	mov	r2, r4
 800f68a:	4621      	mov	r1, r4
 800f68c:	4638      	mov	r0, r7
 800f68e:	f7ff ff0b 	bl	800f4a8 <__multiply>
 800f692:	6020      	str	r0, [r4, #0]
 800f694:	f8c0 9000 	str.w	r9, [r0]
 800f698:	4604      	mov	r4, r0
 800f69a:	e7e4      	b.n	800f666 <__pow5mult+0x6a>
 800f69c:	4630      	mov	r0, r6
 800f69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a2:	bf00      	nop
 800f6a4:	080101dc 	.word	0x080101dc
 800f6a8:	080100f1 	.word	0x080100f1
 800f6ac:	08010182 	.word	0x08010182

0800f6b0 <__lshift>:
 800f6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	6849      	ldr	r1, [r1, #4]
 800f6b8:	6923      	ldr	r3, [r4, #16]
 800f6ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f6be:	68a3      	ldr	r3, [r4, #8]
 800f6c0:	4607      	mov	r7, r0
 800f6c2:	4691      	mov	r9, r2
 800f6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f6c8:	f108 0601 	add.w	r6, r8, #1
 800f6cc:	42b3      	cmp	r3, r6
 800f6ce:	db0b      	blt.n	800f6e8 <__lshift+0x38>
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	f7ff fddf 	bl	800f294 <_Balloc>
 800f6d6:	4605      	mov	r5, r0
 800f6d8:	b948      	cbnz	r0, 800f6ee <__lshift+0x3e>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	4b28      	ldr	r3, [pc, #160]	@ (800f780 <__lshift+0xd0>)
 800f6de:	4829      	ldr	r0, [pc, #164]	@ (800f784 <__lshift+0xd4>)
 800f6e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f6e4:	f000 fb0a 	bl	800fcfc <__assert_func>
 800f6e8:	3101      	adds	r1, #1
 800f6ea:	005b      	lsls	r3, r3, #1
 800f6ec:	e7ee      	b.n	800f6cc <__lshift+0x1c>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	f100 0114 	add.w	r1, r0, #20
 800f6f4:	f100 0210 	add.w	r2, r0, #16
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	4553      	cmp	r3, sl
 800f6fc:	db33      	blt.n	800f766 <__lshift+0xb6>
 800f6fe:	6920      	ldr	r0, [r4, #16]
 800f700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f704:	f104 0314 	add.w	r3, r4, #20
 800f708:	f019 091f 	ands.w	r9, r9, #31
 800f70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f714:	d02b      	beq.n	800f76e <__lshift+0xbe>
 800f716:	f1c9 0e20 	rsb	lr, r9, #32
 800f71a:	468a      	mov	sl, r1
 800f71c:	2200      	movs	r2, #0
 800f71e:	6818      	ldr	r0, [r3, #0]
 800f720:	fa00 f009 	lsl.w	r0, r0, r9
 800f724:	4310      	orrs	r0, r2
 800f726:	f84a 0b04 	str.w	r0, [sl], #4
 800f72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f72e:	459c      	cmp	ip, r3
 800f730:	fa22 f20e 	lsr.w	r2, r2, lr
 800f734:	d8f3      	bhi.n	800f71e <__lshift+0x6e>
 800f736:	ebac 0304 	sub.w	r3, ip, r4
 800f73a:	3b15      	subs	r3, #21
 800f73c:	f023 0303 	bic.w	r3, r3, #3
 800f740:	3304      	adds	r3, #4
 800f742:	f104 0015 	add.w	r0, r4, #21
 800f746:	4584      	cmp	ip, r0
 800f748:	bf38      	it	cc
 800f74a:	2304      	movcc	r3, #4
 800f74c:	50ca      	str	r2, [r1, r3]
 800f74e:	b10a      	cbz	r2, 800f754 <__lshift+0xa4>
 800f750:	f108 0602 	add.w	r6, r8, #2
 800f754:	3e01      	subs	r6, #1
 800f756:	4638      	mov	r0, r7
 800f758:	612e      	str	r6, [r5, #16]
 800f75a:	4621      	mov	r1, r4
 800f75c:	f7ff fdda 	bl	800f314 <_Bfree>
 800f760:	4628      	mov	r0, r5
 800f762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f766:	f842 0f04 	str.w	r0, [r2, #4]!
 800f76a:	3301      	adds	r3, #1
 800f76c:	e7c5      	b.n	800f6fa <__lshift+0x4a>
 800f76e:	3904      	subs	r1, #4
 800f770:	f853 2b04 	ldr.w	r2, [r3], #4
 800f774:	f841 2f04 	str.w	r2, [r1, #4]!
 800f778:	459c      	cmp	ip, r3
 800f77a:	d8f9      	bhi.n	800f770 <__lshift+0xc0>
 800f77c:	e7ea      	b.n	800f754 <__lshift+0xa4>
 800f77e:	bf00      	nop
 800f780:	08010160 	.word	0x08010160
 800f784:	08010182 	.word	0x08010182

0800f788 <__mcmp>:
 800f788:	690a      	ldr	r2, [r1, #16]
 800f78a:	4603      	mov	r3, r0
 800f78c:	6900      	ldr	r0, [r0, #16]
 800f78e:	1a80      	subs	r0, r0, r2
 800f790:	b530      	push	{r4, r5, lr}
 800f792:	d10e      	bne.n	800f7b2 <__mcmp+0x2a>
 800f794:	3314      	adds	r3, #20
 800f796:	3114      	adds	r1, #20
 800f798:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f79c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f7a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f7a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f7a8:	4295      	cmp	r5, r2
 800f7aa:	d003      	beq.n	800f7b4 <__mcmp+0x2c>
 800f7ac:	d205      	bcs.n	800f7ba <__mcmp+0x32>
 800f7ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7b2:	bd30      	pop	{r4, r5, pc}
 800f7b4:	42a3      	cmp	r3, r4
 800f7b6:	d3f3      	bcc.n	800f7a0 <__mcmp+0x18>
 800f7b8:	e7fb      	b.n	800f7b2 <__mcmp+0x2a>
 800f7ba:	2001      	movs	r0, #1
 800f7bc:	e7f9      	b.n	800f7b2 <__mcmp+0x2a>
	...

0800f7c0 <__mdiff>:
 800f7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c4:	4689      	mov	r9, r1
 800f7c6:	4606      	mov	r6, r0
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	4648      	mov	r0, r9
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	f7ff ffdb 	bl	800f788 <__mcmp>
 800f7d2:	1e05      	subs	r5, r0, #0
 800f7d4:	d112      	bne.n	800f7fc <__mdiff+0x3c>
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7ff fd5b 	bl	800f294 <_Balloc>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	b928      	cbnz	r0, 800f7ee <__mdiff+0x2e>
 800f7e2:	4b3f      	ldr	r3, [pc, #252]	@ (800f8e0 <__mdiff+0x120>)
 800f7e4:	f240 2137 	movw	r1, #567	@ 0x237
 800f7e8:	483e      	ldr	r0, [pc, #248]	@ (800f8e4 <__mdiff+0x124>)
 800f7ea:	f000 fa87 	bl	800fcfc <__assert_func>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	b003      	add	sp, #12
 800f7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fc:	bfbc      	itt	lt
 800f7fe:	464b      	movlt	r3, r9
 800f800:	46a1      	movlt	r9, r4
 800f802:	4630      	mov	r0, r6
 800f804:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f808:	bfba      	itte	lt
 800f80a:	461c      	movlt	r4, r3
 800f80c:	2501      	movlt	r5, #1
 800f80e:	2500      	movge	r5, #0
 800f810:	f7ff fd40 	bl	800f294 <_Balloc>
 800f814:	4602      	mov	r2, r0
 800f816:	b918      	cbnz	r0, 800f820 <__mdiff+0x60>
 800f818:	4b31      	ldr	r3, [pc, #196]	@ (800f8e0 <__mdiff+0x120>)
 800f81a:	f240 2145 	movw	r1, #581	@ 0x245
 800f81e:	e7e3      	b.n	800f7e8 <__mdiff+0x28>
 800f820:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f824:	6926      	ldr	r6, [r4, #16]
 800f826:	60c5      	str	r5, [r0, #12]
 800f828:	f109 0310 	add.w	r3, r9, #16
 800f82c:	f109 0514 	add.w	r5, r9, #20
 800f830:	f104 0e14 	add.w	lr, r4, #20
 800f834:	f100 0b14 	add.w	fp, r0, #20
 800f838:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f83c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f840:	9301      	str	r3, [sp, #4]
 800f842:	46d9      	mov	r9, fp
 800f844:	f04f 0c00 	mov.w	ip, #0
 800f848:	9b01      	ldr	r3, [sp, #4]
 800f84a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f84e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	fa1f f38a 	uxth.w	r3, sl
 800f858:	4619      	mov	r1, r3
 800f85a:	b283      	uxth	r3, r0
 800f85c:	1acb      	subs	r3, r1, r3
 800f85e:	0c00      	lsrs	r0, r0, #16
 800f860:	4463      	add	r3, ip
 800f862:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f866:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f870:	4576      	cmp	r6, lr
 800f872:	f849 3b04 	str.w	r3, [r9], #4
 800f876:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f87a:	d8e5      	bhi.n	800f848 <__mdiff+0x88>
 800f87c:	1b33      	subs	r3, r6, r4
 800f87e:	3b15      	subs	r3, #21
 800f880:	f023 0303 	bic.w	r3, r3, #3
 800f884:	3415      	adds	r4, #21
 800f886:	3304      	adds	r3, #4
 800f888:	42a6      	cmp	r6, r4
 800f88a:	bf38      	it	cc
 800f88c:	2304      	movcc	r3, #4
 800f88e:	441d      	add	r5, r3
 800f890:	445b      	add	r3, fp
 800f892:	461e      	mov	r6, r3
 800f894:	462c      	mov	r4, r5
 800f896:	4544      	cmp	r4, r8
 800f898:	d30e      	bcc.n	800f8b8 <__mdiff+0xf8>
 800f89a:	f108 0103 	add.w	r1, r8, #3
 800f89e:	1b49      	subs	r1, r1, r5
 800f8a0:	f021 0103 	bic.w	r1, r1, #3
 800f8a4:	3d03      	subs	r5, #3
 800f8a6:	45a8      	cmp	r8, r5
 800f8a8:	bf38      	it	cc
 800f8aa:	2100      	movcc	r1, #0
 800f8ac:	440b      	add	r3, r1
 800f8ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8b2:	b191      	cbz	r1, 800f8da <__mdiff+0x11a>
 800f8b4:	6117      	str	r7, [r2, #16]
 800f8b6:	e79d      	b.n	800f7f4 <__mdiff+0x34>
 800f8b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800f8bc:	46e6      	mov	lr, ip
 800f8be:	0c08      	lsrs	r0, r1, #16
 800f8c0:	fa1c fc81 	uxtah	ip, ip, r1
 800f8c4:	4471      	add	r1, lr
 800f8c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f8ca:	b289      	uxth	r1, r1
 800f8cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f8d0:	f846 1b04 	str.w	r1, [r6], #4
 800f8d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f8d8:	e7dd      	b.n	800f896 <__mdiff+0xd6>
 800f8da:	3f01      	subs	r7, #1
 800f8dc:	e7e7      	b.n	800f8ae <__mdiff+0xee>
 800f8de:	bf00      	nop
 800f8e0:	08010160 	.word	0x08010160
 800f8e4:	08010182 	.word	0x08010182

0800f8e8 <__d2b>:
 800f8e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f8ec:	460f      	mov	r7, r1
 800f8ee:	2101      	movs	r1, #1
 800f8f0:	ec59 8b10 	vmov	r8, r9, d0
 800f8f4:	4616      	mov	r6, r2
 800f8f6:	f7ff fccd 	bl	800f294 <_Balloc>
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	b930      	cbnz	r0, 800f90c <__d2b+0x24>
 800f8fe:	4602      	mov	r2, r0
 800f900:	4b23      	ldr	r3, [pc, #140]	@ (800f990 <__d2b+0xa8>)
 800f902:	4824      	ldr	r0, [pc, #144]	@ (800f994 <__d2b+0xac>)
 800f904:	f240 310f 	movw	r1, #783	@ 0x30f
 800f908:	f000 f9f8 	bl	800fcfc <__assert_func>
 800f90c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f914:	b10d      	cbz	r5, 800f91a <__d2b+0x32>
 800f916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f91a:	9301      	str	r3, [sp, #4]
 800f91c:	f1b8 0300 	subs.w	r3, r8, #0
 800f920:	d023      	beq.n	800f96a <__d2b+0x82>
 800f922:	4668      	mov	r0, sp
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	f7ff fd7c 	bl	800f422 <__lo0bits>
 800f92a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f92e:	b1d0      	cbz	r0, 800f966 <__d2b+0x7e>
 800f930:	f1c0 0320 	rsb	r3, r0, #32
 800f934:	fa02 f303 	lsl.w	r3, r2, r3
 800f938:	430b      	orrs	r3, r1
 800f93a:	40c2      	lsrs	r2, r0
 800f93c:	6163      	str	r3, [r4, #20]
 800f93e:	9201      	str	r2, [sp, #4]
 800f940:	9b01      	ldr	r3, [sp, #4]
 800f942:	61a3      	str	r3, [r4, #24]
 800f944:	2b00      	cmp	r3, #0
 800f946:	bf0c      	ite	eq
 800f948:	2201      	moveq	r2, #1
 800f94a:	2202      	movne	r2, #2
 800f94c:	6122      	str	r2, [r4, #16]
 800f94e:	b1a5      	cbz	r5, 800f97a <__d2b+0x92>
 800f950:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f954:	4405      	add	r5, r0
 800f956:	603d      	str	r5, [r7, #0]
 800f958:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f95c:	6030      	str	r0, [r6, #0]
 800f95e:	4620      	mov	r0, r4
 800f960:	b003      	add	sp, #12
 800f962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f966:	6161      	str	r1, [r4, #20]
 800f968:	e7ea      	b.n	800f940 <__d2b+0x58>
 800f96a:	a801      	add	r0, sp, #4
 800f96c:	f7ff fd59 	bl	800f422 <__lo0bits>
 800f970:	9b01      	ldr	r3, [sp, #4]
 800f972:	6163      	str	r3, [r4, #20]
 800f974:	3020      	adds	r0, #32
 800f976:	2201      	movs	r2, #1
 800f978:	e7e8      	b.n	800f94c <__d2b+0x64>
 800f97a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f97e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f982:	6038      	str	r0, [r7, #0]
 800f984:	6918      	ldr	r0, [r3, #16]
 800f986:	f7ff fd2d 	bl	800f3e4 <__hi0bits>
 800f98a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f98e:	e7e5      	b.n	800f95c <__d2b+0x74>
 800f990:	08010160 	.word	0x08010160
 800f994:	08010182 	.word	0x08010182

0800f998 <__sread>:
 800f998:	b510      	push	{r4, lr}
 800f99a:	460c      	mov	r4, r1
 800f99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a0:	f000 f978 	bl	800fc94 <_read_r>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	bfab      	itete	ge
 800f9a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f9ac:	181b      	addge	r3, r3, r0
 800f9ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9b2:	bfac      	ite	ge
 800f9b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f9b6:	81a3      	strhlt	r3, [r4, #12]
 800f9b8:	bd10      	pop	{r4, pc}

0800f9ba <__swrite>:
 800f9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9be:	461f      	mov	r7, r3
 800f9c0:	898b      	ldrh	r3, [r1, #12]
 800f9c2:	05db      	lsls	r3, r3, #23
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	4616      	mov	r6, r2
 800f9ca:	d505      	bpl.n	800f9d8 <__swrite+0x1e>
 800f9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d0:	2302      	movs	r3, #2
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f000 f94c 	bl	800fc70 <_lseek_r>
 800f9d8:	89a3      	ldrh	r3, [r4, #12]
 800f9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f9e2:	81a3      	strh	r3, [r4, #12]
 800f9e4:	4632      	mov	r2, r6
 800f9e6:	463b      	mov	r3, r7
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ee:	f000 b973 	b.w	800fcd8 <_write_r>

0800f9f2 <__sseek>:
 800f9f2:	b510      	push	{r4, lr}
 800f9f4:	460c      	mov	r4, r1
 800f9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9fa:	f000 f939 	bl	800fc70 <_lseek_r>
 800f9fe:	1c43      	adds	r3, r0, #1
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	bf15      	itete	ne
 800fa04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa0e:	81a3      	strheq	r3, [r4, #12]
 800fa10:	bf18      	it	ne
 800fa12:	81a3      	strhne	r3, [r4, #12]
 800fa14:	bd10      	pop	{r4, pc}

0800fa16 <__sclose>:
 800fa16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa1a:	f000 b8f7 	b.w	800fc0c <_close_r>

0800fa1e <__swbuf_r>:
 800fa1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa20:	460e      	mov	r6, r1
 800fa22:	4614      	mov	r4, r2
 800fa24:	4605      	mov	r5, r0
 800fa26:	b118      	cbz	r0, 800fa30 <__swbuf_r+0x12>
 800fa28:	6a03      	ldr	r3, [r0, #32]
 800fa2a:	b90b      	cbnz	r3, 800fa30 <__swbuf_r+0x12>
 800fa2c:	f7fe fa10 	bl	800de50 <__sinit>
 800fa30:	69a3      	ldr	r3, [r4, #24]
 800fa32:	60a3      	str	r3, [r4, #8]
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	071a      	lsls	r2, r3, #28
 800fa38:	d501      	bpl.n	800fa3e <__swbuf_r+0x20>
 800fa3a:	6923      	ldr	r3, [r4, #16]
 800fa3c:	b943      	cbnz	r3, 800fa50 <__swbuf_r+0x32>
 800fa3e:	4621      	mov	r1, r4
 800fa40:	4628      	mov	r0, r5
 800fa42:	f000 f82b 	bl	800fa9c <__swsetup_r>
 800fa46:	b118      	cbz	r0, 800fa50 <__swbuf_r+0x32>
 800fa48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	6922      	ldr	r2, [r4, #16]
 800fa54:	1a98      	subs	r0, r3, r2
 800fa56:	6963      	ldr	r3, [r4, #20]
 800fa58:	b2f6      	uxtb	r6, r6
 800fa5a:	4283      	cmp	r3, r0
 800fa5c:	4637      	mov	r7, r6
 800fa5e:	dc05      	bgt.n	800fa6c <__swbuf_r+0x4e>
 800fa60:	4621      	mov	r1, r4
 800fa62:	4628      	mov	r0, r5
 800fa64:	f7ff fbe2 	bl	800f22c <_fflush_r>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d1ed      	bne.n	800fa48 <__swbuf_r+0x2a>
 800fa6c:	68a3      	ldr	r3, [r4, #8]
 800fa6e:	3b01      	subs	r3, #1
 800fa70:	60a3      	str	r3, [r4, #8]
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	1c5a      	adds	r2, r3, #1
 800fa76:	6022      	str	r2, [r4, #0]
 800fa78:	701e      	strb	r6, [r3, #0]
 800fa7a:	6962      	ldr	r2, [r4, #20]
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d004      	beq.n	800fa8c <__swbuf_r+0x6e>
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	07db      	lsls	r3, r3, #31
 800fa86:	d5e1      	bpl.n	800fa4c <__swbuf_r+0x2e>
 800fa88:	2e0a      	cmp	r6, #10
 800fa8a:	d1df      	bne.n	800fa4c <__swbuf_r+0x2e>
 800fa8c:	4621      	mov	r1, r4
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f7ff fbcc 	bl	800f22c <_fflush_r>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d0d9      	beq.n	800fa4c <__swbuf_r+0x2e>
 800fa98:	e7d6      	b.n	800fa48 <__swbuf_r+0x2a>
	...

0800fa9c <__swsetup_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	4b29      	ldr	r3, [pc, #164]	@ (800fb44 <__swsetup_r+0xa8>)
 800faa0:	4605      	mov	r5, r0
 800faa2:	6818      	ldr	r0, [r3, #0]
 800faa4:	460c      	mov	r4, r1
 800faa6:	b118      	cbz	r0, 800fab0 <__swsetup_r+0x14>
 800faa8:	6a03      	ldr	r3, [r0, #32]
 800faaa:	b90b      	cbnz	r3, 800fab0 <__swsetup_r+0x14>
 800faac:	f7fe f9d0 	bl	800de50 <__sinit>
 800fab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fab4:	0719      	lsls	r1, r3, #28
 800fab6:	d422      	bmi.n	800fafe <__swsetup_r+0x62>
 800fab8:	06da      	lsls	r2, r3, #27
 800faba:	d407      	bmi.n	800facc <__swsetup_r+0x30>
 800fabc:	2209      	movs	r2, #9
 800fabe:	602a      	str	r2, [r5, #0]
 800fac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fac4:	81a3      	strh	r3, [r4, #12]
 800fac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800faca:	e033      	b.n	800fb34 <__swsetup_r+0x98>
 800facc:	0758      	lsls	r0, r3, #29
 800face:	d512      	bpl.n	800faf6 <__swsetup_r+0x5a>
 800fad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fad2:	b141      	cbz	r1, 800fae6 <__swsetup_r+0x4a>
 800fad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fad8:	4299      	cmp	r1, r3
 800fada:	d002      	beq.n	800fae2 <__swsetup_r+0x46>
 800fadc:	4628      	mov	r0, r5
 800fade:	f7ff f8eb 	bl	800ecb8 <_free_r>
 800fae2:	2300      	movs	r3, #0
 800fae4:	6363      	str	r3, [r4, #52]	@ 0x34
 800fae6:	89a3      	ldrh	r3, [r4, #12]
 800fae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800faec:	81a3      	strh	r3, [r4, #12]
 800faee:	2300      	movs	r3, #0
 800faf0:	6063      	str	r3, [r4, #4]
 800faf2:	6923      	ldr	r3, [r4, #16]
 800faf4:	6023      	str	r3, [r4, #0]
 800faf6:	89a3      	ldrh	r3, [r4, #12]
 800faf8:	f043 0308 	orr.w	r3, r3, #8
 800fafc:	81a3      	strh	r3, [r4, #12]
 800fafe:	6923      	ldr	r3, [r4, #16]
 800fb00:	b94b      	cbnz	r3, 800fb16 <__swsetup_r+0x7a>
 800fb02:	89a3      	ldrh	r3, [r4, #12]
 800fb04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb0c:	d003      	beq.n	800fb16 <__swsetup_r+0x7a>
 800fb0e:	4621      	mov	r1, r4
 800fb10:	4628      	mov	r0, r5
 800fb12:	f000 f83f 	bl	800fb94 <__smakebuf_r>
 800fb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb1a:	f013 0201 	ands.w	r2, r3, #1
 800fb1e:	d00a      	beq.n	800fb36 <__swsetup_r+0x9a>
 800fb20:	2200      	movs	r2, #0
 800fb22:	60a2      	str	r2, [r4, #8]
 800fb24:	6962      	ldr	r2, [r4, #20]
 800fb26:	4252      	negs	r2, r2
 800fb28:	61a2      	str	r2, [r4, #24]
 800fb2a:	6922      	ldr	r2, [r4, #16]
 800fb2c:	b942      	cbnz	r2, 800fb40 <__swsetup_r+0xa4>
 800fb2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb32:	d1c5      	bne.n	800fac0 <__swsetup_r+0x24>
 800fb34:	bd38      	pop	{r3, r4, r5, pc}
 800fb36:	0799      	lsls	r1, r3, #30
 800fb38:	bf58      	it	pl
 800fb3a:	6962      	ldrpl	r2, [r4, #20]
 800fb3c:	60a2      	str	r2, [r4, #8]
 800fb3e:	e7f4      	b.n	800fb2a <__swsetup_r+0x8e>
 800fb40:	2000      	movs	r0, #0
 800fb42:	e7f7      	b.n	800fb34 <__swsetup_r+0x98>
 800fb44:	20000028 	.word	0x20000028

0800fb48 <__swhatbuf_r>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb50:	2900      	cmp	r1, #0
 800fb52:	b096      	sub	sp, #88	@ 0x58
 800fb54:	4615      	mov	r5, r2
 800fb56:	461e      	mov	r6, r3
 800fb58:	da0d      	bge.n	800fb76 <__swhatbuf_r+0x2e>
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb60:	f04f 0100 	mov.w	r1, #0
 800fb64:	bf14      	ite	ne
 800fb66:	2340      	movne	r3, #64	@ 0x40
 800fb68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	6031      	str	r1, [r6, #0]
 800fb70:	602b      	str	r3, [r5, #0]
 800fb72:	b016      	add	sp, #88	@ 0x58
 800fb74:	bd70      	pop	{r4, r5, r6, pc}
 800fb76:	466a      	mov	r2, sp
 800fb78:	f000 f858 	bl	800fc2c <_fstat_r>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	dbec      	blt.n	800fb5a <__swhatbuf_r+0x12>
 800fb80:	9901      	ldr	r1, [sp, #4]
 800fb82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb8a:	4259      	negs	r1, r3
 800fb8c:	4159      	adcs	r1, r3
 800fb8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb92:	e7eb      	b.n	800fb6c <__swhatbuf_r+0x24>

0800fb94 <__smakebuf_r>:
 800fb94:	898b      	ldrh	r3, [r1, #12]
 800fb96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb98:	079d      	lsls	r5, r3, #30
 800fb9a:	4606      	mov	r6, r0
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	d507      	bpl.n	800fbb0 <__smakebuf_r+0x1c>
 800fba0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fba4:	6023      	str	r3, [r4, #0]
 800fba6:	6123      	str	r3, [r4, #16]
 800fba8:	2301      	movs	r3, #1
 800fbaa:	6163      	str	r3, [r4, #20]
 800fbac:	b003      	add	sp, #12
 800fbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb0:	ab01      	add	r3, sp, #4
 800fbb2:	466a      	mov	r2, sp
 800fbb4:	f7ff ffc8 	bl	800fb48 <__swhatbuf_r>
 800fbb8:	9f00      	ldr	r7, [sp, #0]
 800fbba:	4605      	mov	r5, r0
 800fbbc:	4639      	mov	r1, r7
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	f7ff fa30 	bl	800f024 <_malloc_r>
 800fbc4:	b948      	cbnz	r0, 800fbda <__smakebuf_r+0x46>
 800fbc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbca:	059a      	lsls	r2, r3, #22
 800fbcc:	d4ee      	bmi.n	800fbac <__smakebuf_r+0x18>
 800fbce:	f023 0303 	bic.w	r3, r3, #3
 800fbd2:	f043 0302 	orr.w	r3, r3, #2
 800fbd6:	81a3      	strh	r3, [r4, #12]
 800fbd8:	e7e2      	b.n	800fba0 <__smakebuf_r+0xc>
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	6020      	str	r0, [r4, #0]
 800fbde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbe2:	81a3      	strh	r3, [r4, #12]
 800fbe4:	9b01      	ldr	r3, [sp, #4]
 800fbe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbea:	b15b      	cbz	r3, 800fc04 <__smakebuf_r+0x70>
 800fbec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f000 f82d 	bl	800fc50 <_isatty_r>
 800fbf6:	b128      	cbz	r0, 800fc04 <__smakebuf_r+0x70>
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	f023 0303 	bic.w	r3, r3, #3
 800fbfe:	f043 0301 	orr.w	r3, r3, #1
 800fc02:	81a3      	strh	r3, [r4, #12]
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	431d      	orrs	r5, r3
 800fc08:	81a5      	strh	r5, [r4, #12]
 800fc0a:	e7cf      	b.n	800fbac <__smakebuf_r+0x18>

0800fc0c <_close_r>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4d06      	ldr	r5, [pc, #24]	@ (800fc28 <_close_r+0x1c>)
 800fc10:	2300      	movs	r3, #0
 800fc12:	4604      	mov	r4, r0
 800fc14:	4608      	mov	r0, r1
 800fc16:	602b      	str	r3, [r5, #0]
 800fc18:	f7f3 fa3e 	bl	8003098 <_close>
 800fc1c:	1c43      	adds	r3, r0, #1
 800fc1e:	d102      	bne.n	800fc26 <_close_r+0x1a>
 800fc20:	682b      	ldr	r3, [r5, #0]
 800fc22:	b103      	cbz	r3, 800fc26 <_close_r+0x1a>
 800fc24:	6023      	str	r3, [r4, #0]
 800fc26:	bd38      	pop	{r3, r4, r5, pc}
 800fc28:	2000971c 	.word	0x2000971c

0800fc2c <_fstat_r>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4d07      	ldr	r5, [pc, #28]	@ (800fc4c <_fstat_r+0x20>)
 800fc30:	2300      	movs	r3, #0
 800fc32:	4604      	mov	r4, r0
 800fc34:	4608      	mov	r0, r1
 800fc36:	4611      	mov	r1, r2
 800fc38:	602b      	str	r3, [r5, #0]
 800fc3a:	f7f3 fa39 	bl	80030b0 <_fstat>
 800fc3e:	1c43      	adds	r3, r0, #1
 800fc40:	d102      	bne.n	800fc48 <_fstat_r+0x1c>
 800fc42:	682b      	ldr	r3, [r5, #0]
 800fc44:	b103      	cbz	r3, 800fc48 <_fstat_r+0x1c>
 800fc46:	6023      	str	r3, [r4, #0]
 800fc48:	bd38      	pop	{r3, r4, r5, pc}
 800fc4a:	bf00      	nop
 800fc4c:	2000971c 	.word	0x2000971c

0800fc50 <_isatty_r>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	4d06      	ldr	r5, [pc, #24]	@ (800fc6c <_isatty_r+0x1c>)
 800fc54:	2300      	movs	r3, #0
 800fc56:	4604      	mov	r4, r0
 800fc58:	4608      	mov	r0, r1
 800fc5a:	602b      	str	r3, [r5, #0]
 800fc5c:	f7f3 fa38 	bl	80030d0 <_isatty>
 800fc60:	1c43      	adds	r3, r0, #1
 800fc62:	d102      	bne.n	800fc6a <_isatty_r+0x1a>
 800fc64:	682b      	ldr	r3, [r5, #0]
 800fc66:	b103      	cbz	r3, 800fc6a <_isatty_r+0x1a>
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	bd38      	pop	{r3, r4, r5, pc}
 800fc6c:	2000971c 	.word	0x2000971c

0800fc70 <_lseek_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4d07      	ldr	r5, [pc, #28]	@ (800fc90 <_lseek_r+0x20>)
 800fc74:	4604      	mov	r4, r0
 800fc76:	4608      	mov	r0, r1
 800fc78:	4611      	mov	r1, r2
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	602a      	str	r2, [r5, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	f7f3 fa31 	bl	80030e6 <_lseek>
 800fc84:	1c43      	adds	r3, r0, #1
 800fc86:	d102      	bne.n	800fc8e <_lseek_r+0x1e>
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	b103      	cbz	r3, 800fc8e <_lseek_r+0x1e>
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	bd38      	pop	{r3, r4, r5, pc}
 800fc90:	2000971c 	.word	0x2000971c

0800fc94 <_read_r>:
 800fc94:	b538      	push	{r3, r4, r5, lr}
 800fc96:	4d07      	ldr	r5, [pc, #28]	@ (800fcb4 <_read_r+0x20>)
 800fc98:	4604      	mov	r4, r0
 800fc9a:	4608      	mov	r0, r1
 800fc9c:	4611      	mov	r1, r2
 800fc9e:	2200      	movs	r2, #0
 800fca0:	602a      	str	r2, [r5, #0]
 800fca2:	461a      	mov	r2, r3
 800fca4:	f7f3 f9db 	bl	800305e <_read>
 800fca8:	1c43      	adds	r3, r0, #1
 800fcaa:	d102      	bne.n	800fcb2 <_read_r+0x1e>
 800fcac:	682b      	ldr	r3, [r5, #0]
 800fcae:	b103      	cbz	r3, 800fcb2 <_read_r+0x1e>
 800fcb0:	6023      	str	r3, [r4, #0]
 800fcb2:	bd38      	pop	{r3, r4, r5, pc}
 800fcb4:	2000971c 	.word	0x2000971c

0800fcb8 <_sbrk_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	4d06      	ldr	r5, [pc, #24]	@ (800fcd4 <_sbrk_r+0x1c>)
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	4608      	mov	r0, r1
 800fcc2:	602b      	str	r3, [r5, #0]
 800fcc4:	f7f3 fa1c 	bl	8003100 <_sbrk>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_sbrk_r+0x1a>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_sbrk_r+0x1a>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	2000971c 	.word	0x2000971c

0800fcd8 <_write_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4d07      	ldr	r5, [pc, #28]	@ (800fcf8 <_write_r+0x20>)
 800fcdc:	4604      	mov	r4, r0
 800fcde:	4608      	mov	r0, r1
 800fce0:	4611      	mov	r1, r2
 800fce2:	2200      	movs	r2, #0
 800fce4:	602a      	str	r2, [r5, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	f7f1 fc7d 	bl	80015e6 <_write>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_write_r+0x1e>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_write_r+0x1e>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	2000971c 	.word	0x2000971c

0800fcfc <__assert_func>:
 800fcfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcfe:	4614      	mov	r4, r2
 800fd00:	461a      	mov	r2, r3
 800fd02:	4b09      	ldr	r3, [pc, #36]	@ (800fd28 <__assert_func+0x2c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4605      	mov	r5, r0
 800fd08:	68d8      	ldr	r0, [r3, #12]
 800fd0a:	b954      	cbnz	r4, 800fd22 <__assert_func+0x26>
 800fd0c:	4b07      	ldr	r3, [pc, #28]	@ (800fd2c <__assert_func+0x30>)
 800fd0e:	461c      	mov	r4, r3
 800fd10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd14:	9100      	str	r1, [sp, #0]
 800fd16:	462b      	mov	r3, r5
 800fd18:	4905      	ldr	r1, [pc, #20]	@ (800fd30 <__assert_func+0x34>)
 800fd1a:	f000 f833 	bl	800fd84 <fiprintf>
 800fd1e:	f000 f850 	bl	800fdc2 <abort>
 800fd22:	4b04      	ldr	r3, [pc, #16]	@ (800fd34 <__assert_func+0x38>)
 800fd24:	e7f4      	b.n	800fd10 <__assert_func+0x14>
 800fd26:	bf00      	nop
 800fd28:	20000028 	.word	0x20000028
 800fd2c:	0801041e 	.word	0x0801041e
 800fd30:	080103f0 	.word	0x080103f0
 800fd34:	080103e3 	.word	0x080103e3

0800fd38 <_calloc_r>:
 800fd38:	b570      	push	{r4, r5, r6, lr}
 800fd3a:	fba1 5402 	umull	r5, r4, r1, r2
 800fd3e:	b93c      	cbnz	r4, 800fd50 <_calloc_r+0x18>
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7ff f96f 	bl	800f024 <_malloc_r>
 800fd46:	4606      	mov	r6, r0
 800fd48:	b928      	cbnz	r0, 800fd56 <_calloc_r+0x1e>
 800fd4a:	2600      	movs	r6, #0
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}
 800fd50:	220c      	movs	r2, #12
 800fd52:	6002      	str	r2, [r0, #0]
 800fd54:	e7f9      	b.n	800fd4a <_calloc_r+0x12>
 800fd56:	462a      	mov	r2, r5
 800fd58:	4621      	mov	r1, r4
 800fd5a:	f7fe f8c1 	bl	800dee0 <memset>
 800fd5e:	e7f5      	b.n	800fd4c <_calloc_r+0x14>

0800fd60 <__ascii_mbtowc>:
 800fd60:	b082      	sub	sp, #8
 800fd62:	b901      	cbnz	r1, 800fd66 <__ascii_mbtowc+0x6>
 800fd64:	a901      	add	r1, sp, #4
 800fd66:	b142      	cbz	r2, 800fd7a <__ascii_mbtowc+0x1a>
 800fd68:	b14b      	cbz	r3, 800fd7e <__ascii_mbtowc+0x1e>
 800fd6a:	7813      	ldrb	r3, [r2, #0]
 800fd6c:	600b      	str	r3, [r1, #0]
 800fd6e:	7812      	ldrb	r2, [r2, #0]
 800fd70:	1e10      	subs	r0, r2, #0
 800fd72:	bf18      	it	ne
 800fd74:	2001      	movne	r0, #1
 800fd76:	b002      	add	sp, #8
 800fd78:	4770      	bx	lr
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	e7fb      	b.n	800fd76 <__ascii_mbtowc+0x16>
 800fd7e:	f06f 0001 	mvn.w	r0, #1
 800fd82:	e7f8      	b.n	800fd76 <__ascii_mbtowc+0x16>

0800fd84 <fiprintf>:
 800fd84:	b40e      	push	{r1, r2, r3}
 800fd86:	b503      	push	{r0, r1, lr}
 800fd88:	4601      	mov	r1, r0
 800fd8a:	ab03      	add	r3, sp, #12
 800fd8c:	4805      	ldr	r0, [pc, #20]	@ (800fda4 <fiprintf+0x20>)
 800fd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd92:	6800      	ldr	r0, [r0, #0]
 800fd94:	9301      	str	r3, [sp, #4]
 800fd96:	f7ff f803 	bl	800eda0 <_vfiprintf_r>
 800fd9a:	b002      	add	sp, #8
 800fd9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fda0:	b003      	add	sp, #12
 800fda2:	4770      	bx	lr
 800fda4:	20000028 	.word	0x20000028

0800fda8 <__ascii_wctomb>:
 800fda8:	4603      	mov	r3, r0
 800fdaa:	4608      	mov	r0, r1
 800fdac:	b141      	cbz	r1, 800fdc0 <__ascii_wctomb+0x18>
 800fdae:	2aff      	cmp	r2, #255	@ 0xff
 800fdb0:	d904      	bls.n	800fdbc <__ascii_wctomb+0x14>
 800fdb2:	228a      	movs	r2, #138	@ 0x8a
 800fdb4:	601a      	str	r2, [r3, #0]
 800fdb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fdba:	4770      	bx	lr
 800fdbc:	700a      	strb	r2, [r1, #0]
 800fdbe:	2001      	movs	r0, #1
 800fdc0:	4770      	bx	lr

0800fdc2 <abort>:
 800fdc2:	b508      	push	{r3, lr}
 800fdc4:	2006      	movs	r0, #6
 800fdc6:	f000 f82b 	bl	800fe20 <raise>
 800fdca:	2001      	movs	r0, #1
 800fdcc:	f7f3 f93c 	bl	8003048 <_exit>

0800fdd0 <_raise_r>:
 800fdd0:	291f      	cmp	r1, #31
 800fdd2:	b538      	push	{r3, r4, r5, lr}
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	460c      	mov	r4, r1
 800fdd8:	d904      	bls.n	800fde4 <_raise_r+0x14>
 800fdda:	2316      	movs	r3, #22
 800fddc:	6003      	str	r3, [r0, #0]
 800fdde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fde2:	bd38      	pop	{r3, r4, r5, pc}
 800fde4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fde6:	b112      	cbz	r2, 800fdee <_raise_r+0x1e>
 800fde8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdec:	b94b      	cbnz	r3, 800fe02 <_raise_r+0x32>
 800fdee:	4628      	mov	r0, r5
 800fdf0:	f000 f830 	bl	800fe54 <_getpid_r>
 800fdf4:	4622      	mov	r2, r4
 800fdf6:	4601      	mov	r1, r0
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdfe:	f000 b817 	b.w	800fe30 <_kill_r>
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d00a      	beq.n	800fe1c <_raise_r+0x4c>
 800fe06:	1c59      	adds	r1, r3, #1
 800fe08:	d103      	bne.n	800fe12 <_raise_r+0x42>
 800fe0a:	2316      	movs	r3, #22
 800fe0c:	6003      	str	r3, [r0, #0]
 800fe0e:	2001      	movs	r0, #1
 800fe10:	e7e7      	b.n	800fde2 <_raise_r+0x12>
 800fe12:	2100      	movs	r1, #0
 800fe14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe18:	4620      	mov	r0, r4
 800fe1a:	4798      	blx	r3
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	e7e0      	b.n	800fde2 <_raise_r+0x12>

0800fe20 <raise>:
 800fe20:	4b02      	ldr	r3, [pc, #8]	@ (800fe2c <raise+0xc>)
 800fe22:	4601      	mov	r1, r0
 800fe24:	6818      	ldr	r0, [r3, #0]
 800fe26:	f7ff bfd3 	b.w	800fdd0 <_raise_r>
 800fe2a:	bf00      	nop
 800fe2c:	20000028 	.word	0x20000028

0800fe30 <_kill_r>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	4d07      	ldr	r5, [pc, #28]	@ (800fe50 <_kill_r+0x20>)
 800fe34:	2300      	movs	r3, #0
 800fe36:	4604      	mov	r4, r0
 800fe38:	4608      	mov	r0, r1
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	602b      	str	r3, [r5, #0]
 800fe3e:	f7f3 f8f3 	bl	8003028 <_kill>
 800fe42:	1c43      	adds	r3, r0, #1
 800fe44:	d102      	bne.n	800fe4c <_kill_r+0x1c>
 800fe46:	682b      	ldr	r3, [r5, #0]
 800fe48:	b103      	cbz	r3, 800fe4c <_kill_r+0x1c>
 800fe4a:	6023      	str	r3, [r4, #0]
 800fe4c:	bd38      	pop	{r3, r4, r5, pc}
 800fe4e:	bf00      	nop
 800fe50:	2000971c 	.word	0x2000971c

0800fe54 <_getpid_r>:
 800fe54:	f7f3 b8e0 	b.w	8003018 <_getpid>

0800fe58 <_init>:
 800fe58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5a:	bf00      	nop
 800fe5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe5e:	bc08      	pop	{r3}
 800fe60:	469e      	mov	lr, r3
 800fe62:	4770      	bx	lr

0800fe64 <_fini>:
 800fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe66:	bf00      	nop
 800fe68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe6a:	bc08      	pop	{r3}
 800fe6c:	469e      	mov	lr, r3
 800fe6e:	4770      	bx	lr
